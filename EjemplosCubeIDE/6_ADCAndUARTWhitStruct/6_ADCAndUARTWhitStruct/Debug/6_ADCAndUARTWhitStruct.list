
6_ADCAndUARTWhitStruct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004478  08004478  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004478  08004478  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004478  08004478  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000068  080044e8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080044e8  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a931  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239d  00000000  00000000  0002aa05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002cda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000720  00000000  00000000  0002d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ca6  00000000  00000000  0002de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da61  00000000  00000000  00046ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008908f  00000000  00000000  00054547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b48  00000000  00000000  000dd5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000e0120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080043c0 	.word	0x080043c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080043c0 	.word	0x080043c0

0800014c <ADC_Read>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;

uint16_t ADC_Read()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&adc1);               // Inicio el ADC   
 8000150:	4806      	ldr	r0, [pc, #24]	; (800016c <ADC_Read+0x20>)
 8000152:	f000 fd69 	bl	8000c28 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&adc1,1); // Conversi√≥n por interrup
 8000156:	2101      	movs	r1, #1
 8000158:	4804      	ldr	r0, [pc, #16]	; (800016c <ADC_Read+0x20>)
 800015a:	f000 fe13 	bl	8000d84 <HAL_ADC_PollForConversion>
    return (HAL_ADC_GetValue(&adc1));   // obtengo el valor del adc
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <ADC_Read+0x20>)
 8000160:	f000 ff16 	bl	8000f90 <HAL_ADC_GetValue>
 8000164:	4603      	mov	r3, r0
 8000166:	b29b      	uxth	r3, r3
}
 8000168:	4618      	mov	r0, r3
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000084 	.word	0x20000084

08000170 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000182:	4a19      	ldr	r2, [pc, #100]	; (80001e8 <MX_ADC1_Init+0x78>)
 8000184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000188:	2200      	movs	r2, #0
 800018a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800018c:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000192:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000194:	2200      	movs	r2, #0
 8000196:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <MX_ADC1_Init+0x74>)
 800019a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800019e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ae:	f000 fc63 	bl	8000a78 <HAL_ADC_Init>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001b8:	f000 f9e7 	bl	800058a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001bc:	2300      	movs	r3, #0
 80001be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001c0:	2301      	movs	r3, #1
 80001c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ce:	f000 ffbd 	bl	800114c <HAL_ADC_ConfigChannel>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001d8:	f000 f9d7 	bl	800058a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001dc:	bf00      	nop
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000084 	.word	0x20000084
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a18      	ldr	r2, [pc, #96]	; (8000268 <HAL_ADC_MspInit+0x7c>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d129      	bne.n	8000260 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a16      	ldr	r2, [pc, #88]	; (800026c <HAL_ADC_MspInit+0x80>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <HAL_ADC_MspInit+0x80>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <HAL_ADC_MspInit+0x80>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a10      	ldr	r2, [pc, #64]	; (800026c <HAL_ADC_MspInit+0x80>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <HAL_ADC_MspInit+0x80>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800023c:	2301      	movs	r3, #1
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000240:	2303      	movs	r3, #3
 8000242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4619      	mov	r1, r3
 800024a:	4809      	ldr	r0, [pc, #36]	; (8000270 <HAL_ADC_MspInit+0x84>)
 800024c:	f001 fc3c 	bl	8001ac8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000250:	2200      	movs	r2, #0
 8000252:	2100      	movs	r1, #0
 8000254:	2012      	movs	r0, #18
 8000256:	f001 f9ec 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800025a:	2012      	movs	r0, #18
 800025c:	f001 fa05 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000260:	bf00      	nop
 8000262:	3720      	adds	r7, #32
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40012400 	.word	0x40012400
 800026c:	40021000 	.word	0x40021000
 8000270:	40010800 	.word	0x40010800

08000274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000288:	4b1d      	ldr	r3, [pc, #116]	; (8000300 <MX_GPIO_Init+0x8c>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <MX_GPIO_Init+0x8c>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <MX_GPIO_Init+0x8c>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a0:	4b17      	ldr	r3, [pc, #92]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a16      	ldr	r2, [pc, #88]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0304 	and.w	r3, r3, #4
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a10      	ldr	r2, [pc, #64]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2107      	movs	r1, #7
 80002d4:	480b      	ldr	r0, [pc, #44]	; (8000304 <MX_GPIO_Init+0x90>)
 80002d6:	f001 fd7b 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80002da:	2307      	movs	r3, #7
 80002dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	4619      	mov	r1, r3
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_GPIO_Init+0x90>)
 80002f2:	f001 fbe9 	bl	8001ac8 <HAL_GPIO_Init>

}
 80002f6:	bf00      	nop
 80002f8:	3720      	adds	r7, #32
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	40010c00 	.word	0x40010c00

08000308 <__io_putchar>:
#define uartx huart1   //   colocar el puerto serial a usar

extern UART_HandleTypeDef uartx;


int __io_putchar(int ch) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 //ITM_SendChar(ch);//  si se quiere usar por debbuger
HAL_UART_Transmit(&uartx, (uint8_t *)&ch, 1, 0xFFFF);// printf al puerto serial sefinico
 8000310:	1d39      	adds	r1, r7, #4
 8000312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000316:	2201      	movs	r2, #1
 8000318:	4803      	ldr	r0, [pc, #12]	; (8000328 <__io_putchar+0x20>)
 800031a:	f002 fb3d 	bl	8002998 <HAL_UART_Transmit>
return(ch);
 800031e:	687b      	ldr	r3, [r7, #4]
}
 8000320:	4618      	mov	r0, r3
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200000bc 	.word	0x200000bc

0800032c <main>:
} charFrame_t; //Fin de union


void SystemClock_Config(void);

int main(void){
 800032c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000330:	b099      	sub	sp, #100	; 0x64
 8000332:	af0c      	add	r7, sp, #48	; 0x30

  //-- Inicializacion de bloques --
	HAL_Init();
 8000334:	f000 fb1a 	bl	800096c <HAL_Init>
	SystemClock_Config();
 8000338:	f000 f8cc 	bl	80004d4 <SystemClock_Config>
	MX_GPIO_Init();
 800033c:	f7ff ff9a 	bl	8000274 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000340:	f7ff ff16 	bl	8000170 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000344:	f000 fa44 	bl	80007d0 <MX_USART1_UART_Init>

  // -- Variables del sistema --
	frame_t	dataFrame;
	static uint16_t	lecturaAdc;
	unsigned	char count = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	unsigned	char contador =1;
 800034e:	2301      	movs	r3, #1
 8000350:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	while (1){

		lecturaAdc = ADC_Read(); //Lectura del ADC
 8000354:	f7ff fefa 	bl	800014c <ADC_Read>
 8000358:	4603      	mov	r3, r0
 800035a:	461a      	mov	r2, r3
 800035c:	4b5a      	ldr	r3, [pc, #360]	; (80004c8 <main+0x19c>)
 800035e:	801a      	strh	r2, [r3, #0]

		switch (contador){
 8000360:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000364:	3b01      	subs	r3, #1
 8000366:	2b07      	cmp	r3, #7
 8000368:	f200 8083 	bhi.w	8000472 <main+0x146>
 800036c:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <main+0x48>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	08000395 	.word	0x08000395
 8000378:	0800039d 	.word	0x0800039d
 800037c:	080003a5 	.word	0x080003a5
 8000380:	080003ad 	.word	0x080003ad
 8000384:	080003b5 	.word	0x080003b5
 8000388:	080003bd 	.word	0x080003bd
 800038c:	080003c5 	.word	0x080003c5
 8000390:	080003cd 	.word	0x080003cd

		case 1: dataFrame.inA1 = lecturaAdc; break;
 8000394:	4b4c      	ldr	r3, [pc, #304]	; (80004c8 <main+0x19c>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	82fb      	strh	r3, [r7, #22]
 800039a:	e06a      	b.n	8000472 <main+0x146>
		case 2: dataFrame.inA2 = lecturaAdc; break;
 800039c:	4b4a      	ldr	r3, [pc, #296]	; (80004c8 <main+0x19c>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	833b      	strh	r3, [r7, #24]
 80003a2:	e066      	b.n	8000472 <main+0x146>
		case 3: dataFrame.inA3 = lecturaAdc; break;
 80003a4:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <main+0x19c>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	837b      	strh	r3, [r7, #26]
 80003aa:	e062      	b.n	8000472 <main+0x146>
		case 4: dataFrame.inA4 = lecturaAdc; break;
 80003ac:	4b46      	ldr	r3, [pc, #280]	; (80004c8 <main+0x19c>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	83bb      	strh	r3, [r7, #28]
 80003b2:	e05e      	b.n	8000472 <main+0x146>
		case 5: dataFrame.inA5 = lecturaAdc; break;
 80003b4:	4b44      	ldr	r3, [pc, #272]	; (80004c8 <main+0x19c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	83fb      	strh	r3, [r7, #30]
 80003ba:	e05a      	b.n	8000472 <main+0x146>
		case 6: dataFrame.inA6 = lecturaAdc; break;
 80003bc:	4b42      	ldr	r3, [pc, #264]	; (80004c8 <main+0x19c>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	843b      	strh	r3, [r7, #32]
 80003c2:	e056      	b.n	8000472 <main+0x146>
		case 7: dataFrame.inA7 = lecturaAdc; break;
 80003c4:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <main+0x19c>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80003ca:	e052      	b.n	8000472 <main+0x146>
		case 8:

			dataFrame.inA8 = lecturaAdc;
 80003cc:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <main+0x19c>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			dataFrame.start = 0x1B;
 80003d2:	231b      	movs	r3, #27
 80003d4:	753b      	strb	r3, [r7, #20]
			dataFrame.count = count;
 80003d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003da:	757b      	strb	r3, [r7, #21]
			dataFrame.outA1 = 0x05;
 80003dc:	2305      	movs	r3, #5
 80003de:	84fb      	strh	r3, [r7, #38]	; 0x26
			dataFrame.outA2 = 0x05;
 80003e0:	2305      	movs	r3, #5
 80003e2:	853b      	strh	r3, [r7, #40]	; 0x28
			dataFrame.insDig =  0xDE;
 80003e4:	23de      	movs	r3, #222	; 0xde
 80003e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			dataFrame.outsDig = 0xDE;
 80003ea:	23de      	movs	r3, #222	; 0xde
 80003ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			count++;
 80003f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003f4:	3301      	adds	r3, #1
 80003f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			// Este es el que se usa para mandar a QT
//			HAL_UART_Transmit(&huart1, (uint8_t *)&dataFrame, sizeof(dataFrame), 0xFFFF);

			//Para debugear en Proteus
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 80003fa:	7d3b      	ldrb	r3, [r7, #20]
 80003fc:	469c      	mov	ip, r3
 80003fe:	7d7b      	ldrb	r3, [r7, #21]
 8000400:	469e      	mov	lr, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 8000402:	8afb      	ldrh	r3, [r7, #22]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000404:	4698      	mov	r8, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 8000406:	8b3b      	ldrh	r3, [r7, #24]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000408:	461a      	mov	r2, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 800040a:	8b7b      	ldrh	r3, [r7, #26]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 800040c:	4619      	mov	r1, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 800040e:	8bbb      	ldrh	r3, [r7, #28]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000410:	4618      	mov	r0, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 8000412:	8bfb      	ldrh	r3, [r7, #30]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000414:	461c      	mov	r4, r3
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 8000416:	8c3b      	ldrh	r3, [r7, #32]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000418:	461d      	mov	r5, r3
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 800041a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 800041c:	461e      	mov	r6, r3
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 800041e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000420:	60fb      	str	r3, [r7, #12]
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 8000422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000424:	60bb      	str	r3, [r7, #8]
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 8000426:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000428:	607b      	str	r3, [r7, #4]
					dataFrame.insDig,dataFrame.outsDig);
 800042a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 800042e:	603b      	str	r3, [r7, #0]
					dataFrame.insDig,dataFrame.outsDig);
 8000430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000434:	930a      	str	r3, [sp, #40]	; 0x28
 8000436:	f8d7 9000 	ldr.w	r9, [r7]
 800043a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800043e:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8000442:	f8cd 9020 	str.w	r9, [sp, #32]
 8000446:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800044a:	f8cd 901c 	str.w	r9, [sp, #28]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	9306      	str	r3, [sp, #24]
 8000452:	9605      	str	r6, [sp, #20]
 8000454:	9504      	str	r5, [sp, #16]
 8000456:	9403      	str	r4, [sp, #12]
 8000458:	9002      	str	r0, [sp, #8]
 800045a:	9101      	str	r1, [sp, #4]
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	4643      	mov	r3, r8
 8000460:	4672      	mov	r2, lr
 8000462:	4661      	mov	r1, ip
 8000464:	4819      	ldr	r0, [pc, #100]	; (80004cc <main+0x1a0>)
 8000466:	f003 f92d 	bl	80036c4 <iprintf>
			contador =0;
 800046a:	2300      	movs	r3, #0
 800046c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8000470:	bf00      	nop
		}

		HAL_GPIO_WritePin(GPIOB, PIN1, (contador & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000472:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	b2db      	uxtb	r3, r3
 800047c:	461a      	mov	r2, r3
 800047e:	2101      	movs	r1, #1
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <main+0x1a4>)
 8000482:	f001 fca5 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PIN2, (contador & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000486:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800048a:	105b      	asrs	r3, r3, #1
 800048c:	b2db      	uxtb	r3, r3
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	2102      	movs	r1, #2
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <main+0x1a4>)
 800049a:	f001 fc99 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PIN3, (contador & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800049e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004a2:	109b      	asrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	461a      	mov	r2, r3
 80004ae:	2104      	movs	r1, #4
 80004b0:	4807      	ldr	r0, [pc, #28]	; (80004d0 <main+0x1a4>)
 80004b2:	f001 fc8d 	bl	8001dd0 <HAL_GPIO_WritePin>
		contador++;
 80004b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004ba:	3301      	adds	r3, #1
 80004bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		HAL_Delay(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 fab5 	bl	8000a30 <HAL_Delay>
		lecturaAdc = ADC_Read(); //Lectura del ADC
 80004c6:	e745      	b.n	8000354 <main+0x28>
 80004c8:	200000b4 	.word	0x200000b4
 80004cc:	080043d8 	.word	0x080043d8
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	; 0x50
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 f943 	bl	800376e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000504:	2301      	movs	r3, #1
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000520:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000524:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fc68 	bl	8001e00 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000536:	f000 f828 	bl	800058a <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fed4 	bl	8002304 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x92>
    Error_Handler();
 8000562:	f000 f812 	bl	800058a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000566:	2302      	movs	r3, #2
 8000568:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800056a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f854 	bl	8002620 <HAL_RCCEx_PeriphCLKConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800057e:	f000 f804 	bl	800058a <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	; 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <Error_Handler>:

void Error_Handler(void){
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058e:	b672      	cpsid	i
}
 8000590:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 8000592:	e7fe      	b.n	8000592 <Error_Handler+0x8>

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_MspInit+0x5c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <HAL_MspInit+0x5c>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_MspInit+0x5c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x5c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_MspInit+0x5c>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_MspInit+0x5c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_MspInit+0x60>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_MspInit+0x60>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010000 	.word	0x40010000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063e:	f000 f9db 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <DMA1_Channel4_IRQHandler+0x10>)
 800064e:	f001 f935 	bl	80018bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000104 	.word	0x20000104

0800065c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <ADC1_2_IRQHandler+0x10>)
 8000662:	f000 fca1 	bl	8000fa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000084 	.word	0x20000084

08000670 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <USART1_IRQHandler+0x10>)
 8000676:	f002 fa13 	bl	8002aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000bc 	.word	0x200000bc

08000684 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	e00a      	b.n	80006ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000696:	f3af 8000 	nop.w
 800069a:	4601      	mov	r1, r0
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	60ba      	str	r2, [r7, #8]
 80006a2:	b2ca      	uxtb	r2, r1
 80006a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	3301      	adds	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbf0      	blt.n	8000696 <_read+0x12>
  }

  return len;
 80006b4:	687b      	ldr	r3, [r7, #4]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b086      	sub	sp, #24
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e009      	b.n	80006e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe15 	bl	8000308 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbf1      	blt.n	80006d0 <_write+0x12>
  }
  return len;
 80006ec:	687b      	ldr	r3, [r7, #4]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_close>:

int _close(int file)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071c:	605a      	str	r2, [r3, #4]
  return 0;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <_isatty>:

int _isatty(int file)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000732:	2301      	movs	r3, #1
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800073e:	b480      	push	{r7}
 8000740:	b085      	sub	sp, #20
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
	...

08000758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <_sbrk+0x5c>)
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <_sbrk+0x60>)
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <_sbrk+0x64>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <_sbrk+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d207      	bcs.n	8000798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000788:	f003 f840 	bl	800380c <__errno>
 800078c:	4603      	mov	r3, r0
 800078e:	220c      	movs	r2, #12
 8000790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	e009      	b.n	80007ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <_sbrk+0x64>)
 80007a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20005000 	.word	0x20005000
 80007b8:	00000400 	.word	0x00000400
 80007bc:	200000b8 	.word	0x200000b8
 80007c0:	20000298 	.word	0x20000298

080007c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART1_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART1_UART_Init+0x4c>)
 8000808:	f002 f876 	bl	80028f8 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f7ff feba 	bl	800058a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000bc 	.word	0x200000bc
 8000820:	40013800 	.word	0x40013800

08000824 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a33      	ldr	r2, [pc, #204]	; (800090c <HAL_UART_MspInit+0xe8>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d15f      	bne.n	8000904 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <HAL_UART_MspInit+0xec>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a31      	ldr	r2, [pc, #196]	; (8000910 <HAL_UART_MspInit+0xec>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <HAL_UART_MspInit+0xec>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <HAL_UART_MspInit+0xec>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <HAL_UART_MspInit+0xec>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <HAL_UART_MspInit+0xec>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000878:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <HAL_UART_MspInit+0xf0>)
 800088a:	f001 f91d 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	481c      	ldr	r0, [pc, #112]	; (8000914 <HAL_UART_MspInit+0xf0>)
 80008a4:	f001 f910 	bl	8001ac8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <HAL_UART_MspInit+0xf8>)
 80008ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008b0:	2210      	movs	r2, #16
 80008b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008d8:	480f      	ldr	r0, [pc, #60]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008da:	f000 fee1 	bl	80016a0 <HAL_DMA_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80008e4:	f7ff fe51 	bl	800058a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_UART_MspInit+0xf4>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2025      	movs	r0, #37	; 0x25
 80008fa:	f000 fe9a 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008fe:	2025      	movs	r0, #37	; 0x25
 8000900:	f000 feb3 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40013800 	.word	0x40013800
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800
 8000918:	20000104 	.word	0x20000104
 800091c:	40020044 	.word	0x40020044

08000920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000920:	f7ff ff50 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000926:	490c      	ldr	r1, [pc, #48]	; (8000958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <LoopFillZerobss+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a09      	ldr	r2, [pc, #36]	; (8000960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800093c:	4c09      	ldr	r4, [pc, #36]	; (8000964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094a:	f002 ff65 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fced 	bl	800032c <main>
  bx lr
 8000952:	4770      	bx	lr
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800095c:	08004480 	.word	0x08004480
  ldr r2, =_sbss
 8000960:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000964:	20000298 	.word	0x20000298

08000968 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <CAN1_RX1_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_Init+0x28>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_Init+0x28>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 fe4d 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	200f      	movs	r0, #15
 8000984:	f000 f808 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000988:	f7ff fe04 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fe65 	bl	8001686 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 fe2d 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x20>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <HAL_IncTick+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000148 	.word	0x20000148

08000a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000148 	.word	0x20000148

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff fff0 	bl	8000a1c <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffe0 	bl	8000a1c <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
  {
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008

08000a78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e0be      	b.n	8000c18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d109      	bne.n	8000abc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fb98 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 fc97 	bl	80013f0 <ADC_ConversionStop_Disable>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8099 	bne.w	8000c06 <HAL_ADC_Init+0x18e>
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8095 	bne.w	8000c06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ae4:	f023 0302 	bic.w	r3, r3, #2
 8000ae8:	f043 0202 	orr.w	r2, r3, #2
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7b1b      	ldrb	r3, [r3, #12]
 8000afe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b10:	d003      	beq.n	8000b1a <HAL_ADC_Init+0xa2>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d102      	bne.n	8000b20 <HAL_ADC_Init+0xa8>
 8000b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1e:	e000      	b.n	8000b22 <HAL_ADC_Init+0xaa>
 8000b20:	2300      	movs	r3, #0
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7d1b      	ldrb	r3, [r3, #20]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d119      	bne.n	8000b64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7b1b      	ldrb	r3, [r3, #12]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d109      	bne.n	8000b4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	035a      	lsls	r2, r3, #13
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	e00b      	b.n	8000b64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	f043 0220 	orr.w	r2, r3, #32
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	f043 0201 	orr.w	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	430a      	orrs	r2, r1
 8000b76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_ADC_Init+0x1a8>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	68b9      	ldr	r1, [r7, #8]
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b94:	d003      	beq.n	8000b9e <HAL_ADC_Init+0x126>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d104      	bne.n	8000ba8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	051b      	lsls	r3, r3, #20
 8000ba6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_ADC_Init+0x1ac>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d10b      	bne.n	8000be4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f023 0303 	bic.w	r3, r3, #3
 8000bda:	f043 0201 	orr.w	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be2:	e018      	b.n	8000c16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f023 0312 	bic.w	r3, r3, #18
 8000bec:	f043 0210 	orr.w	r2, r3, #16
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf8:	f043 0201 	orr.w	r2, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c04:	e007      	b.n	8000c16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f043 0210 	orr.w	r2, r3, #16
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	ffe1f7fd 	.word	0xffe1f7fd
 8000c24:	ff1f0efe 	.word	0xff1f0efe

08000c28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <HAL_ADC_Start+0x1a>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e098      	b.n	8000d74 <HAL_ADC_Start+0x14c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 fb76 	bl	800133c <ADC_Enable>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8087 	bne.w	8000d6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <HAL_ADC_Start+0x154>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d105      	bne.n	8000c86 <HAL_ADC_Start+0x5e>
 8000c7a:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <HAL_ADC_Start+0x158>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d115      	bne.n	8000cb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d026      	beq.n	8000cee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cb0:	e01d      	b.n	8000cee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a2f      	ldr	r2, [pc, #188]	; (8000d80 <HAL_ADC_Start+0x158>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d004      	beq.n	8000cd2 <HAL_ADC_Start+0xaa>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <HAL_ADC_Start+0x154>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10d      	bne.n	8000cee <HAL_ADC_Start+0xc6>
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_ADC_Start+0x158>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ce6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	f023 0206 	bic.w	r2, r3, #6
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d06:	e002      	b.n	8000d0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f06f 0202 	mvn.w	r2, #2
 8000d1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d2e:	d113      	bne.n	8000d58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d34:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_ADC_Start+0x154>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d105      	bne.n	8000d46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_ADC_Start+0x158>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d108      	bne.n	8000d58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	e00c      	b.n	8000d72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	e003      	b.n	8000d72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012800 	.word	0x40012800
 8000d80:	40012400 	.word	0x40012400

08000d84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d9a:	f7ff fe3f 	bl	8000a1c <HAL_GetTick>
 8000d9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00b      	beq.n	8000dc6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f043 0220 	orr.w	r2, r3, #32
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e0d3      	b.n	8000f6e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d131      	bne.n	8000e38 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d12a      	bne.n	8000e38 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000de2:	e021      	b.n	8000e28 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dea:	d01d      	beq.n	8000e28 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <HAL_ADC_PollForConversion+0x7e>
 8000df2:	f7ff fe13 	bl	8000a1c <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d212      	bcs.n	8000e28 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10b      	bne.n	8000e28 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	f043 0204 	orr.w	r2, r3, #4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e0a2      	b.n	8000f6e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0d6      	beq.n	8000de4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e36:	e070      	b.n	8000f1a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e38:	4b4f      	ldr	r3, [pc, #316]	; (8000f78 <HAL_ADC_PollForConversion+0x1f4>)
 8000e3a:	681c      	ldr	r4, [r3, #0]
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f001 fca5 	bl	800278c <HAL_RCCEx_GetPeriphCLKFreq>
 8000e42:	4603      	mov	r3, r0
 8000e44:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6919      	ldr	r1, [r3, #16]
 8000e4e:	4b4b      	ldr	r3, [pc, #300]	; (8000f7c <HAL_ADC_PollForConversion+0x1f8>)
 8000e50:	400b      	ands	r3, r1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d118      	bne.n	8000e88 <HAL_ADC_PollForConversion+0x104>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68d9      	ldr	r1, [r3, #12]
 8000e5c:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <HAL_ADC_PollForConversion+0x1fc>)
 8000e5e:	400b      	ands	r3, r1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d111      	bne.n	8000e88 <HAL_ADC_PollForConversion+0x104>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6919      	ldr	r1, [r3, #16]
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_ADC_PollForConversion+0x200>)
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d108      	bne.n	8000e84 <HAL_ADC_PollForConversion+0x100>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68d9      	ldr	r1, [r3, #12]
 8000e78:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_ADC_PollForConversion+0x204>)
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_ADC_PollForConversion+0x100>
 8000e80:	2314      	movs	r3, #20
 8000e82:	e020      	b.n	8000ec6 <HAL_ADC_PollForConversion+0x142>
 8000e84:	2329      	movs	r3, #41	; 0x29
 8000e86:	e01e      	b.n	8000ec6 <HAL_ADC_PollForConversion+0x142>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6919      	ldr	r1, [r3, #16]
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <HAL_ADC_PollForConversion+0x200>)
 8000e90:	400b      	ands	r3, r1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d106      	bne.n	8000ea4 <HAL_ADC_PollForConversion+0x120>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68d9      	ldr	r1, [r3, #12]
 8000e9c:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <HAL_ADC_PollForConversion+0x204>)
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_ADC_PollForConversion+0x13c>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6919      	ldr	r1, [r3, #16]
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <HAL_ADC_PollForConversion+0x208>)
 8000eac:	400b      	ands	r3, r1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d108      	bne.n	8000ec4 <HAL_ADC_PollForConversion+0x140>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68d9      	ldr	r1, [r3, #12]
 8000eb8:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <HAL_ADC_PollForConversion+0x208>)
 8000eba:	400b      	ands	r3, r1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_ADC_PollForConversion+0x140>
 8000ec0:	2354      	movs	r3, #84	; 0x54
 8000ec2:	e000      	b.n	8000ec6 <HAL_ADC_PollForConversion+0x142>
 8000ec4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ecc:	e021      	b.n	8000f12 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d01a      	beq.n	8000f0c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d007      	beq.n	8000eec <HAL_ADC_PollForConversion+0x168>
 8000edc:	f7ff fd9e 	bl	8000a1c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d20f      	bcs.n	8000f0c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d90b      	bls.n	8000f0c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	f043 0204 	orr.w	r2, r3, #4
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e030      	b.n	8000f6e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d8d9      	bhi.n	8000ece <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f06f 0212 	mvn.w	r2, #18
 8000f22:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f3e:	d115      	bne.n	8000f6c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d111      	bne.n	8000f6c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	24924924 	.word	0x24924924
 8000f80:	00924924 	.word	0x00924924
 8000f84:	12492492 	.word	0x12492492
 8000f88:	00492492 	.word	0x00492492
 8000f8c:	00249249 	.word	0x00249249

08000f90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03e      	beq.n	8001048 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d039      	beq.n	8001048 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d105      	bne.n	8000fec <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ff6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ffa:	d11d      	bne.n	8001038 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001000:	2b00      	cmp	r3, #0
 8001002:	d119      	bne.n	8001038 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0220 	bic.w	r2, r2, #32
 8001012:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d105      	bne.n	8001038 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f874 	bl	8001126 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f06f 0212 	mvn.w	r2, #18
 8001046:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104e:	2b00      	cmp	r3, #0
 8001050:	d04d      	beq.n	80010ee <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d048      	beq.n	80010ee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800107e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001082:	d012      	beq.n	80010aa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800108e:	2b00      	cmp	r3, #0
 8001090:	d125      	bne.n	80010de <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800109c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010a0:	d11d      	bne.n	80010de <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d119      	bne.n	80010de <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f9c7 	bl	8001472 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 020c 	mvn.w	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d012      	beq.n	800111e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00d      	beq.n	800111e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f812 	bl	8001138 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f06f 0201 	mvn.w	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
	...

0800114c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_ADC_ConfigChannel+0x20>
 8001168:	2302      	movs	r3, #2
 800116a:	e0dc      	b.n	8001326 <HAL_ADC_ConfigChannel+0x1da>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b06      	cmp	r3, #6
 800117a:	d81c      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	3b05      	subs	r3, #5
 800118e:	221f      	movs	r2, #31
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b05      	subs	r3, #5
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
 80011b4:	e03c      	b.n	8001230 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	d81c      	bhi.n	80011f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	3b23      	subs	r3, #35	; 0x23
 80011d0:	221f      	movs	r2, #31
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4019      	ands	r1, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3b23      	subs	r3, #35	; 0x23
 80011ea:	fa00 f203 	lsl.w	r2, r0, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
 80011f6:	e01b      	b.n	8001230 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	3b41      	subs	r3, #65	; 0x41
 800120a:	221f      	movs	r2, #31
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	4019      	ands	r1, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3b41      	subs	r3, #65	; 0x41
 8001224:	fa00 f203 	lsl.w	r2, r0, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d91c      	bls.n	8001272 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	3b1e      	subs	r3, #30
 800124a:	2207      	movs	r2, #7
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4019      	ands	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6898      	ldr	r0, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	3b1e      	subs	r3, #30
 8001264:	fa00 f203 	lsl.w	r2, r0, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	e019      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6919      	ldr	r1, [r3, #16]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	2207      	movs	r2, #7
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4019      	ands	r1, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6898      	ldr	r0, [r3, #8]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	fa00 f203 	lsl.w	r2, r0, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d003      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012b2:	2b11      	cmp	r3, #17
 80012b4:	d132      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_ADC_ConfigChannel+0x1e4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d125      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d126      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	d11a      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_ADC_ConfigChannel+0x1e8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_ADC_ConfigChannel+0x1ec>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	0c9a      	lsrs	r2, r3, #18
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012fc:	e002      	b.n	8001304 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3b01      	subs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x1b2>
 800130a:	e007      	b.n	800131c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	f043 0220 	orr.w	r2, r3, #32
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40012400 	.word	0x40012400
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83

0800133c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b01      	cmp	r3, #1
 8001358:	d040      	beq.n	80013dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <ADC_Enable+0xac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <ADC_Enable+0xb0>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	0c9b      	lsrs	r3, r3, #18
 8001376:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001378:	e002      	b.n	8001380 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3b01      	subs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001386:	f7ff fb49 	bl	8000a1c <HAL_GetTick>
 800138a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800138c:	e01f      	b.n	80013ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800138e:	f7ff fb45 	bl	8000a1c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d918      	bls.n	80013ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d011      	beq.n	80013ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f043 0210 	orr.w	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e007      	b.n	80013de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d1d8      	bne.n	800138e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	431bde83 	.word	0x431bde83

080013f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b01      	cmp	r3, #1
 8001408:	d12e      	bne.n	8001468 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0201 	bic.w	r2, r2, #1
 8001418:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800141a:	f7ff faff 	bl	8000a1c <HAL_GetTick>
 800141e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001420:	e01b      	b.n	800145a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001422:	f7ff fafb 	bl	8000a1c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d914      	bls.n	800145a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b01      	cmp	r3, #1
 800143c:	d10d      	bne.n	800145a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	f043 0210 	orr.w	r2, r3, #16
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e007      	b.n	800146a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b01      	cmp	r3, #1
 8001466:	d0dc      	beq.n	8001422 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <__NVIC_EnableIRQ+0x34>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff90 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff2d 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff42 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff35 	bl	80014e8 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e043      	b.n	800173e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_DMA_Init+0xa8>)
 80016be:	4413      	add	r3, r2
 80016c0:	4a22      	ldr	r2, [pc, #136]	; (800174c <HAL_DMA_Init+0xac>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	009a      	lsls	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_DMA_Init+0xb0>)
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	bffdfff8 	.word	0xbffdfff8
 800174c:	cccccccd 	.word	0xcccccccd
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d008      	beq.n	800177e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2204      	movs	r2, #4
 8001770:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e020      	b.n	80017c0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 020e 	bic.w	r2, r2, #14
 800178c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a6:	2101      	movs	r1, #1
 80017a8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d005      	beq.n	80017f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e051      	b.n	8001894 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 020e 	bic.w	r2, r2, #14
 80017fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_DMA_Abort_IT+0xd4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d029      	beq.n	800186e <HAL_DMA_Abort_IT+0xa2>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <HAL_DMA_Abort_IT+0xd8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d022      	beq.n	800186a <HAL_DMA_Abort_IT+0x9e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_DMA_Abort_IT+0xdc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01a      	beq.n	8001864 <HAL_DMA_Abort_IT+0x98>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <HAL_DMA_Abort_IT+0xe0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d012      	beq.n	800185e <HAL_DMA_Abort_IT+0x92>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_DMA_Abort_IT+0xe4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00a      	beq.n	8001858 <HAL_DMA_Abort_IT+0x8c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <HAL_DMA_Abort_IT+0xe8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d102      	bne.n	8001852 <HAL_DMA_Abort_IT+0x86>
 800184c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001850:	e00e      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001852:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001856:	e00b      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185c:	e008      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	e005      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001868:	e002      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800186a:	2310      	movs	r3, #16
 800186c:	e000      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800186e:	2301      	movs	r3, #1
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_DMA_Abort_IT+0xec>)
 8001872:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
    } 
  }
  return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40020008 	.word	0x40020008
 80018a4:	4002001c 	.word	0x4002001c
 80018a8:	40020030 	.word	0x40020030
 80018ac:	40020044 	.word	0x40020044
 80018b0:	40020058 	.word	0x40020058
 80018b4:	4002006c 	.word	0x4002006c
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	2204      	movs	r2, #4
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d04f      	beq.n	8001984 <HAL_DMA_IRQHandler+0xc8>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d04a      	beq.n	8001984 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0204 	bic.w	r2, r2, #4
 800190a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a66      	ldr	r2, [pc, #408]	; (8001aac <HAL_DMA_IRQHandler+0x1f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d029      	beq.n	800196a <HAL_DMA_IRQHandler+0xae>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <HAL_DMA_IRQHandler+0x1f4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d022      	beq.n	8001966 <HAL_DMA_IRQHandler+0xaa>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a63      	ldr	r2, [pc, #396]	; (8001ab4 <HAL_DMA_IRQHandler+0x1f8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01a      	beq.n	8001960 <HAL_DMA_IRQHandler+0xa4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a62      	ldr	r2, [pc, #392]	; (8001ab8 <HAL_DMA_IRQHandler+0x1fc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d012      	beq.n	800195a <HAL_DMA_IRQHandler+0x9e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a60      	ldr	r2, [pc, #384]	; (8001abc <HAL_DMA_IRQHandler+0x200>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00a      	beq.n	8001954 <HAL_DMA_IRQHandler+0x98>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <HAL_DMA_IRQHandler+0x204>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d102      	bne.n	800194e <HAL_DMA_IRQHandler+0x92>
 8001948:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800194c:	e00e      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 800194e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001952:	e00b      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 8001954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001958:	e008      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 800195a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195e:	e005      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 8001960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001964:	e002      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 8001966:	2340      	movs	r3, #64	; 0x40
 8001968:	e000      	b.n	800196c <HAL_DMA_IRQHandler+0xb0>
 800196a:	2304      	movs	r3, #4
 800196c:	4a55      	ldr	r2, [pc, #340]	; (8001ac4 <HAL_DMA_IRQHandler+0x208>)
 800196e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8094 	beq.w	8001aa2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001982:	e08e      	b.n	8001aa2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2202      	movs	r2, #2
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d056      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x186>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d051      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 020a 	bic.w	r2, r2, #10
 80019ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a38      	ldr	r2, [pc, #224]	; (8001aac <HAL_DMA_IRQHandler+0x1f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d029      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x166>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a37      	ldr	r2, [pc, #220]	; (8001ab0 <HAL_DMA_IRQHandler+0x1f4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d022      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x162>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a35      	ldr	r2, [pc, #212]	; (8001ab4 <HAL_DMA_IRQHandler+0x1f8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01a      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x15c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a34      	ldr	r2, [pc, #208]	; (8001ab8 <HAL_DMA_IRQHandler+0x1fc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d012      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x156>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a32      	ldr	r2, [pc, #200]	; (8001abc <HAL_DMA_IRQHandler+0x200>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00a      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x150>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <HAL_DMA_IRQHandler+0x204>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d102      	bne.n	8001a06 <HAL_DMA_IRQHandler+0x14a>
 8001a00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a04:	e00e      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0a:	e00b      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a10:	e008      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a16:	e005      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1c:	e002      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a1e:	2320      	movs	r3, #32
 8001a20:	e000      	b.n	8001a24 <HAL_DMA_IRQHandler+0x168>
 8001a22:	2302      	movs	r3, #2
 8001a24:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_DMA_IRQHandler+0x208>)
 8001a26:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d034      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a40:	e02f      	b.n	8001aa2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2208      	movs	r2, #8
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d028      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x1e8>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d023      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020e 	bic.w	r2, r2, #14
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
    }
  }
  return;
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
}
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40020008 	.word	0x40020008
 8001ab0:	4002001c 	.word	0x4002001c
 8001ab4:	40020030 	.word	0x40020030
 8001ab8:	40020044 	.word	0x40020044
 8001abc:	40020058 	.word	0x40020058
 8001ac0:	4002006c 	.word	0x4002006c
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b08b      	sub	sp, #44	; 0x2c
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	e169      	b.n	8001db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001adc:	2201      	movs	r2, #1
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 8158 	bne.w	8001daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a9a      	ldr	r2, [pc, #616]	; (8001d68 <HAL_GPIO_Init+0x2a0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d05e      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b04:	4a98      	ldr	r2, [pc, #608]	; (8001d68 <HAL_GPIO_Init+0x2a0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d875      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b0a:	4a98      	ldr	r2, [pc, #608]	; (8001d6c <HAL_GPIO_Init+0x2a4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d058      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b10:	4a96      	ldr	r2, [pc, #600]	; (8001d6c <HAL_GPIO_Init+0x2a4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d86f      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b16:	4a96      	ldr	r2, [pc, #600]	; (8001d70 <HAL_GPIO_Init+0x2a8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d052      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b1c:	4a94      	ldr	r2, [pc, #592]	; (8001d70 <HAL_GPIO_Init+0x2a8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d869      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b22:	4a94      	ldr	r2, [pc, #592]	; (8001d74 <HAL_GPIO_Init+0x2ac>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d04c      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b28:	4a92      	ldr	r2, [pc, #584]	; (8001d74 <HAL_GPIO_Init+0x2ac>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d863      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b2e:	4a92      	ldr	r2, [pc, #584]	; (8001d78 <HAL_GPIO_Init+0x2b0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d046      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
 8001b34:	4a90      	ldr	r2, [pc, #576]	; (8001d78 <HAL_GPIO_Init+0x2b0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d85d      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b3a:	2b12      	cmp	r3, #18
 8001b3c:	d82a      	bhi.n	8001b94 <HAL_GPIO_Init+0xcc>
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d859      	bhi.n	8001bf6 <HAL_GPIO_Init+0x12e>
 8001b42:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <HAL_GPIO_Init+0x80>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001bc3 	.word	0x08001bc3
 8001b4c:	08001b9d 	.word	0x08001b9d
 8001b50:	08001baf 	.word	0x08001baf
 8001b54:	08001bf1 	.word	0x08001bf1
 8001b58:	08001bf7 	.word	0x08001bf7
 8001b5c:	08001bf7 	.word	0x08001bf7
 8001b60:	08001bf7 	.word	0x08001bf7
 8001b64:	08001bf7 	.word	0x08001bf7
 8001b68:	08001bf7 	.word	0x08001bf7
 8001b6c:	08001bf7 	.word	0x08001bf7
 8001b70:	08001bf7 	.word	0x08001bf7
 8001b74:	08001bf7 	.word	0x08001bf7
 8001b78:	08001bf7 	.word	0x08001bf7
 8001b7c:	08001bf7 	.word	0x08001bf7
 8001b80:	08001bf7 	.word	0x08001bf7
 8001b84:	08001bf7 	.word	0x08001bf7
 8001b88:	08001bf7 	.word	0x08001bf7
 8001b8c:	08001ba5 	.word	0x08001ba5
 8001b90:	08001bb9 	.word	0x08001bb9
 8001b94:	4a79      	ldr	r2, [pc, #484]	; (8001d7c <HAL_GPIO_Init+0x2b4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9a:	e02c      	b.n	8001bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e029      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e024      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e01f      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	330c      	adds	r3, #12
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e01a      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	623b      	str	r3, [r7, #32]
          break;
 8001bce:	e013      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	611a      	str	r2, [r3, #16]
          break;
 8001be2:	e009      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2308      	movs	r3, #8
 8001be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	615a      	str	r2, [r3, #20]
          break;
 8001bee:	e003      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
          break;
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x130>
          break;
 8001bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2bff      	cmp	r3, #255	; 0xff
 8001bfc:	d801      	bhi.n	8001c02 <HAL_GPIO_Init+0x13a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	e001      	b.n	8001c06 <HAL_GPIO_Init+0x13e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3304      	adds	r3, #4
 8001c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2bff      	cmp	r3, #255	; 0xff
 8001c0c:	d802      	bhi.n	8001c14 <HAL_GPIO_Init+0x14c>
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	e002      	b.n	8001c1a <HAL_GPIO_Init+0x152>
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3b08      	subs	r3, #8
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	210f      	movs	r1, #15
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	6a39      	ldr	r1, [r7, #32]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80b1 	beq.w	8001daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c48:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <HAL_GPIO_Init+0x2b8>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a4c      	ldr	r2, [pc, #304]	; (8001d80 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_GPIO_Init+0x2b8>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c60:	4a48      	ldr	r2, [pc, #288]	; (8001d84 <HAL_GPIO_Init+0x2bc>)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a40      	ldr	r2, [pc, #256]	; (8001d88 <HAL_GPIO_Init+0x2c0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_GPIO_Init+0x1ec>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3f      	ldr	r2, [pc, #252]	; (8001d8c <HAL_GPIO_Init+0x2c4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1e8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3e      	ldr	r2, [pc, #248]	; (8001d90 <HAL_GPIO_Init+0x2c8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1e4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a3d      	ldr	r2, [pc, #244]	; (8001d94 <HAL_GPIO_Init+0x2cc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1e0>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e006      	b.n	8001cb6 <HAL_GPIO_Init+0x1ee>
 8001ca8:	2304      	movs	r3, #4
 8001caa:	e004      	b.n	8001cb6 <HAL_GPIO_Init+0x1ee>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_GPIO_Init+0x1ee>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_GPIO_Init+0x1ee>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cc6:	492f      	ldr	r1, [pc, #188]	; (8001d84 <HAL_GPIO_Init+0x2bc>)
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	492c      	ldr	r1, [pc, #176]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4928      	ldr	r1, [pc, #160]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4922      	ldr	r1, [pc, #136]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	491e      	ldr	r1, [pc, #120]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4918      	ldr	r1, [pc, #96]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4914      	ldr	r1, [pc, #80]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d021      	beq.n	8001d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
 8001d64:	e021      	b.n	8001daa <HAL_GPIO_Init+0x2e2>
 8001d66:	bf00      	nop
 8001d68:	10320000 	.word	0x10320000
 8001d6c:	10310000 	.word	0x10310000
 8001d70:	10220000 	.word	0x10220000
 8001d74:	10210000 	.word	0x10210000
 8001d78:	10120000 	.word	0x10120000
 8001d7c:	10110000 	.word	0x10110000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010000 	.word	0x40010000
 8001d88:	40010800 	.word	0x40010800
 8001d8c:	40010c00 	.word	0x40010c00
 8001d90:	40011000 	.word	0x40011000
 8001d94:	40011400 	.word	0x40011400
 8001d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_GPIO_Init+0x304>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	4909      	ldr	r1, [pc, #36]	; (8001dcc <HAL_GPIO_Init+0x304>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	3301      	adds	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f47f ae8e 	bne.w	8001adc <HAL_GPIO_Init+0x14>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	372c      	adds	r7, #44	; 0x2c
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	40010400 	.word	0x40010400

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e272      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8087 	beq.w	8001f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e20:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d00c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e2c:	4b8f      	ldr	r3, [pc, #572]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d112      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5e>
 8001e38:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d10b      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d06c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x12c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d168      	bne.n	8001f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e24c      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x76>
 8001e68:	4b80      	ldr	r3, [pc, #512]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a7f      	ldr	r2, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e02e      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x98>
 8001e7e:	4b7b      	ldr	r3, [pc, #492]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7a      	ldr	r2, [pc, #488]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b78      	ldr	r3, [pc, #480]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a77      	ldr	r2, [pc, #476]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0xbc>
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a71      	ldr	r2, [pc, #452]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001ebc:	4b6b      	ldr	r3, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe fd9e 	bl	8000a1c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7fe fd9a 	bl	8000a1c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e200      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe4>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fd8a 	bl	8000a1c <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fd86 	bl	8000a1c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1ec      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x10c>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3a:	4b4c      	ldr	r3, [pc, #304]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f46:	4b49      	ldr	r3, [pc, #292]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x18c>
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1c0      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4939      	ldr	r1, [pc, #228]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fd3f 	bl	8000a1c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7fe fd3b 	bl	8000a1c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1a1      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4927      	ldr	r1, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fd1e 	bl	8000a1c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fd1a 	bl	8000a1c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e180      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03a      	beq.n	8002084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d019      	beq.n	800204a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7fe fcfe 	bl	8000a1c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7fe fcfa 	bl	8000a1c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e160      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002042:	2001      	movs	r0, #1
 8002044:	f000 face 	bl	80025e4 <RCC_Delay>
 8002048:	e01c      	b.n	8002084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fce4 	bl	8000a1c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002056:	e00f      	b.n	8002078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7fe fce0 	bl	8000a1c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d908      	bls.n	8002078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e146      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	42420000 	.word	0x42420000
 8002074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e9      	bne.n	8002058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a6 	beq.w	80021de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b8b      	ldr	r3, [pc, #556]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10d      	bne.n	80020be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a87      	ldr	r2, [pc, #540]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <HAL_RCC_OscConfig+0x4c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b7f      	ldr	r3, [pc, #508]	; (80022c8 <HAL_RCC_OscConfig+0x4c8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7e      	ldr	r2, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x4c8>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe fca1 	bl	8000a1c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7fe fc9d 	bl	8000a1c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b64      	cmp	r3, #100	; 0x64
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e103      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b75      	ldr	r3, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x4c8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x312>
 8002104:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a6e      	ldr	r2, [pc, #440]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e02d      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x334>
 800211a:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a69      	ldr	r2, [pc, #420]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a66      	ldr	r2, [pc, #408]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	e01c      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d10c      	bne.n	8002156 <HAL_RCC_OscConfig+0x356>
 800213c:	4b61      	ldr	r3, [pc, #388]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a60      	ldr	r2, [pc, #384]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a5d      	ldr	r2, [pc, #372]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	e00b      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a5a      	ldr	r2, [pc, #360]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d015      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7fe fc51 	bl	8000a1c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fc4d 	bl	8000a1c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0b1      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ee      	beq.n	800217e <HAL_RCC_OscConfig+0x37e>
 80021a0:	e014      	b.n	80021cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fc3b 	bl	8000a1c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7fe fc37 	bl	8000a1c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e09b      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	4b40      	ldr	r3, [pc, #256]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ee      	bne.n	80021aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a3b      	ldr	r2, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8087 	beq.w	80022f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e8:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d061      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d146      	bne.n	800228a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	4b33      	ldr	r3, [pc, #204]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7fe fc0b 	bl	8000a1c <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe fc07 	bl	8000a1c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e06d      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d108      	bne.n	8002244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4921      	ldr	r1, [pc, #132]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a19      	ldr	r1, [r3, #32]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	430b      	orrs	r3, r1
 8002256:	491b      	ldr	r1, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe fbdb 	bl	8000a1c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe fbd7 	bl	8000a1c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e03d      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x46a>
 8002288:	e035      	b.n	80022f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fbc4 	bl	8000a1c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe fbc0 	bl	8000a1c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e026      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x498>
 80022b6:	e01e      	b.n	80022f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e019      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
 80022cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_OscConfig+0x500>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000

08002304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0d0      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d910      	bls.n	8002348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 0207 	bic.w	r2, r3, #7
 800232e:	4965      	ldr	r1, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800236a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d040      	beq.n	8002424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d115      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e073      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06b      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4936      	ldr	r1, [pc, #216]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f4:	f7fe fb12 	bl	8000a1c <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fb0e 	bl	8000a1c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e053      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d210      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0207 	bic.w	r2, r3, #7
 800243a:	4922      	ldr	r1, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	490a      	ldr	r1, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1cc>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1d0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fa70 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	08004404 	.word	0x08004404
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_GetSysClockFreq+0x94>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d002      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x30>
 8002502:	2b08      	cmp	r3, #8
 8002504:	d003      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x36>
 8002506:	e027      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	613b      	str	r3, [r7, #16]
      break;
 800250c:	e027      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0c9b      	lsrs	r3, r3, #18
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_GetSysClockFreq+0x94>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0c5b      	lsrs	r3, r3, #17
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_RCC_GetSysClockFreq+0x98>)
 800253a:	fb03 f202 	mul.w	r2, r3, r2
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e004      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <HAL_RCC_GetSysClockFreq+0xa4>)
 800254c:	fb02 f303 	mul.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	613b      	str	r3, [r7, #16]
      break;
 8002556:	e002      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetSysClockFreq+0x98>)
 800255a:	613b      	str	r3, [r7, #16]
      break;
 800255c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255e:	693b      	ldr	r3, [r7, #16]
}
 8002560:	4618      	mov	r0, r3
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	007a1200 	.word	0x007a1200
 8002574:	0800441c 	.word	0x0800441c
 8002578:	0800442c 	.word	0x0800442c
 800257c:	003d0900 	.word	0x003d0900

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_RCC_GetHCLKFreq+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002598:	f7ff fff2 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08004414 	.word	0x08004414

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c0:	f7ff ffde 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	0adb      	lsrs	r3, r3, #11
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08004414 	.word	0x08004414

080025e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <RCC_Delay+0x34>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <RCC_Delay+0x38>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	0a5b      	lsrs	r3, r3, #9
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002600:	bf00      	nop
  }
  while (Delay --);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	60fa      	str	r2, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f9      	bne.n	8002600 <RCC_Delay+0x1c>
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	20000000 	.word	0x20000000
 800261c:	10624dd3 	.word	0x10624dd3

08002620 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d07d      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10d      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	4a4b      	ldr	r2, [pc, #300]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002656:	61d3      	str	r3, [r2, #28]
 8002658:	4b49      	ldr	r3, [pc, #292]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d118      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a42      	ldr	r2, [pc, #264]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800267a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002680:	f7fe f9cc 	bl	8000a1c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	e008      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002688:	f7fe f9c8 	bl	8000a1c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e06d      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d02e      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d027      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026c4:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ce:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026da:	4a29      	ldr	r2, [pc, #164]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d014      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe f997 	bl	8000a1c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe f993 	bl	8000a1c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e036      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ee      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4917      	ldr	r1, [pc, #92]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002722:	4313      	orrs	r3, r2
 8002724:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002736:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	490b      	ldr	r1, [pc, #44]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4904      	ldr	r1, [pc, #16]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	42420440 	.word	0x42420440

0800278c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	f200 808a 	bhi.w	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d045      	beq.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d075      	beq.n	80028ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80027c2:	e082      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80027c4:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027ca:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d07b      	beq.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	4a41      	ldr	r2, [pc, #260]	; (80028e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d015      	beq.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ee:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0c5b      	lsrs	r3, r3, #17
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	4a3b      	ldr	r2, [pc, #236]	; (80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002808:	4a38      	ldr	r2, [pc, #224]	; (80028ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	e004      	b.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4a34      	ldr	r2, [pc, #208]	; (80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002824:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d102      	bne.n	8002838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	61bb      	str	r3, [r7, #24]
      break;
 8002836:	e04a      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
      break;
 8002846:	e042      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002858:	d108      	bne.n	800286c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e01f      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002876:	d109      	bne.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002884:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e00f      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002896:	d11c      	bne.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80028a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80028a8:	61bb      	str	r3, [r7, #24]
      break;
 80028aa:	e012      	b.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80028ac:	e011      	b.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80028ae:	f7ff fe85 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0b9b      	lsrs	r3, r3, #14
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	61bb      	str	r3, [r7, #24]
      break;
 80028c8:	e004      	b.n	80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028ca:	bf00      	nop
 80028cc:	e002      	b.n	80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028d2:	bf00      	nop
    }
  }
  return (frequency);
 80028d4:	69bb      	ldr	r3, [r7, #24]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3720      	adds	r7, #32
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	08004430 	.word	0x08004430
 80028e8:	08004440 	.word	0x08004440
 80028ec:	007a1200 	.word	0x007a1200
 80028f0:	003d0900 	.word	0x003d0900
 80028f4:	aaaaaaab 	.word	0xaaaaaaab

080028f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e042      	b.n	8002990 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd ff80 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fd71 	bl	8003424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d16d      	bne.n	8002a94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_UART_Transmit+0x2c>
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e066      	b.n	8002a96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2221      	movs	r2, #33	; 0x21
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029d6:	f7fe f821 	bl	8000a1c <HAL_GetTick>
 80029da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	88fa      	ldrh	r2, [r7, #6]
 80029e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f0:	d108      	bne.n	8002a04 <HAL_UART_Transmit+0x6c>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e003      	b.n	8002a0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a0c:	e02a      	b.n	8002a64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 faf9 	bl	8003010 <UART_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e036      	b.n	8002a96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	3302      	adds	r3, #2
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	e007      	b.n	8002a56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	3301      	adds	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1cf      	bne.n	8002a0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2140      	movs	r1, #64	; 0x40
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fac9 	bl	8003010 <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0ba      	sub	sp, #232	; 0xe8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_UART_IRQHandler+0x66>
 8002af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fbd1 	bl	80032a6 <UART_Receive_IT>
      return;
 8002b04:	e25b      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80de 	beq.w	8002ccc <HAL_UART_IRQHandler+0x22c>
 8002b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80d1 	beq.w	8002ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_UART_IRQHandler+0xae>
 8002b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_UART_IRQHandler+0xd2>
 8002b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0202 	orr.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_UART_IRQHandler+0xf6>
 8002b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f043 0204 	orr.w	r2, r3, #4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d011      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x126>
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f043 0208 	orr.w	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 81f2 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_UART_IRQHandler+0x14e>
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fb5c 	bl	80032a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <HAL_UART_IRQHandler+0x17a>
 8002c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d04f      	beq.n	8002cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fa66 	bl	80030ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d041      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3314      	adds	r3, #20
 8002c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3314      	adds	r3, #20
 8002c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1d9      	bne.n	8002c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d013      	beq.n	8002caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	4a7e      	ldr	r2, [pc, #504]	; (8002e80 <HAL_UART_IRQHandler+0x3e0>)
 8002c88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fd9c 	bl	80017cc <HAL_DMA_Abort_IT>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d016      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	e00e      	b.n	8002cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f99c 	bl	8002fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e00a      	b.n	8002cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f998 	bl	8002fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e006      	b.n	8002cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f994 	bl	8002fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002cc6:	e175      	b.n	8002fb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	bf00      	nop
    return;
 8002cca:	e173      	b.n	8002fb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	f040 814f 	bne.w	8002f74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8148 	beq.w	8002f74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8141 	beq.w	8002f74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80b6 	beq.w	8002e84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8145 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d36:	429a      	cmp	r2, r3
 8002d38:	f080 813e 	bcs.w	8002fb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	f000 8088 	beq.w	8002e60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d8c:	e841 2300 	strex	r3, r2, [r1]
 8002d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1d9      	bne.n	8002d50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e1      	bne.n	8002d9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e04:	e841 2300 	strex	r3, r2, [r1]
 8002e08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e3      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e30:	f023 0310 	bic.w	r3, r3, #16
 8002e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e42:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e3      	bne.n	8002e1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fc7a 	bl	8001754 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4619      	mov	r1, r3
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8bf 	bl	8002ffa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e7c:	e09c      	b.n	8002fb8 <HAL_UART_IRQHandler+0x518>
 8002e7e:	bf00      	nop
 8002e80:	080031b1 	.word	0x080031b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 808e 	beq.w	8002fbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8089 	beq.w	8002fbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ece:	647a      	str	r2, [r7, #68]	; 0x44
 8002ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e3      	bne.n	8002eaa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3314      	adds	r3, #20
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f06:	633a      	str	r2, [r7, #48]	; 0x30
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e3      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f4c:	61fa      	str	r2, [r7, #28]
 8002f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	69b9      	ldr	r1, [r7, #24]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	617b      	str	r3, [r7, #20]
   return(result);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e3      	bne.n	8002f28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f844 	bl	8002ffa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f72:	e023      	b.n	8002fbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_UART_IRQHandler+0x4f4>
 8002f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f923 	bl	80031d8 <UART_Transmit_IT>
    return;
 8002f92:	e014      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <HAL_UART_IRQHandler+0x51e>
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f962 	bl	8003276 <UART_EndTransmit_IT>
    return;
 8002fb2:	e004      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
    return;
 8002fb4:	bf00      	nop
 8002fb6:	e002      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002fb8:	bf00      	nop
 8002fba:	e000      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002fbc:	bf00      	nop
  }
}
 8002fbe:	37e8      	adds	r7, #232	; 0xe8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b090      	sub	sp, #64	; 0x40
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003020:	e050      	b.n	80030c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d04c      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800302a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <UART_WaitOnFlagUntilTimeout+0x30>
 8003030:	f7fd fcf4 	bl	8000a1c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800303c:	429a      	cmp	r2, r3
 800303e:	d241      	bcs.n	80030c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003060:	637a      	str	r2, [r7, #52]	; 0x34
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	613b      	str	r3, [r7, #16]
   return(result);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	63bb      	str	r3, [r7, #56]	; 0x38
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3314      	adds	r3, #20
 8003092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003094:	623a      	str	r2, [r7, #32]
 8003096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	69f9      	ldr	r1, [r7, #28]
 800309a:	6a3a      	ldr	r2, [r7, #32]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e00f      	b.n	80030e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d09f      	beq.n	8003022 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3740      	adds	r7, #64	; 0x40
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b095      	sub	sp, #84	; 0x54
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003114:	643a      	str	r2, [r7, #64]	; 0x40
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800311a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e5      	bne.n	80030f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	61fb      	str	r3, [r7, #28]
   return(result);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003148:	62fa      	str	r2, [r7, #44]	; 0x2c
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e5      	bne.n	8003128 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	2b01      	cmp	r3, #1
 8003162:	d119      	bne.n	8003198 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	60bb      	str	r3, [r7, #8]
   return(result);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f023 0310 	bic.w	r3, r3, #16
 800317a:	647b      	str	r3, [r7, #68]	; 0x44
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003184:	61ba      	str	r2, [r7, #24]
 8003186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	6979      	ldr	r1, [r7, #20]
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	613b      	str	r3, [r7, #16]
   return(result);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e5      	bne.n	8003164 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031a6:	bf00      	nop
 80031a8:	3754      	adds	r7, #84	; 0x54
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff ff0c 	bl	8002fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b21      	cmp	r3, #33	; 0x21
 80031ea:	d13e      	bne.n	800326a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f4:	d114      	bne.n	8003220 <UART_Transmit_IT+0x48>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d110      	bne.n	8003220 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003212:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	1c9a      	adds	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]
 800321e:	e008      	b.n	8003232 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	1c59      	adds	r1, r3, #1
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6211      	str	r1, [r2, #32]
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4619      	mov	r1, r3
 8003240:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003264:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fe94 	bl	8002fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b08c      	sub	sp, #48	; 0x30
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b22      	cmp	r3, #34	; 0x22
 80032b8:	f040 80ae 	bne.w	8003418 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c4:	d117      	bne.n	80032f6 <UART_Receive_IT+0x50>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d113      	bne.n	80032f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	1c9a      	adds	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
 80032f4:	e026      	b.n	8003344 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003308:	d007      	beq.n	800331a <UART_Receive_IT+0x74>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <UART_Receive_IT+0x82>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e008      	b.n	800333a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003334:	b2da      	uxtb	r2, r3
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29b      	uxth	r3, r3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4619      	mov	r1, r3
 8003352:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003354:	2b00      	cmp	r3, #0
 8003356:	d15d      	bne.n	8003414 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0220 	bic.w	r2, r2, #32
 8003366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003376:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	2b01      	cmp	r3, #1
 800339c:	d135      	bne.n	800340a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	330c      	adds	r3, #12
 80033aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	613b      	str	r3, [r7, #16]
   return(result);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f023 0310 	bic.w	r3, r3, #16
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	623a      	str	r2, [r7, #32]
 80033c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	69f9      	ldr	r1, [r7, #28]
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e5      	bne.n	80033a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d10a      	bne.n	80033fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fdf9 	bl	8002ffa <HAL_UARTEx_RxEventCallback>
 8003408:	e002      	b.n	8003410 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fde3 	bl	8002fd6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e002      	b.n	800341a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800345e:	f023 030c 	bic.w	r3, r3, #12
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	430b      	orrs	r3, r1
 800346a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <UART_SetConfig+0x114>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d103      	bne.n	8003494 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7ff f896 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	e002      	b.n	800349a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003494:	f7ff f87e 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003498:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <UART_SetConfig+0x118>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	0119      	lsls	r1, r3, #4
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009a      	lsls	r2, r3, #2
 80034c4:	441a      	add	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <UART_SetConfig+0x118>)
 80034d2:	fba3 0302 	umull	r0, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2064      	movs	r0, #100	; 0x64
 80034da:	fb00 f303 	mul.w	r3, r0, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	3332      	adds	r3, #50	; 0x32
 80034e4:	4a15      	ldr	r2, [pc, #84]	; (800353c <UART_SetConfig+0x118>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f0:	4419      	add	r1, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009a      	lsls	r2, r3, #2
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fbb2 f2f3 	udiv	r2, r2, r3
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <UART_SetConfig+0x118>)
 800350a:	fba3 0302 	umull	r0, r3, r3, r2
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2064      	movs	r0, #100	; 0x64
 8003512:	fb00 f303 	mul.w	r3, r0, r3
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	3332      	adds	r3, #50	; 0x32
 800351c:	4a07      	ldr	r2, [pc, #28]	; (800353c <UART_SetConfig+0x118>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	440a      	add	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40013800 	.word	0x40013800
 800353c:	51eb851f 	.word	0x51eb851f

08003540 <std>:
 8003540:	2300      	movs	r3, #0
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	e9c0 3300 	strd	r3, r3, [r0]
 800354a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800354e:	6083      	str	r3, [r0, #8]
 8003550:	8181      	strh	r1, [r0, #12]
 8003552:	6643      	str	r3, [r0, #100]	; 0x64
 8003554:	81c2      	strh	r2, [r0, #14]
 8003556:	6183      	str	r3, [r0, #24]
 8003558:	4619      	mov	r1, r3
 800355a:	2208      	movs	r2, #8
 800355c:	305c      	adds	r0, #92	; 0x5c
 800355e:	f000 f906 	bl	800376e <memset>
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <std+0x58>)
 8003564:	6224      	str	r4, [r4, #32]
 8003566:	6263      	str	r3, [r4, #36]	; 0x24
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <std+0x5c>)
 800356a:	62a3      	str	r3, [r4, #40]	; 0x28
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <std+0x60>)
 800356e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <std+0x64>)
 8003572:	6323      	str	r3, [r4, #48]	; 0x30
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <std+0x68>)
 8003576:	429c      	cmp	r4, r3
 8003578:	d006      	beq.n	8003588 <std+0x48>
 800357a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800357e:	4294      	cmp	r4, r2
 8003580:	d002      	beq.n	8003588 <std+0x48>
 8003582:	33d0      	adds	r3, #208	; 0xd0
 8003584:	429c      	cmp	r4, r3
 8003586:	d105      	bne.n	8003594 <std+0x54>
 8003588:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800358c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003590:	f000 b966 	b.w	8003860 <__retarget_lock_init_recursive>
 8003594:	bd10      	pop	{r4, pc}
 8003596:	bf00      	nop
 8003598:	080036e9 	.word	0x080036e9
 800359c:	0800370b 	.word	0x0800370b
 80035a0:	08003743 	.word	0x08003743
 80035a4:	08003767 	.word	0x08003767
 80035a8:	2000014c 	.word	0x2000014c

080035ac <stdio_exit_handler>:
 80035ac:	4a02      	ldr	r2, [pc, #8]	; (80035b8 <stdio_exit_handler+0xc>)
 80035ae:	4903      	ldr	r1, [pc, #12]	; (80035bc <stdio_exit_handler+0x10>)
 80035b0:	4803      	ldr	r0, [pc, #12]	; (80035c0 <stdio_exit_handler+0x14>)
 80035b2:	f000 b869 	b.w	8003688 <_fwalk_sglue>
 80035b6:	bf00      	nop
 80035b8:	2000000c 	.word	0x2000000c
 80035bc:	08004101 	.word	0x08004101
 80035c0:	20000018 	.word	0x20000018

080035c4 <cleanup_stdio>:
 80035c4:	6841      	ldr	r1, [r0, #4]
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <cleanup_stdio+0x34>)
 80035c8:	b510      	push	{r4, lr}
 80035ca:	4299      	cmp	r1, r3
 80035cc:	4604      	mov	r4, r0
 80035ce:	d001      	beq.n	80035d4 <cleanup_stdio+0x10>
 80035d0:	f000 fd96 	bl	8004100 <_fflush_r>
 80035d4:	68a1      	ldr	r1, [r4, #8]
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <cleanup_stdio+0x38>)
 80035d8:	4299      	cmp	r1, r3
 80035da:	d002      	beq.n	80035e2 <cleanup_stdio+0x1e>
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 fd8f 	bl	8004100 <_fflush_r>
 80035e2:	68e1      	ldr	r1, [r4, #12]
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <cleanup_stdio+0x3c>)
 80035e6:	4299      	cmp	r1, r3
 80035e8:	d004      	beq.n	80035f4 <cleanup_stdio+0x30>
 80035ea:	4620      	mov	r0, r4
 80035ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f0:	f000 bd86 	b.w	8004100 <_fflush_r>
 80035f4:	bd10      	pop	{r4, pc}
 80035f6:	bf00      	nop
 80035f8:	2000014c 	.word	0x2000014c
 80035fc:	200001b4 	.word	0x200001b4
 8003600:	2000021c 	.word	0x2000021c

08003604 <global_stdio_init.part.0>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <global_stdio_init.part.0+0x30>)
 8003608:	4c0b      	ldr	r4, [pc, #44]	; (8003638 <global_stdio_init.part.0+0x34>)
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <global_stdio_init.part.0+0x38>)
 800360c:	4620      	mov	r0, r4
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	2104      	movs	r1, #4
 8003612:	2200      	movs	r2, #0
 8003614:	f7ff ff94 	bl	8003540 <std>
 8003618:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800361c:	2201      	movs	r2, #1
 800361e:	2109      	movs	r1, #9
 8003620:	f7ff ff8e 	bl	8003540 <std>
 8003624:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003628:	2202      	movs	r2, #2
 800362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800362e:	2112      	movs	r1, #18
 8003630:	f7ff bf86 	b.w	8003540 <std>
 8003634:	20000284 	.word	0x20000284
 8003638:	2000014c 	.word	0x2000014c
 800363c:	080035ad 	.word	0x080035ad

08003640 <__sfp_lock_acquire>:
 8003640:	4801      	ldr	r0, [pc, #4]	; (8003648 <__sfp_lock_acquire+0x8>)
 8003642:	f000 b90e 	b.w	8003862 <__retarget_lock_acquire_recursive>
 8003646:	bf00      	nop
 8003648:	2000028d 	.word	0x2000028d

0800364c <__sfp_lock_release>:
 800364c:	4801      	ldr	r0, [pc, #4]	; (8003654 <__sfp_lock_release+0x8>)
 800364e:	f000 b909 	b.w	8003864 <__retarget_lock_release_recursive>
 8003652:	bf00      	nop
 8003654:	2000028d 	.word	0x2000028d

08003658 <__sinit>:
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
 800365c:	f7ff fff0 	bl	8003640 <__sfp_lock_acquire>
 8003660:	6a23      	ldr	r3, [r4, #32]
 8003662:	b11b      	cbz	r3, 800366c <__sinit+0x14>
 8003664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003668:	f7ff bff0 	b.w	800364c <__sfp_lock_release>
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <__sinit+0x28>)
 800366e:	6223      	str	r3, [r4, #32]
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <__sinit+0x2c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f5      	bne.n	8003664 <__sinit+0xc>
 8003678:	f7ff ffc4 	bl	8003604 <global_stdio_init.part.0>
 800367c:	e7f2      	b.n	8003664 <__sinit+0xc>
 800367e:	bf00      	nop
 8003680:	080035c5 	.word	0x080035c5
 8003684:	20000284 	.word	0x20000284

08003688 <_fwalk_sglue>:
 8003688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800368c:	4607      	mov	r7, r0
 800368e:	4688      	mov	r8, r1
 8003690:	4614      	mov	r4, r2
 8003692:	2600      	movs	r6, #0
 8003694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003698:	f1b9 0901 	subs.w	r9, r9, #1
 800369c:	d505      	bpl.n	80036aa <_fwalk_sglue+0x22>
 800369e:	6824      	ldr	r4, [r4, #0]
 80036a0:	2c00      	cmp	r4, #0
 80036a2:	d1f7      	bne.n	8003694 <_fwalk_sglue+0xc>
 80036a4:	4630      	mov	r0, r6
 80036a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036aa:	89ab      	ldrh	r3, [r5, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d907      	bls.n	80036c0 <_fwalk_sglue+0x38>
 80036b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036b4:	3301      	adds	r3, #1
 80036b6:	d003      	beq.n	80036c0 <_fwalk_sglue+0x38>
 80036b8:	4629      	mov	r1, r5
 80036ba:	4638      	mov	r0, r7
 80036bc:	47c0      	blx	r8
 80036be:	4306      	orrs	r6, r0
 80036c0:	3568      	adds	r5, #104	; 0x68
 80036c2:	e7e9      	b.n	8003698 <_fwalk_sglue+0x10>

080036c4 <iprintf>:
 80036c4:	b40f      	push	{r0, r1, r2, r3}
 80036c6:	b507      	push	{r0, r1, r2, lr}
 80036c8:	4906      	ldr	r1, [pc, #24]	; (80036e4 <iprintf+0x20>)
 80036ca:	ab04      	add	r3, sp, #16
 80036cc:	6808      	ldr	r0, [r1, #0]
 80036ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80036d2:	6881      	ldr	r1, [r0, #8]
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	f000 f9e3 	bl	8003aa0 <_vfiprintf_r>
 80036da:	b003      	add	sp, #12
 80036dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e0:	b004      	add	sp, #16
 80036e2:	4770      	bx	lr
 80036e4:	20000064 	.word	0x20000064

080036e8 <__sread>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	460c      	mov	r4, r1
 80036ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f0:	f000 f868 	bl	80037c4 <_read_r>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	bfab      	itete	ge
 80036f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036fa:	89a3      	ldrhlt	r3, [r4, #12]
 80036fc:	181b      	addge	r3, r3, r0
 80036fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003702:	bfac      	ite	ge
 8003704:	6563      	strge	r3, [r4, #84]	; 0x54
 8003706:	81a3      	strhlt	r3, [r4, #12]
 8003708:	bd10      	pop	{r4, pc}

0800370a <__swrite>:
 800370a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370e:	461f      	mov	r7, r3
 8003710:	898b      	ldrh	r3, [r1, #12]
 8003712:	4605      	mov	r5, r0
 8003714:	05db      	lsls	r3, r3, #23
 8003716:	460c      	mov	r4, r1
 8003718:	4616      	mov	r6, r2
 800371a:	d505      	bpl.n	8003728 <__swrite+0x1e>
 800371c:	2302      	movs	r3, #2
 800371e:	2200      	movs	r2, #0
 8003720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003724:	f000 f83c 	bl	80037a0 <_lseek_r>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	4632      	mov	r2, r6
 800372c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003730:	81a3      	strh	r3, [r4, #12]
 8003732:	4628      	mov	r0, r5
 8003734:	463b      	mov	r3, r7
 8003736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800373a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800373e:	f000 b853 	b.w	80037e8 <_write_r>

08003742 <__sseek>:
 8003742:	b510      	push	{r4, lr}
 8003744:	460c      	mov	r4, r1
 8003746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374a:	f000 f829 	bl	80037a0 <_lseek_r>
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	bf15      	itete	ne
 8003754:	6560      	strne	r0, [r4, #84]	; 0x54
 8003756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800375a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800375e:	81a3      	strheq	r3, [r4, #12]
 8003760:	bf18      	it	ne
 8003762:	81a3      	strhne	r3, [r4, #12]
 8003764:	bd10      	pop	{r4, pc}

08003766 <__sclose>:
 8003766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376a:	f000 b809 	b.w	8003780 <_close_r>

0800376e <memset>:
 800376e:	4603      	mov	r3, r0
 8003770:	4402      	add	r2, r0
 8003772:	4293      	cmp	r3, r2
 8003774:	d100      	bne.n	8003778 <memset+0xa>
 8003776:	4770      	bx	lr
 8003778:	f803 1b01 	strb.w	r1, [r3], #1
 800377c:	e7f9      	b.n	8003772 <memset+0x4>
	...

08003780 <_close_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	2300      	movs	r3, #0
 8003784:	4d05      	ldr	r5, [pc, #20]	; (800379c <_close_r+0x1c>)
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fc ffb3 	bl	80006f6 <_close>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_close_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_close_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	20000288 	.word	0x20000288

080037a0 <_lseek_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4604      	mov	r4, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	4611      	mov	r1, r2
 80037a8:	2200      	movs	r2, #0
 80037aa:	4d05      	ldr	r5, [pc, #20]	; (80037c0 <_lseek_r+0x20>)
 80037ac:	602a      	str	r2, [r5, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f7fc ffc5 	bl	800073e <_lseek>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d102      	bne.n	80037be <_lseek_r+0x1e>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	b103      	cbz	r3, 80037be <_lseek_r+0x1e>
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	bd38      	pop	{r3, r4, r5, pc}
 80037c0:	20000288 	.word	0x20000288

080037c4 <_read_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4604      	mov	r4, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	2200      	movs	r2, #0
 80037ce:	4d05      	ldr	r5, [pc, #20]	; (80037e4 <_read_r+0x20>)
 80037d0:	602a      	str	r2, [r5, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f7fc ff56 	bl	8000684 <_read>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_read_r+0x1e>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_read_r+0x1e>
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	20000288 	.word	0x20000288

080037e8 <_write_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	2200      	movs	r2, #0
 80037f2:	4d05      	ldr	r5, [pc, #20]	; (8003808 <_write_r+0x20>)
 80037f4:	602a      	str	r2, [r5, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f7fc ff61 	bl	80006be <_write>
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	d102      	bne.n	8003806 <_write_r+0x1e>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	b103      	cbz	r3, 8003806 <_write_r+0x1e>
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	bd38      	pop	{r3, r4, r5, pc}
 8003808:	20000288 	.word	0x20000288

0800380c <__errno>:
 800380c:	4b01      	ldr	r3, [pc, #4]	; (8003814 <__errno+0x8>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000064 	.word	0x20000064

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	2600      	movs	r6, #0
 800381c:	4d0c      	ldr	r5, [pc, #48]	; (8003850 <__libc_init_array+0x38>)
 800381e:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 8003820:	1b64      	subs	r4, r4, r5
 8003822:	10a4      	asrs	r4, r4, #2
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	f000 fdca 	bl	80043c0 <_init>
 800382c:	2600      	movs	r6, #0
 800382e:	4d0a      	ldr	r5, [pc, #40]	; (8003858 <__libc_init_array+0x40>)
 8003830:	4c0a      	ldr	r4, [pc, #40]	; (800385c <__libc_init_array+0x44>)
 8003832:	1b64      	subs	r4, r4, r5
 8003834:	10a4      	asrs	r4, r4, #2
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	08004478 	.word	0x08004478
 8003854:	08004478 	.word	0x08004478
 8003858:	08004478 	.word	0x08004478
 800385c:	0800447c 	.word	0x0800447c

08003860 <__retarget_lock_init_recursive>:
 8003860:	4770      	bx	lr

08003862 <__retarget_lock_acquire_recursive>:
 8003862:	4770      	bx	lr

08003864 <__retarget_lock_release_recursive>:
 8003864:	4770      	bx	lr
	...

08003868 <_free_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4605      	mov	r5, r0
 800386c:	2900      	cmp	r1, #0
 800386e:	d040      	beq.n	80038f2 <_free_r+0x8a>
 8003870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003874:	1f0c      	subs	r4, r1, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfb8      	it	lt
 800387a:	18e4      	addlt	r4, r4, r3
 800387c:	f000 f8dc 	bl	8003a38 <__malloc_lock>
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <_free_r+0x8c>)
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	b933      	cbnz	r3, 8003894 <_free_r+0x2c>
 8003886:	6063      	str	r3, [r4, #4]
 8003888:	6014      	str	r4, [r2, #0]
 800388a:	4628      	mov	r0, r5
 800388c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003890:	f000 b8d8 	b.w	8003a44 <__malloc_unlock>
 8003894:	42a3      	cmp	r3, r4
 8003896:	d908      	bls.n	80038aa <_free_r+0x42>
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	1821      	adds	r1, r4, r0
 800389c:	428b      	cmp	r3, r1
 800389e:	bf01      	itttt	eq
 80038a0:	6819      	ldreq	r1, [r3, #0]
 80038a2:	685b      	ldreq	r3, [r3, #4]
 80038a4:	1809      	addeq	r1, r1, r0
 80038a6:	6021      	streq	r1, [r4, #0]
 80038a8:	e7ed      	b.n	8003886 <_free_r+0x1e>
 80038aa:	461a      	mov	r2, r3
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	b10b      	cbz	r3, 80038b4 <_free_r+0x4c>
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	d9fa      	bls.n	80038aa <_free_r+0x42>
 80038b4:	6811      	ldr	r1, [r2, #0]
 80038b6:	1850      	adds	r0, r2, r1
 80038b8:	42a0      	cmp	r0, r4
 80038ba:	d10b      	bne.n	80038d4 <_free_r+0x6c>
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	4401      	add	r1, r0
 80038c0:	1850      	adds	r0, r2, r1
 80038c2:	4283      	cmp	r3, r0
 80038c4:	6011      	str	r1, [r2, #0]
 80038c6:	d1e0      	bne.n	800388a <_free_r+0x22>
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4408      	add	r0, r1
 80038ce:	6010      	str	r0, [r2, #0]
 80038d0:	6053      	str	r3, [r2, #4]
 80038d2:	e7da      	b.n	800388a <_free_r+0x22>
 80038d4:	d902      	bls.n	80038dc <_free_r+0x74>
 80038d6:	230c      	movs	r3, #12
 80038d8:	602b      	str	r3, [r5, #0]
 80038da:	e7d6      	b.n	800388a <_free_r+0x22>
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	1821      	adds	r1, r4, r0
 80038e0:	428b      	cmp	r3, r1
 80038e2:	bf01      	itttt	eq
 80038e4:	6819      	ldreq	r1, [r3, #0]
 80038e6:	685b      	ldreq	r3, [r3, #4]
 80038e8:	1809      	addeq	r1, r1, r0
 80038ea:	6021      	streq	r1, [r4, #0]
 80038ec:	6063      	str	r3, [r4, #4]
 80038ee:	6054      	str	r4, [r2, #4]
 80038f0:	e7cb      	b.n	800388a <_free_r+0x22>
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
 80038f4:	20000290 	.word	0x20000290

080038f8 <sbrk_aligned>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4e0e      	ldr	r6, [pc, #56]	; (8003934 <sbrk_aligned+0x3c>)
 80038fc:	460c      	mov	r4, r1
 80038fe:	6831      	ldr	r1, [r6, #0]
 8003900:	4605      	mov	r5, r0
 8003902:	b911      	cbnz	r1, 800390a <sbrk_aligned+0x12>
 8003904:	f000 fcba 	bl	800427c <_sbrk_r>
 8003908:	6030      	str	r0, [r6, #0]
 800390a:	4621      	mov	r1, r4
 800390c:	4628      	mov	r0, r5
 800390e:	f000 fcb5 	bl	800427c <_sbrk_r>
 8003912:	1c43      	adds	r3, r0, #1
 8003914:	d00a      	beq.n	800392c <sbrk_aligned+0x34>
 8003916:	1cc4      	adds	r4, r0, #3
 8003918:	f024 0403 	bic.w	r4, r4, #3
 800391c:	42a0      	cmp	r0, r4
 800391e:	d007      	beq.n	8003930 <sbrk_aligned+0x38>
 8003920:	1a21      	subs	r1, r4, r0
 8003922:	4628      	mov	r0, r5
 8003924:	f000 fcaa 	bl	800427c <_sbrk_r>
 8003928:	3001      	adds	r0, #1
 800392a:	d101      	bne.n	8003930 <sbrk_aligned+0x38>
 800392c:	f04f 34ff 	mov.w	r4, #4294967295
 8003930:	4620      	mov	r0, r4
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	20000294 	.word	0x20000294

08003938 <_malloc_r>:
 8003938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800393c:	1ccd      	adds	r5, r1, #3
 800393e:	f025 0503 	bic.w	r5, r5, #3
 8003942:	3508      	adds	r5, #8
 8003944:	2d0c      	cmp	r5, #12
 8003946:	bf38      	it	cc
 8003948:	250c      	movcc	r5, #12
 800394a:	2d00      	cmp	r5, #0
 800394c:	4607      	mov	r7, r0
 800394e:	db01      	blt.n	8003954 <_malloc_r+0x1c>
 8003950:	42a9      	cmp	r1, r5
 8003952:	d905      	bls.n	8003960 <_malloc_r+0x28>
 8003954:	230c      	movs	r3, #12
 8003956:	2600      	movs	r6, #0
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4630      	mov	r0, r6
 800395c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a34 <_malloc_r+0xfc>
 8003964:	f000 f868 	bl	8003a38 <__malloc_lock>
 8003968:	f8d8 3000 	ldr.w	r3, [r8]
 800396c:	461c      	mov	r4, r3
 800396e:	bb5c      	cbnz	r4, 80039c8 <_malloc_r+0x90>
 8003970:	4629      	mov	r1, r5
 8003972:	4638      	mov	r0, r7
 8003974:	f7ff ffc0 	bl	80038f8 <sbrk_aligned>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	4604      	mov	r4, r0
 800397c:	d155      	bne.n	8003a2a <_malloc_r+0xf2>
 800397e:	f8d8 4000 	ldr.w	r4, [r8]
 8003982:	4626      	mov	r6, r4
 8003984:	2e00      	cmp	r6, #0
 8003986:	d145      	bne.n	8003a14 <_malloc_r+0xdc>
 8003988:	2c00      	cmp	r4, #0
 800398a:	d048      	beq.n	8003a1e <_malloc_r+0xe6>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	4631      	mov	r1, r6
 8003990:	4638      	mov	r0, r7
 8003992:	eb04 0903 	add.w	r9, r4, r3
 8003996:	f000 fc71 	bl	800427c <_sbrk_r>
 800399a:	4581      	cmp	r9, r0
 800399c:	d13f      	bne.n	8003a1e <_malloc_r+0xe6>
 800399e:	6821      	ldr	r1, [r4, #0]
 80039a0:	4638      	mov	r0, r7
 80039a2:	1a6d      	subs	r5, r5, r1
 80039a4:	4629      	mov	r1, r5
 80039a6:	f7ff ffa7 	bl	80038f8 <sbrk_aligned>
 80039aa:	3001      	adds	r0, #1
 80039ac:	d037      	beq.n	8003a1e <_malloc_r+0xe6>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	442b      	add	r3, r5
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	f8d8 3000 	ldr.w	r3, [r8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d038      	beq.n	8003a2e <_malloc_r+0xf6>
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	42a2      	cmp	r2, r4
 80039c0:	d12b      	bne.n	8003a1a <_malloc_r+0xe2>
 80039c2:	2200      	movs	r2, #0
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	e00f      	b.n	80039e8 <_malloc_r+0xb0>
 80039c8:	6822      	ldr	r2, [r4, #0]
 80039ca:	1b52      	subs	r2, r2, r5
 80039cc:	d41f      	bmi.n	8003a0e <_malloc_r+0xd6>
 80039ce:	2a0b      	cmp	r2, #11
 80039d0:	d917      	bls.n	8003a02 <_malloc_r+0xca>
 80039d2:	1961      	adds	r1, r4, r5
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	6025      	str	r5, [r4, #0]
 80039d8:	bf18      	it	ne
 80039da:	6059      	strne	r1, [r3, #4]
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	bf08      	it	eq
 80039e0:	f8c8 1000 	streq.w	r1, [r8]
 80039e4:	5162      	str	r2, [r4, r5]
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	4638      	mov	r0, r7
 80039ea:	f104 060b 	add.w	r6, r4, #11
 80039ee:	f000 f829 	bl	8003a44 <__malloc_unlock>
 80039f2:	f026 0607 	bic.w	r6, r6, #7
 80039f6:	1d23      	adds	r3, r4, #4
 80039f8:	1af2      	subs	r2, r6, r3
 80039fa:	d0ae      	beq.n	800395a <_malloc_r+0x22>
 80039fc:	1b9b      	subs	r3, r3, r6
 80039fe:	50a3      	str	r3, [r4, r2]
 8003a00:	e7ab      	b.n	800395a <_malloc_r+0x22>
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	6862      	ldr	r2, [r4, #4]
 8003a06:	d1dd      	bne.n	80039c4 <_malloc_r+0x8c>
 8003a08:	f8c8 2000 	str.w	r2, [r8]
 8003a0c:	e7ec      	b.n	80039e8 <_malloc_r+0xb0>
 8003a0e:	4623      	mov	r3, r4
 8003a10:	6864      	ldr	r4, [r4, #4]
 8003a12:	e7ac      	b.n	800396e <_malloc_r+0x36>
 8003a14:	4634      	mov	r4, r6
 8003a16:	6876      	ldr	r6, [r6, #4]
 8003a18:	e7b4      	b.n	8003984 <_malloc_r+0x4c>
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	e7cc      	b.n	80039b8 <_malloc_r+0x80>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	4638      	mov	r0, r7
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	f000 f80e 	bl	8003a44 <__malloc_unlock>
 8003a28:	e797      	b.n	800395a <_malloc_r+0x22>
 8003a2a:	6025      	str	r5, [r4, #0]
 8003a2c:	e7dc      	b.n	80039e8 <_malloc_r+0xb0>
 8003a2e:	605b      	str	r3, [r3, #4]
 8003a30:	deff      	udf	#255	; 0xff
 8003a32:	bf00      	nop
 8003a34:	20000290 	.word	0x20000290

08003a38 <__malloc_lock>:
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <__malloc_lock+0x8>)
 8003a3a:	f7ff bf12 	b.w	8003862 <__retarget_lock_acquire_recursive>
 8003a3e:	bf00      	nop
 8003a40:	2000028c 	.word	0x2000028c

08003a44 <__malloc_unlock>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__malloc_unlock+0x8>)
 8003a46:	f7ff bf0d 	b.w	8003864 <__retarget_lock_release_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	2000028c 	.word	0x2000028c

08003a50 <__sfputc_r>:
 8003a50:	6893      	ldr	r3, [r2, #8]
 8003a52:	b410      	push	{r4}
 8003a54:	3b01      	subs	r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	6093      	str	r3, [r2, #8]
 8003a5a:	da07      	bge.n	8003a6c <__sfputc_r+0x1c>
 8003a5c:	6994      	ldr	r4, [r2, #24]
 8003a5e:	42a3      	cmp	r3, r4
 8003a60:	db01      	blt.n	8003a66 <__sfputc_r+0x16>
 8003a62:	290a      	cmp	r1, #10
 8003a64:	d102      	bne.n	8003a6c <__sfputc_r+0x1c>
 8003a66:	bc10      	pop	{r4}
 8003a68:	f000 bb72 	b.w	8004150 <__swbuf_r>
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	1c58      	adds	r0, r3, #1
 8003a70:	6010      	str	r0, [r2, #0]
 8003a72:	7019      	strb	r1, [r3, #0]
 8003a74:	4608      	mov	r0, r1
 8003a76:	bc10      	pop	{r4}
 8003a78:	4770      	bx	lr

08003a7a <__sfputs_r>:
 8003a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	460f      	mov	r7, r1
 8003a80:	4614      	mov	r4, r2
 8003a82:	18d5      	adds	r5, r2, r3
 8003a84:	42ac      	cmp	r4, r5
 8003a86:	d101      	bne.n	8003a8c <__sfputs_r+0x12>
 8003a88:	2000      	movs	r0, #0
 8003a8a:	e007      	b.n	8003a9c <__sfputs_r+0x22>
 8003a8c:	463a      	mov	r2, r7
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a94:	f7ff ffdc 	bl	8003a50 <__sfputc_r>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d1f3      	bne.n	8003a84 <__sfputs_r+0xa>
 8003a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003aa0 <_vfiprintf_r>:
 8003aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa4:	460d      	mov	r5, r1
 8003aa6:	4614      	mov	r4, r2
 8003aa8:	4698      	mov	r8, r3
 8003aaa:	4606      	mov	r6, r0
 8003aac:	b09d      	sub	sp, #116	; 0x74
 8003aae:	b118      	cbz	r0, 8003ab8 <_vfiprintf_r+0x18>
 8003ab0:	6a03      	ldr	r3, [r0, #32]
 8003ab2:	b90b      	cbnz	r3, 8003ab8 <_vfiprintf_r+0x18>
 8003ab4:	f7ff fdd0 	bl	8003658 <__sinit>
 8003ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aba:	07d9      	lsls	r1, r3, #31
 8003abc:	d405      	bmi.n	8003aca <_vfiprintf_r+0x2a>
 8003abe:	89ab      	ldrh	r3, [r5, #12]
 8003ac0:	059a      	lsls	r2, r3, #22
 8003ac2:	d402      	bmi.n	8003aca <_vfiprintf_r+0x2a>
 8003ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ac6:	f7ff fecc 	bl	8003862 <__retarget_lock_acquire_recursive>
 8003aca:	89ab      	ldrh	r3, [r5, #12]
 8003acc:	071b      	lsls	r3, r3, #28
 8003ace:	d501      	bpl.n	8003ad4 <_vfiprintf_r+0x34>
 8003ad0:	692b      	ldr	r3, [r5, #16]
 8003ad2:	b99b      	cbnz	r3, 8003afc <_vfiprintf_r+0x5c>
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f000 fb78 	bl	80041cc <__swsetup_r>
 8003adc:	b170      	cbz	r0, 8003afc <_vfiprintf_r+0x5c>
 8003ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ae0:	07dc      	lsls	r4, r3, #31
 8003ae2:	d504      	bpl.n	8003aee <_vfiprintf_r+0x4e>
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	b01d      	add	sp, #116	; 0x74
 8003aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aee:	89ab      	ldrh	r3, [r5, #12]
 8003af0:	0598      	lsls	r0, r3, #22
 8003af2:	d4f7      	bmi.n	8003ae4 <_vfiprintf_r+0x44>
 8003af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003af6:	f7ff feb5 	bl	8003864 <__retarget_lock_release_recursive>
 8003afa:	e7f3      	b.n	8003ae4 <_vfiprintf_r+0x44>
 8003afc:	2300      	movs	r3, #0
 8003afe:	9309      	str	r3, [sp, #36]	; 0x24
 8003b00:	2320      	movs	r3, #32
 8003b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b06:	2330      	movs	r3, #48	; 0x30
 8003b08:	f04f 0901 	mov.w	r9, #1
 8003b0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003cc0 <_vfiprintf_r+0x220>
 8003b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b18:	4623      	mov	r3, r4
 8003b1a:	469a      	mov	sl, r3
 8003b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b20:	b10a      	cbz	r2, 8003b26 <_vfiprintf_r+0x86>
 8003b22:	2a25      	cmp	r2, #37	; 0x25
 8003b24:	d1f9      	bne.n	8003b1a <_vfiprintf_r+0x7a>
 8003b26:	ebba 0b04 	subs.w	fp, sl, r4
 8003b2a:	d00b      	beq.n	8003b44 <_vfiprintf_r+0xa4>
 8003b2c:	465b      	mov	r3, fp
 8003b2e:	4622      	mov	r2, r4
 8003b30:	4629      	mov	r1, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	f7ff ffa1 	bl	8003a7a <__sfputs_r>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	f000 80a9 	beq.w	8003c90 <_vfiprintf_r+0x1f0>
 8003b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b40:	445a      	add	r2, fp
 8003b42:	9209      	str	r2, [sp, #36]	; 0x24
 8003b44:	f89a 3000 	ldrb.w	r3, [sl]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a1 	beq.w	8003c90 <_vfiprintf_r+0x1f0>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b58:	f10a 0a01 	add.w	sl, sl, #1
 8003b5c:	9304      	str	r3, [sp, #16]
 8003b5e:	9307      	str	r3, [sp, #28]
 8003b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b64:	931a      	str	r3, [sp, #104]	; 0x68
 8003b66:	4654      	mov	r4, sl
 8003b68:	2205      	movs	r2, #5
 8003b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6e:	4854      	ldr	r0, [pc, #336]	; (8003cc0 <_vfiprintf_r+0x220>)
 8003b70:	f000 fb94 	bl	800429c <memchr>
 8003b74:	9a04      	ldr	r2, [sp, #16]
 8003b76:	b9d8      	cbnz	r0, 8003bb0 <_vfiprintf_r+0x110>
 8003b78:	06d1      	lsls	r1, r2, #27
 8003b7a:	bf44      	itt	mi
 8003b7c:	2320      	movmi	r3, #32
 8003b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b82:	0713      	lsls	r3, r2, #28
 8003b84:	bf44      	itt	mi
 8003b86:	232b      	movmi	r3, #43	; 0x2b
 8003b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b90:	2b2a      	cmp	r3, #42	; 0x2a
 8003b92:	d015      	beq.n	8003bc0 <_vfiprintf_r+0x120>
 8003b94:	4654      	mov	r4, sl
 8003b96:	2000      	movs	r0, #0
 8003b98:	f04f 0c0a 	mov.w	ip, #10
 8003b9c:	9a07      	ldr	r2, [sp, #28]
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba4:	3b30      	subs	r3, #48	; 0x30
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	d94d      	bls.n	8003c46 <_vfiprintf_r+0x1a6>
 8003baa:	b1b0      	cbz	r0, 8003bda <_vfiprintf_r+0x13a>
 8003bac:	9207      	str	r2, [sp, #28]
 8003bae:	e014      	b.n	8003bda <_vfiprintf_r+0x13a>
 8003bb0:	eba0 0308 	sub.w	r3, r0, r8
 8003bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	46a2      	mov	sl, r4
 8003bbc:	9304      	str	r3, [sp, #16]
 8003bbe:	e7d2      	b.n	8003b66 <_vfiprintf_r+0xc6>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	1d19      	adds	r1, r3, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	9103      	str	r1, [sp, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bfbb      	ittet	lt
 8003bcc:	425b      	neglt	r3, r3
 8003bce:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd2:	9307      	strge	r3, [sp, #28]
 8003bd4:	9307      	strlt	r3, [sp, #28]
 8003bd6:	bfb8      	it	lt
 8003bd8:	9204      	strlt	r2, [sp, #16]
 8003bda:	7823      	ldrb	r3, [r4, #0]
 8003bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8003bde:	d10c      	bne.n	8003bfa <_vfiprintf_r+0x15a>
 8003be0:	7863      	ldrb	r3, [r4, #1]
 8003be2:	2b2a      	cmp	r3, #42	; 0x2a
 8003be4:	d134      	bne.n	8003c50 <_vfiprintf_r+0x1b0>
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	3402      	adds	r4, #2
 8003bea:	1d1a      	adds	r2, r3, #4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	9203      	str	r2, [sp, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bfb8      	it	lt
 8003bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bf8:	9305      	str	r3, [sp, #20]
 8003bfa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cc4 <_vfiprintf_r+0x224>
 8003bfe:	2203      	movs	r2, #3
 8003c00:	4650      	mov	r0, sl
 8003c02:	7821      	ldrb	r1, [r4, #0]
 8003c04:	f000 fb4a 	bl	800429c <memchr>
 8003c08:	b138      	cbz	r0, 8003c1a <_vfiprintf_r+0x17a>
 8003c0a:	2240      	movs	r2, #64	; 0x40
 8003c0c:	9b04      	ldr	r3, [sp, #16]
 8003c0e:	eba0 000a 	sub.w	r0, r0, sl
 8003c12:	4082      	lsls	r2, r0
 8003c14:	4313      	orrs	r3, r2
 8003c16:	3401      	adds	r4, #1
 8003c18:	9304      	str	r3, [sp, #16]
 8003c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c1e:	2206      	movs	r2, #6
 8003c20:	4829      	ldr	r0, [pc, #164]	; (8003cc8 <_vfiprintf_r+0x228>)
 8003c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c26:	f000 fb39 	bl	800429c <memchr>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d03f      	beq.n	8003cae <_vfiprintf_r+0x20e>
 8003c2e:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <_vfiprintf_r+0x22c>)
 8003c30:	bb1b      	cbnz	r3, 8003c7a <_vfiprintf_r+0x1da>
 8003c32:	9b03      	ldr	r3, [sp, #12]
 8003c34:	3307      	adds	r3, #7
 8003c36:	f023 0307 	bic.w	r3, r3, #7
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	9303      	str	r3, [sp, #12]
 8003c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c40:	443b      	add	r3, r7
 8003c42:	9309      	str	r3, [sp, #36]	; 0x24
 8003c44:	e768      	b.n	8003b18 <_vfiprintf_r+0x78>
 8003c46:	460c      	mov	r4, r1
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c4e:	e7a6      	b.n	8003b9e <_vfiprintf_r+0xfe>
 8003c50:	2300      	movs	r3, #0
 8003c52:	f04f 0c0a 	mov.w	ip, #10
 8003c56:	4619      	mov	r1, r3
 8003c58:	3401      	adds	r4, #1
 8003c5a:	9305      	str	r3, [sp, #20]
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c62:	3a30      	subs	r2, #48	; 0x30
 8003c64:	2a09      	cmp	r2, #9
 8003c66:	d903      	bls.n	8003c70 <_vfiprintf_r+0x1d0>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0c6      	beq.n	8003bfa <_vfiprintf_r+0x15a>
 8003c6c:	9105      	str	r1, [sp, #20]
 8003c6e:	e7c4      	b.n	8003bfa <_vfiprintf_r+0x15a>
 8003c70:	4604      	mov	r4, r0
 8003c72:	2301      	movs	r3, #1
 8003c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c78:	e7f0      	b.n	8003c5c <_vfiprintf_r+0x1bc>
 8003c7a:	ab03      	add	r3, sp, #12
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	462a      	mov	r2, r5
 8003c80:	4630      	mov	r0, r6
 8003c82:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <_vfiprintf_r+0x230>)
 8003c84:	a904      	add	r1, sp, #16
 8003c86:	f3af 8000 	nop.w
 8003c8a:	4607      	mov	r7, r0
 8003c8c:	1c78      	adds	r0, r7, #1
 8003c8e:	d1d6      	bne.n	8003c3e <_vfiprintf_r+0x19e>
 8003c90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c92:	07d9      	lsls	r1, r3, #31
 8003c94:	d405      	bmi.n	8003ca2 <_vfiprintf_r+0x202>
 8003c96:	89ab      	ldrh	r3, [r5, #12]
 8003c98:	059a      	lsls	r2, r3, #22
 8003c9a:	d402      	bmi.n	8003ca2 <_vfiprintf_r+0x202>
 8003c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c9e:	f7ff fde1 	bl	8003864 <__retarget_lock_release_recursive>
 8003ca2:	89ab      	ldrh	r3, [r5, #12]
 8003ca4:	065b      	lsls	r3, r3, #25
 8003ca6:	f53f af1d 	bmi.w	8003ae4 <_vfiprintf_r+0x44>
 8003caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cac:	e71c      	b.n	8003ae8 <_vfiprintf_r+0x48>
 8003cae:	ab03      	add	r3, sp, #12
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	462a      	mov	r2, r5
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <_vfiprintf_r+0x230>)
 8003cb8:	a904      	add	r1, sp, #16
 8003cba:	f000 f87d 	bl	8003db8 <_printf_i>
 8003cbe:	e7e4      	b.n	8003c8a <_vfiprintf_r+0x1ea>
 8003cc0:	08004442 	.word	0x08004442
 8003cc4:	08004448 	.word	0x08004448
 8003cc8:	0800444c 	.word	0x0800444c
 8003ccc:	00000000 	.word	0x00000000
 8003cd0:	08003a7b 	.word	0x08003a7b

08003cd4 <_printf_common>:
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	4616      	mov	r6, r2
 8003cda:	4699      	mov	r9, r3
 8003cdc:	688a      	ldr	r2, [r1, #8]
 8003cde:	690b      	ldr	r3, [r1, #16]
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	bfb8      	it	lt
 8003ce6:	4613      	movlt	r3, r2
 8003ce8:	6033      	str	r3, [r6, #0]
 8003cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cee:	460c      	mov	r4, r1
 8003cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cf4:	b10a      	cbz	r2, 8003cfa <_printf_common+0x26>
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	0699      	lsls	r1, r3, #26
 8003cfe:	bf42      	ittt	mi
 8003d00:	6833      	ldrmi	r3, [r6, #0]
 8003d02:	3302      	addmi	r3, #2
 8003d04:	6033      	strmi	r3, [r6, #0]
 8003d06:	6825      	ldr	r5, [r4, #0]
 8003d08:	f015 0506 	ands.w	r5, r5, #6
 8003d0c:	d106      	bne.n	8003d1c <_printf_common+0x48>
 8003d0e:	f104 0a19 	add.w	sl, r4, #25
 8003d12:	68e3      	ldr	r3, [r4, #12]
 8003d14:	6832      	ldr	r2, [r6, #0]
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	42ab      	cmp	r3, r5
 8003d1a:	dc2b      	bgt.n	8003d74 <_printf_common+0xa0>
 8003d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d20:	1e13      	subs	r3, r2, #0
 8003d22:	6822      	ldr	r2, [r4, #0]
 8003d24:	bf18      	it	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	0692      	lsls	r2, r2, #26
 8003d2a:	d430      	bmi.n	8003d8e <_printf_common+0xba>
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	4638      	mov	r0, r7
 8003d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d34:	47c0      	blx	r8
 8003d36:	3001      	adds	r0, #1
 8003d38:	d023      	beq.n	8003d82 <_printf_common+0xae>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	6922      	ldr	r2, [r4, #16]
 8003d3e:	f003 0306 	and.w	r3, r3, #6
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf14      	ite	ne
 8003d46:	2500      	movne	r5, #0
 8003d48:	6833      	ldreq	r3, [r6, #0]
 8003d4a:	f04f 0600 	mov.w	r6, #0
 8003d4e:	bf08      	it	eq
 8003d50:	68e5      	ldreq	r5, [r4, #12]
 8003d52:	f104 041a 	add.w	r4, r4, #26
 8003d56:	bf08      	it	eq
 8003d58:	1aed      	subeq	r5, r5, r3
 8003d5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d5e:	bf08      	it	eq
 8003d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d64:	4293      	cmp	r3, r2
 8003d66:	bfc4      	itt	gt
 8003d68:	1a9b      	subgt	r3, r3, r2
 8003d6a:	18ed      	addgt	r5, r5, r3
 8003d6c:	42b5      	cmp	r5, r6
 8003d6e:	d11a      	bne.n	8003da6 <_printf_common+0xd2>
 8003d70:	2000      	movs	r0, #0
 8003d72:	e008      	b.n	8003d86 <_printf_common+0xb2>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4652      	mov	r2, sl
 8003d78:	4649      	mov	r1, r9
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d103      	bne.n	8003d8a <_printf_common+0xb6>
 8003d82:	f04f 30ff 	mov.w	r0, #4294967295
 8003d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8a:	3501      	adds	r5, #1
 8003d8c:	e7c1      	b.n	8003d12 <_printf_common+0x3e>
 8003d8e:	2030      	movs	r0, #48	; 0x30
 8003d90:	18e1      	adds	r1, r4, r3
 8003d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d9c:	4422      	add	r2, r4
 8003d9e:	3302      	adds	r3, #2
 8003da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da4:	e7c2      	b.n	8003d2c <_printf_common+0x58>
 8003da6:	2301      	movs	r3, #1
 8003da8:	4622      	mov	r2, r4
 8003daa:	4649      	mov	r1, r9
 8003dac:	4638      	mov	r0, r7
 8003dae:	47c0      	blx	r8
 8003db0:	3001      	adds	r0, #1
 8003db2:	d0e6      	beq.n	8003d82 <_printf_common+0xae>
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7d9      	b.n	8003d6c <_printf_common+0x98>

08003db8 <_printf_i>:
 8003db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	7e0f      	ldrb	r7, [r1, #24]
 8003dbe:	4691      	mov	r9, r2
 8003dc0:	2f78      	cmp	r7, #120	; 0x78
 8003dc2:	4680      	mov	r8, r0
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	469a      	mov	sl, r3
 8003dc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dce:	d807      	bhi.n	8003de0 <_printf_i+0x28>
 8003dd0:	2f62      	cmp	r7, #98	; 0x62
 8003dd2:	d80a      	bhi.n	8003dea <_printf_i+0x32>
 8003dd4:	2f00      	cmp	r7, #0
 8003dd6:	f000 80d5 	beq.w	8003f84 <_printf_i+0x1cc>
 8003dda:	2f58      	cmp	r7, #88	; 0x58
 8003ddc:	f000 80c1 	beq.w	8003f62 <_printf_i+0x1aa>
 8003de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003de8:	e03a      	b.n	8003e60 <_printf_i+0xa8>
 8003dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dee:	2b15      	cmp	r3, #21
 8003df0:	d8f6      	bhi.n	8003de0 <_printf_i+0x28>
 8003df2:	a101      	add	r1, pc, #4	; (adr r1, 8003df8 <_printf_i+0x40>)
 8003df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003df8:	08003e51 	.word	0x08003e51
 8003dfc:	08003e65 	.word	0x08003e65
 8003e00:	08003de1 	.word	0x08003de1
 8003e04:	08003de1 	.word	0x08003de1
 8003e08:	08003de1 	.word	0x08003de1
 8003e0c:	08003de1 	.word	0x08003de1
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003de1 	.word	0x08003de1
 8003e18:	08003de1 	.word	0x08003de1
 8003e1c:	08003de1 	.word	0x08003de1
 8003e20:	08003de1 	.word	0x08003de1
 8003e24:	08003f6b 	.word	0x08003f6b
 8003e28:	08003e91 	.word	0x08003e91
 8003e2c:	08003f25 	.word	0x08003f25
 8003e30:	08003de1 	.word	0x08003de1
 8003e34:	08003de1 	.word	0x08003de1
 8003e38:	08003f8d 	.word	0x08003f8d
 8003e3c:	08003de1 	.word	0x08003de1
 8003e40:	08003e91 	.word	0x08003e91
 8003e44:	08003de1 	.word	0x08003de1
 8003e48:	08003de1 	.word	0x08003de1
 8003e4c:	08003f2d 	.word	0x08003f2d
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	1d1a      	adds	r2, r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	602a      	str	r2, [r5, #0]
 8003e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0a0      	b.n	8003fa6 <_printf_i+0x1ee>
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	0607      	lsls	r7, r0, #24
 8003e6a:	f103 0104 	add.w	r1, r3, #4
 8003e6e:	6029      	str	r1, [r5, #0]
 8003e70:	d501      	bpl.n	8003e76 <_printf_i+0xbe>
 8003e72:	681e      	ldr	r6, [r3, #0]
 8003e74:	e003      	b.n	8003e7e <_printf_i+0xc6>
 8003e76:	0646      	lsls	r6, r0, #25
 8003e78:	d5fb      	bpl.n	8003e72 <_printf_i+0xba>
 8003e7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e7e:	2e00      	cmp	r6, #0
 8003e80:	da03      	bge.n	8003e8a <_printf_i+0xd2>
 8003e82:	232d      	movs	r3, #45	; 0x2d
 8003e84:	4276      	negs	r6, r6
 8003e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8a:	230a      	movs	r3, #10
 8003e8c:	4859      	ldr	r0, [pc, #356]	; (8003ff4 <_printf_i+0x23c>)
 8003e8e:	e012      	b.n	8003eb6 <_printf_i+0xfe>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	1d19      	adds	r1, r3, #4
 8003e96:	6029      	str	r1, [r5, #0]
 8003e98:	0605      	lsls	r5, r0, #24
 8003e9a:	d501      	bpl.n	8003ea0 <_printf_i+0xe8>
 8003e9c:	681e      	ldr	r6, [r3, #0]
 8003e9e:	e002      	b.n	8003ea6 <_printf_i+0xee>
 8003ea0:	0641      	lsls	r1, r0, #25
 8003ea2:	d5fb      	bpl.n	8003e9c <_printf_i+0xe4>
 8003ea4:	881e      	ldrh	r6, [r3, #0]
 8003ea6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2308      	moveq	r3, #8
 8003eac:	230a      	movne	r3, #10
 8003eae:	4851      	ldr	r0, [pc, #324]	; (8003ff4 <_printf_i+0x23c>)
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eb6:	6865      	ldr	r5, [r4, #4]
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	bfa8      	it	ge
 8003ebc:	6821      	ldrge	r1, [r4, #0]
 8003ebe:	60a5      	str	r5, [r4, #8]
 8003ec0:	bfa4      	itt	ge
 8003ec2:	f021 0104 	bicge.w	r1, r1, #4
 8003ec6:	6021      	strge	r1, [r4, #0]
 8003ec8:	b90e      	cbnz	r6, 8003ece <_printf_i+0x116>
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d04b      	beq.n	8003f66 <_printf_i+0x1ae>
 8003ece:	4615      	mov	r5, r2
 8003ed0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ed4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ed8:	5dc7      	ldrb	r7, [r0, r7]
 8003eda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ede:	4637      	mov	r7, r6
 8003ee0:	42bb      	cmp	r3, r7
 8003ee2:	460e      	mov	r6, r1
 8003ee4:	d9f4      	bls.n	8003ed0 <_printf_i+0x118>
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d10b      	bne.n	8003f02 <_printf_i+0x14a>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	07de      	lsls	r6, r3, #31
 8003eee:	d508      	bpl.n	8003f02 <_printf_i+0x14a>
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	6861      	ldr	r1, [r4, #4]
 8003ef4:	4299      	cmp	r1, r3
 8003ef6:	bfde      	ittt	le
 8003ef8:	2330      	movle	r3, #48	; 0x30
 8003efa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003efe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f02:	1b52      	subs	r2, r2, r5
 8003f04:	6122      	str	r2, [r4, #16]
 8003f06:	464b      	mov	r3, r9
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	f8cd a000 	str.w	sl, [sp]
 8003f10:	aa03      	add	r2, sp, #12
 8003f12:	f7ff fedf 	bl	8003cd4 <_printf_common>
 8003f16:	3001      	adds	r0, #1
 8003f18:	d14a      	bne.n	8003fb0 <_printf_i+0x1f8>
 8003f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1e:	b004      	add	sp, #16
 8003f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f043 0320 	orr.w	r3, r3, #32
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	2778      	movs	r7, #120	; 0x78
 8003f2e:	4832      	ldr	r0, [pc, #200]	; (8003ff8 <_printf_i+0x240>)
 8003f30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	6829      	ldr	r1, [r5, #0]
 8003f38:	061f      	lsls	r7, r3, #24
 8003f3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f3e:	d402      	bmi.n	8003f46 <_printf_i+0x18e>
 8003f40:	065f      	lsls	r7, r3, #25
 8003f42:	bf48      	it	mi
 8003f44:	b2b6      	uxthmi	r6, r6
 8003f46:	07df      	lsls	r7, r3, #31
 8003f48:	bf48      	it	mi
 8003f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f4e:	6029      	str	r1, [r5, #0]
 8003f50:	bf48      	it	mi
 8003f52:	6023      	strmi	r3, [r4, #0]
 8003f54:	b91e      	cbnz	r6, 8003f5e <_printf_i+0x1a6>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	f023 0320 	bic.w	r3, r3, #32
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	2310      	movs	r3, #16
 8003f60:	e7a6      	b.n	8003eb0 <_printf_i+0xf8>
 8003f62:	4824      	ldr	r0, [pc, #144]	; (8003ff4 <_printf_i+0x23c>)
 8003f64:	e7e4      	b.n	8003f30 <_printf_i+0x178>
 8003f66:	4615      	mov	r5, r2
 8003f68:	e7bd      	b.n	8003ee6 <_printf_i+0x12e>
 8003f6a:	682b      	ldr	r3, [r5, #0]
 8003f6c:	6826      	ldr	r6, [r4, #0]
 8003f6e:	1d18      	adds	r0, r3, #4
 8003f70:	6961      	ldr	r1, [r4, #20]
 8003f72:	6028      	str	r0, [r5, #0]
 8003f74:	0635      	lsls	r5, r6, #24
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	d501      	bpl.n	8003f7e <_printf_i+0x1c6>
 8003f7a:	6019      	str	r1, [r3, #0]
 8003f7c:	e002      	b.n	8003f84 <_printf_i+0x1cc>
 8003f7e:	0670      	lsls	r0, r6, #25
 8003f80:	d5fb      	bpl.n	8003f7a <_printf_i+0x1c2>
 8003f82:	8019      	strh	r1, [r3, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	4615      	mov	r5, r2
 8003f88:	6123      	str	r3, [r4, #16]
 8003f8a:	e7bc      	b.n	8003f06 <_printf_i+0x14e>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	2100      	movs	r1, #0
 8003f90:	1d1a      	adds	r2, r3, #4
 8003f92:	602a      	str	r2, [r5, #0]
 8003f94:	681d      	ldr	r5, [r3, #0]
 8003f96:	6862      	ldr	r2, [r4, #4]
 8003f98:	4628      	mov	r0, r5
 8003f9a:	f000 f97f 	bl	800429c <memchr>
 8003f9e:	b108      	cbz	r0, 8003fa4 <_printf_i+0x1ec>
 8003fa0:	1b40      	subs	r0, r0, r5
 8003fa2:	6060      	str	r0, [r4, #4]
 8003fa4:	6863      	ldr	r3, [r4, #4]
 8003fa6:	6123      	str	r3, [r4, #16]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fae:	e7aa      	b.n	8003f06 <_printf_i+0x14e>
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	47d0      	blx	sl
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0ad      	beq.n	8003f1a <_printf_i+0x162>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	079b      	lsls	r3, r3, #30
 8003fc2:	d413      	bmi.n	8003fec <_printf_i+0x234>
 8003fc4:	68e0      	ldr	r0, [r4, #12]
 8003fc6:	9b03      	ldr	r3, [sp, #12]
 8003fc8:	4298      	cmp	r0, r3
 8003fca:	bfb8      	it	lt
 8003fcc:	4618      	movlt	r0, r3
 8003fce:	e7a6      	b.n	8003f1e <_printf_i+0x166>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4632      	mov	r2, r6
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	47d0      	blx	sl
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d09d      	beq.n	8003f1a <_printf_i+0x162>
 8003fde:	3501      	adds	r5, #1
 8003fe0:	68e3      	ldr	r3, [r4, #12]
 8003fe2:	9903      	ldr	r1, [sp, #12]
 8003fe4:	1a5b      	subs	r3, r3, r1
 8003fe6:	42ab      	cmp	r3, r5
 8003fe8:	dcf2      	bgt.n	8003fd0 <_printf_i+0x218>
 8003fea:	e7eb      	b.n	8003fc4 <_printf_i+0x20c>
 8003fec:	2500      	movs	r5, #0
 8003fee:	f104 0619 	add.w	r6, r4, #25
 8003ff2:	e7f5      	b.n	8003fe0 <_printf_i+0x228>
 8003ff4:	08004453 	.word	0x08004453
 8003ff8:	08004464 	.word	0x08004464

08003ffc <__sflush_r>:
 8003ffc:	898a      	ldrh	r2, [r1, #12]
 8003ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004000:	4605      	mov	r5, r0
 8004002:	0710      	lsls	r0, r2, #28
 8004004:	460c      	mov	r4, r1
 8004006:	d457      	bmi.n	80040b8 <__sflush_r+0xbc>
 8004008:	684b      	ldr	r3, [r1, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dc04      	bgt.n	8004018 <__sflush_r+0x1c>
 800400e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	dc01      	bgt.n	8004018 <__sflush_r+0x1c>
 8004014:	2000      	movs	r0, #0
 8004016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800401a:	2e00      	cmp	r6, #0
 800401c:	d0fa      	beq.n	8004014 <__sflush_r+0x18>
 800401e:	2300      	movs	r3, #0
 8004020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004024:	682f      	ldr	r7, [r5, #0]
 8004026:	6a21      	ldr	r1, [r4, #32]
 8004028:	602b      	str	r3, [r5, #0]
 800402a:	d032      	beq.n	8004092 <__sflush_r+0x96>
 800402c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	075a      	lsls	r2, r3, #29
 8004032:	d505      	bpl.n	8004040 <__sflush_r+0x44>
 8004034:	6863      	ldr	r3, [r4, #4]
 8004036:	1ac0      	subs	r0, r0, r3
 8004038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800403a:	b10b      	cbz	r3, 8004040 <__sflush_r+0x44>
 800403c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800403e:	1ac0      	subs	r0, r0, r3
 8004040:	2300      	movs	r3, #0
 8004042:	4602      	mov	r2, r0
 8004044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004046:	4628      	mov	r0, r5
 8004048:	6a21      	ldr	r1, [r4, #32]
 800404a:	47b0      	blx	r6
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	d106      	bne.n	8004060 <__sflush_r+0x64>
 8004052:	6829      	ldr	r1, [r5, #0]
 8004054:	291d      	cmp	r1, #29
 8004056:	d82b      	bhi.n	80040b0 <__sflush_r+0xb4>
 8004058:	4a28      	ldr	r2, [pc, #160]	; (80040fc <__sflush_r+0x100>)
 800405a:	410a      	asrs	r2, r1
 800405c:	07d6      	lsls	r6, r2, #31
 800405e:	d427      	bmi.n	80040b0 <__sflush_r+0xb4>
 8004060:	2200      	movs	r2, #0
 8004062:	6062      	str	r2, [r4, #4]
 8004064:	6922      	ldr	r2, [r4, #16]
 8004066:	04d9      	lsls	r1, r3, #19
 8004068:	6022      	str	r2, [r4, #0]
 800406a:	d504      	bpl.n	8004076 <__sflush_r+0x7a>
 800406c:	1c42      	adds	r2, r0, #1
 800406e:	d101      	bne.n	8004074 <__sflush_r+0x78>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	b903      	cbnz	r3, 8004076 <__sflush_r+0x7a>
 8004074:	6560      	str	r0, [r4, #84]	; 0x54
 8004076:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004078:	602f      	str	r7, [r5, #0]
 800407a:	2900      	cmp	r1, #0
 800407c:	d0ca      	beq.n	8004014 <__sflush_r+0x18>
 800407e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004082:	4299      	cmp	r1, r3
 8004084:	d002      	beq.n	800408c <__sflush_r+0x90>
 8004086:	4628      	mov	r0, r5
 8004088:	f7ff fbee 	bl	8003868 <_free_r>
 800408c:	2000      	movs	r0, #0
 800408e:	6360      	str	r0, [r4, #52]	; 0x34
 8004090:	e7c1      	b.n	8004016 <__sflush_r+0x1a>
 8004092:	2301      	movs	r3, #1
 8004094:	4628      	mov	r0, r5
 8004096:	47b0      	blx	r6
 8004098:	1c41      	adds	r1, r0, #1
 800409a:	d1c8      	bne.n	800402e <__sflush_r+0x32>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0c5      	beq.n	800402e <__sflush_r+0x32>
 80040a2:	2b1d      	cmp	r3, #29
 80040a4:	d001      	beq.n	80040aa <__sflush_r+0xae>
 80040a6:	2b16      	cmp	r3, #22
 80040a8:	d101      	bne.n	80040ae <__sflush_r+0xb2>
 80040aa:	602f      	str	r7, [r5, #0]
 80040ac:	e7b2      	b.n	8004014 <__sflush_r+0x18>
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	e7ae      	b.n	8004016 <__sflush_r+0x1a>
 80040b8:	690f      	ldr	r7, [r1, #16]
 80040ba:	2f00      	cmp	r7, #0
 80040bc:	d0aa      	beq.n	8004014 <__sflush_r+0x18>
 80040be:	0793      	lsls	r3, r2, #30
 80040c0:	bf18      	it	ne
 80040c2:	2300      	movne	r3, #0
 80040c4:	680e      	ldr	r6, [r1, #0]
 80040c6:	bf08      	it	eq
 80040c8:	694b      	ldreq	r3, [r1, #20]
 80040ca:	1bf6      	subs	r6, r6, r7
 80040cc:	600f      	str	r7, [r1, #0]
 80040ce:	608b      	str	r3, [r1, #8]
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	dd9f      	ble.n	8004014 <__sflush_r+0x18>
 80040d4:	4633      	mov	r3, r6
 80040d6:	463a      	mov	r2, r7
 80040d8:	4628      	mov	r0, r5
 80040da:	6a21      	ldr	r1, [r4, #32]
 80040dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80040e0:	47e0      	blx	ip
 80040e2:	2800      	cmp	r0, #0
 80040e4:	dc06      	bgt.n	80040f4 <__sflush_r+0xf8>
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	e790      	b.n	8004016 <__sflush_r+0x1a>
 80040f4:	4407      	add	r7, r0
 80040f6:	1a36      	subs	r6, r6, r0
 80040f8:	e7ea      	b.n	80040d0 <__sflush_r+0xd4>
 80040fa:	bf00      	nop
 80040fc:	dfbffffe 	.word	0xdfbffffe

08004100 <_fflush_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	4605      	mov	r5, r0
 8004106:	460c      	mov	r4, r1
 8004108:	b913      	cbnz	r3, 8004110 <_fflush_r+0x10>
 800410a:	2500      	movs	r5, #0
 800410c:	4628      	mov	r0, r5
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	b118      	cbz	r0, 800411a <_fflush_r+0x1a>
 8004112:	6a03      	ldr	r3, [r0, #32]
 8004114:	b90b      	cbnz	r3, 800411a <_fflush_r+0x1a>
 8004116:	f7ff fa9f 	bl	8003658 <__sinit>
 800411a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f3      	beq.n	800410a <_fflush_r+0xa>
 8004122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004124:	07d0      	lsls	r0, r2, #31
 8004126:	d404      	bmi.n	8004132 <_fflush_r+0x32>
 8004128:	0599      	lsls	r1, r3, #22
 800412a:	d402      	bmi.n	8004132 <_fflush_r+0x32>
 800412c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412e:	f7ff fb98 	bl	8003862 <__retarget_lock_acquire_recursive>
 8004132:	4628      	mov	r0, r5
 8004134:	4621      	mov	r1, r4
 8004136:	f7ff ff61 	bl	8003ffc <__sflush_r>
 800413a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800413c:	4605      	mov	r5, r0
 800413e:	07da      	lsls	r2, r3, #31
 8004140:	d4e4      	bmi.n	800410c <_fflush_r+0xc>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	059b      	lsls	r3, r3, #22
 8004146:	d4e1      	bmi.n	800410c <_fflush_r+0xc>
 8004148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800414a:	f7ff fb8b 	bl	8003864 <__retarget_lock_release_recursive>
 800414e:	e7dd      	b.n	800410c <_fflush_r+0xc>

08004150 <__swbuf_r>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	460e      	mov	r6, r1
 8004154:	4614      	mov	r4, r2
 8004156:	4605      	mov	r5, r0
 8004158:	b118      	cbz	r0, 8004162 <__swbuf_r+0x12>
 800415a:	6a03      	ldr	r3, [r0, #32]
 800415c:	b90b      	cbnz	r3, 8004162 <__swbuf_r+0x12>
 800415e:	f7ff fa7b 	bl	8003658 <__sinit>
 8004162:	69a3      	ldr	r3, [r4, #24]
 8004164:	60a3      	str	r3, [r4, #8]
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	071a      	lsls	r2, r3, #28
 800416a:	d525      	bpl.n	80041b8 <__swbuf_r+0x68>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	b31b      	cbz	r3, 80041b8 <__swbuf_r+0x68>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	6922      	ldr	r2, [r4, #16]
 8004174:	b2f6      	uxtb	r6, r6
 8004176:	1a98      	subs	r0, r3, r2
 8004178:	6963      	ldr	r3, [r4, #20]
 800417a:	4637      	mov	r7, r6
 800417c:	4283      	cmp	r3, r0
 800417e:	dc04      	bgt.n	800418a <__swbuf_r+0x3a>
 8004180:	4621      	mov	r1, r4
 8004182:	4628      	mov	r0, r5
 8004184:	f7ff ffbc 	bl	8004100 <_fflush_r>
 8004188:	b9e0      	cbnz	r0, 80041c4 <__swbuf_r+0x74>
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	3b01      	subs	r3, #1
 800418e:	60a3      	str	r3, [r4, #8]
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	6022      	str	r2, [r4, #0]
 8004196:	701e      	strb	r6, [r3, #0]
 8004198:	6962      	ldr	r2, [r4, #20]
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	429a      	cmp	r2, r3
 800419e:	d004      	beq.n	80041aa <__swbuf_r+0x5a>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	07db      	lsls	r3, r3, #31
 80041a4:	d506      	bpl.n	80041b4 <__swbuf_r+0x64>
 80041a6:	2e0a      	cmp	r6, #10
 80041a8:	d104      	bne.n	80041b4 <__swbuf_r+0x64>
 80041aa:	4621      	mov	r1, r4
 80041ac:	4628      	mov	r0, r5
 80041ae:	f7ff ffa7 	bl	8004100 <_fflush_r>
 80041b2:	b938      	cbnz	r0, 80041c4 <__swbuf_r+0x74>
 80041b4:	4638      	mov	r0, r7
 80041b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b8:	4621      	mov	r1, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 f806 	bl	80041cc <__swsetup_r>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d0d5      	beq.n	8004170 <__swbuf_r+0x20>
 80041c4:	f04f 37ff 	mov.w	r7, #4294967295
 80041c8:	e7f4      	b.n	80041b4 <__swbuf_r+0x64>
	...

080041cc <__swsetup_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <__swsetup_r+0xac>)
 80041d0:	4605      	mov	r5, r0
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	460c      	mov	r4, r1
 80041d6:	b118      	cbz	r0, 80041e0 <__swsetup_r+0x14>
 80041d8:	6a03      	ldr	r3, [r0, #32]
 80041da:	b90b      	cbnz	r3, 80041e0 <__swsetup_r+0x14>
 80041dc:	f7ff fa3c 	bl	8003658 <__sinit>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041e6:	0718      	lsls	r0, r3, #28
 80041e8:	d422      	bmi.n	8004230 <__swsetup_r+0x64>
 80041ea:	06d9      	lsls	r1, r3, #27
 80041ec:	d407      	bmi.n	80041fe <__swsetup_r+0x32>
 80041ee:	2309      	movs	r3, #9
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041f6:	f04f 30ff 	mov.w	r0, #4294967295
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	e034      	b.n	8004268 <__swsetup_r+0x9c>
 80041fe:	0758      	lsls	r0, r3, #29
 8004200:	d512      	bpl.n	8004228 <__swsetup_r+0x5c>
 8004202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004204:	b141      	cbz	r1, 8004218 <__swsetup_r+0x4c>
 8004206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800420a:	4299      	cmp	r1, r3
 800420c:	d002      	beq.n	8004214 <__swsetup_r+0x48>
 800420e:	4628      	mov	r0, r5
 8004210:	f7ff fb2a 	bl	8003868 <_free_r>
 8004214:	2300      	movs	r3, #0
 8004216:	6363      	str	r3, [r4, #52]	; 0x34
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800421e:	81a3      	strh	r3, [r4, #12]
 8004220:	2300      	movs	r3, #0
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	6923      	ldr	r3, [r4, #16]
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	f043 0308 	orr.w	r3, r3, #8
 800422e:	81a3      	strh	r3, [r4, #12]
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	b94b      	cbnz	r3, 8004248 <__swsetup_r+0x7c>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800423a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423e:	d003      	beq.n	8004248 <__swsetup_r+0x7c>
 8004240:	4621      	mov	r1, r4
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f85d 	bl	8004302 <__smakebuf_r>
 8004248:	89a0      	ldrh	r0, [r4, #12]
 800424a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800424e:	f010 0301 	ands.w	r3, r0, #1
 8004252:	d00a      	beq.n	800426a <__swsetup_r+0x9e>
 8004254:	2300      	movs	r3, #0
 8004256:	60a3      	str	r3, [r4, #8]
 8004258:	6963      	ldr	r3, [r4, #20]
 800425a:	425b      	negs	r3, r3
 800425c:	61a3      	str	r3, [r4, #24]
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	b943      	cbnz	r3, 8004274 <__swsetup_r+0xa8>
 8004262:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004266:	d1c4      	bne.n	80041f2 <__swsetup_r+0x26>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	0781      	lsls	r1, r0, #30
 800426c:	bf58      	it	pl
 800426e:	6963      	ldrpl	r3, [r4, #20]
 8004270:	60a3      	str	r3, [r4, #8]
 8004272:	e7f4      	b.n	800425e <__swsetup_r+0x92>
 8004274:	2000      	movs	r0, #0
 8004276:	e7f7      	b.n	8004268 <__swsetup_r+0x9c>
 8004278:	20000064 	.word	0x20000064

0800427c <_sbrk_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	2300      	movs	r3, #0
 8004280:	4d05      	ldr	r5, [pc, #20]	; (8004298 <_sbrk_r+0x1c>)
 8004282:	4604      	mov	r4, r0
 8004284:	4608      	mov	r0, r1
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	f7fc fa66 	bl	8000758 <_sbrk>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_sbrk_r+0x1a>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_sbrk_r+0x1a>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000288 	.word	0x20000288

0800429c <memchr>:
 800429c:	4603      	mov	r3, r0
 800429e:	b510      	push	{r4, lr}
 80042a0:	b2c9      	uxtb	r1, r1
 80042a2:	4402      	add	r2, r0
 80042a4:	4293      	cmp	r3, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	d101      	bne.n	80042ae <memchr+0x12>
 80042aa:	2000      	movs	r0, #0
 80042ac:	e003      	b.n	80042b6 <memchr+0x1a>
 80042ae:	7804      	ldrb	r4, [r0, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	428c      	cmp	r4, r1
 80042b4:	d1f6      	bne.n	80042a4 <memchr+0x8>
 80042b6:	bd10      	pop	{r4, pc}

080042b8 <__swhatbuf_r>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	460c      	mov	r4, r1
 80042bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c0:	4615      	mov	r5, r2
 80042c2:	2900      	cmp	r1, #0
 80042c4:	461e      	mov	r6, r3
 80042c6:	b096      	sub	sp, #88	; 0x58
 80042c8:	da0c      	bge.n	80042e4 <__swhatbuf_r+0x2c>
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	2100      	movs	r1, #0
 80042ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042d2:	bf0c      	ite	eq
 80042d4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80042d8:	2340      	movne	r3, #64	; 0x40
 80042da:	2000      	movs	r0, #0
 80042dc:	6031      	str	r1, [r6, #0]
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	b016      	add	sp, #88	; 0x58
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
 80042e4:	466a      	mov	r2, sp
 80042e6:	f000 f849 	bl	800437c <_fstat_r>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	dbed      	blt.n	80042ca <__swhatbuf_r+0x12>
 80042ee:	9901      	ldr	r1, [sp, #4]
 80042f0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80042f4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80042f8:	4259      	negs	r1, r3
 80042fa:	4159      	adcs	r1, r3
 80042fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004300:	e7eb      	b.n	80042da <__swhatbuf_r+0x22>

08004302 <__smakebuf_r>:
 8004302:	898b      	ldrh	r3, [r1, #12]
 8004304:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004306:	079d      	lsls	r5, r3, #30
 8004308:	4606      	mov	r6, r0
 800430a:	460c      	mov	r4, r1
 800430c:	d507      	bpl.n	800431e <__smakebuf_r+0x1c>
 800430e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	6123      	str	r3, [r4, #16]
 8004316:	2301      	movs	r3, #1
 8004318:	6163      	str	r3, [r4, #20]
 800431a:	b002      	add	sp, #8
 800431c:	bd70      	pop	{r4, r5, r6, pc}
 800431e:	466a      	mov	r2, sp
 8004320:	ab01      	add	r3, sp, #4
 8004322:	f7ff ffc9 	bl	80042b8 <__swhatbuf_r>
 8004326:	9900      	ldr	r1, [sp, #0]
 8004328:	4605      	mov	r5, r0
 800432a:	4630      	mov	r0, r6
 800432c:	f7ff fb04 	bl	8003938 <_malloc_r>
 8004330:	b948      	cbnz	r0, 8004346 <__smakebuf_r+0x44>
 8004332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004336:	059a      	lsls	r2, r3, #22
 8004338:	d4ef      	bmi.n	800431a <__smakebuf_r+0x18>
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	f043 0302 	orr.w	r3, r3, #2
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	e7e3      	b.n	800430e <__smakebuf_r+0xc>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	6020      	str	r0, [r4, #0]
 800434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434e:	81a3      	strh	r3, [r4, #12]
 8004350:	9b00      	ldr	r3, [sp, #0]
 8004352:	6120      	str	r0, [r4, #16]
 8004354:	6163      	str	r3, [r4, #20]
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	b15b      	cbz	r3, 8004372 <__smakebuf_r+0x70>
 800435a:	4630      	mov	r0, r6
 800435c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004360:	f000 f81e 	bl	80043a0 <_isatty_r>
 8004364:	b128      	cbz	r0, 8004372 <__smakebuf_r+0x70>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	f023 0303 	bic.w	r3, r3, #3
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	89a3      	ldrh	r3, [r4, #12]
 8004374:	431d      	orrs	r5, r3
 8004376:	81a5      	strh	r5, [r4, #12]
 8004378:	e7cf      	b.n	800431a <__smakebuf_r+0x18>
	...

0800437c <_fstat_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	2300      	movs	r3, #0
 8004380:	4d06      	ldr	r5, [pc, #24]	; (800439c <_fstat_r+0x20>)
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	f7fc f9bf 	bl	800070c <_fstat>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d102      	bne.n	8004398 <_fstat_r+0x1c>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	b103      	cbz	r3, 8004398 <_fstat_r+0x1c>
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	20000288 	.word	0x20000288

080043a0 <_isatty_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	2300      	movs	r3, #0
 80043a4:	4d05      	ldr	r5, [pc, #20]	; (80043bc <_isatty_r+0x1c>)
 80043a6:	4604      	mov	r4, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	602b      	str	r3, [r5, #0]
 80043ac:	f7fc f9bd 	bl	800072a <_isatty>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_isatty_r+0x1a>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_isatty_r+0x1a>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	20000288 	.word	0x20000288

080043c0 <_init>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr

080043cc <_fini>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr
