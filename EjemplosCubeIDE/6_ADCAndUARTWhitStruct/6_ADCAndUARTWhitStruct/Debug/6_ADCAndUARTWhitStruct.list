
6_ADCAndUARTWhitStruct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003898  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a44  08003a44  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003a44  08003a44  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a44  08003a44  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000068  08003ab4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003ab4  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4f1  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002379  00000000  00000000  0002a5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002c940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071a  00000000  00000000  0002d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ca6  00000000  00000000  0002d9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da42  00000000  00000000  00046670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008907d  00000000  00000000  000540b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b2c  00000000  00000000  000dd130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000dfc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800398c 	.word	0x0800398c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800398c 	.word	0x0800398c

0800014c <ADC_Read>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;

uint16_t ADC_Read()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&adc1);               // Inicio el ADC   
 8000150:	4806      	ldr	r0, [pc, #24]	; (800016c <ADC_Read+0x20>)
 8000152:	f000 fd57 	bl	8000c04 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&adc1,1); // Conversi√≥n por interrup
 8000156:	2101      	movs	r1, #1
 8000158:	4804      	ldr	r0, [pc, #16]	; (800016c <ADC_Read+0x20>)
 800015a:	f000 fe01 	bl	8000d60 <HAL_ADC_PollForConversion>
    return (HAL_ADC_GetValue(&adc1));   // obtengo el valor del adc
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <ADC_Read+0x20>)
 8000160:	f000 ff04 	bl	8000f6c <HAL_ADC_GetValue>
 8000164:	4603      	mov	r3, r0
 8000166:	b29b      	uxth	r3, r3
}
 8000168:	4618      	mov	r0, r3
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000084 	.word	0x20000084

08000170 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000182:	4a19      	ldr	r2, [pc, #100]	; (80001e8 <MX_ADC1_Init+0x78>)
 8000184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000188:	2200      	movs	r2, #0
 800018a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800018c:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000192:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000194:	2200      	movs	r2, #0
 8000196:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <MX_ADC1_Init+0x74>)
 800019a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800019e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ae:	f000 fc51 	bl	8000a54 <HAL_ADC_Init>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001b8:	f000 f9e7 	bl	800058a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001bc:	2300      	movs	r3, #0
 80001be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001c0:	2301      	movs	r3, #1
 80001c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ce:	f000 ffab 	bl	8001128 <HAL_ADC_ConfigChannel>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001d8:	f000 f9d7 	bl	800058a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001dc:	bf00      	nop
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000084 	.word	0x20000084
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a18      	ldr	r2, [pc, #96]	; (8000268 <HAL_ADC_MspInit+0x7c>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d129      	bne.n	8000260 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <HAL_ADC_MspInit+0x80>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a16      	ldr	r2, [pc, #88]	; (800026c <HAL_ADC_MspInit+0x80>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <HAL_ADC_MspInit+0x80>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <HAL_ADC_MspInit+0x80>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a10      	ldr	r2, [pc, #64]	; (800026c <HAL_ADC_MspInit+0x80>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <HAL_ADC_MspInit+0x80>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800023c:	2301      	movs	r3, #1
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000240:	2303      	movs	r3, #3
 8000242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4619      	mov	r1, r3
 800024a:	4809      	ldr	r0, [pc, #36]	; (8000270 <HAL_ADC_MspInit+0x84>)
 800024c:	f001 fb76 	bl	800193c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000250:	2200      	movs	r2, #0
 8000252:	2100      	movs	r1, #0
 8000254:	2012      	movs	r0, #18
 8000256:	f001 f9da 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800025a:	2012      	movs	r0, #18
 800025c:	f001 f9f3 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000260:	bf00      	nop
 8000262:	3720      	adds	r7, #32
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40012400 	.word	0x40012400
 800026c:	40021000 	.word	0x40021000
 8000270:	40010800 	.word	0x40010800

08000274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000288:	4b1d      	ldr	r3, [pc, #116]	; (8000300 <MX_GPIO_Init+0x8c>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <MX_GPIO_Init+0x8c>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <MX_GPIO_Init+0x8c>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a0:	4b17      	ldr	r3, [pc, #92]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a16      	ldr	r2, [pc, #88]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0304 	and.w	r3, r3, #4
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a10      	ldr	r2, [pc, #64]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_GPIO_Init+0x8c>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2107      	movs	r1, #7
 80002d4:	480b      	ldr	r0, [pc, #44]	; (8000304 <MX_GPIO_Init+0x90>)
 80002d6:	f001 fcb5 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80002da:	2307      	movs	r3, #7
 80002dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	4619      	mov	r1, r3
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_GPIO_Init+0x90>)
 80002f2:	f001 fb23 	bl	800193c <HAL_GPIO_Init>

}
 80002f6:	bf00      	nop
 80002f8:	3720      	adds	r7, #32
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	40010c00 	.word	0x40010c00

08000308 <__io_putchar>:
#define uartx huart1   //   colocar el puerto serial a usar

extern UART_HandleTypeDef uartx;


int __io_putchar(int ch) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 //ITM_SendChar(ch);//  si se quiere usar por debbuger
HAL_UART_Transmit(&uartx, (uint8_t *)&ch, 1, 0xFFFF);// printf al puerto serial sefinico
 8000310:	1d39      	adds	r1, r7, #4
 8000312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000316:	2201      	movs	r2, #1
 8000318:	4803      	ldr	r0, [pc, #12]	; (8000328 <__io_putchar+0x20>)
 800031a:	f002 fa77 	bl	800280c <HAL_UART_Transmit>
return(ch);
 800031e:	687b      	ldr	r3, [r7, #4]
}
 8000320:	4618      	mov	r0, r3
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200000bc 	.word	0x200000bc

0800032c <main>:
} charFrame_t; //Fin de union


void SystemClock_Config(void);

int main(void){
 800032c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000330:	b099      	sub	sp, #100	; 0x64
 8000332:	af0c      	add	r7, sp, #48	; 0x30

  //-- Inicializacion de bloques --
	HAL_Init();
 8000334:	f000 fb08 	bl	8000948 <HAL_Init>
	SystemClock_Config();
 8000338:	f000 f8cc 	bl	80004d4 <SystemClock_Config>
	MX_GPIO_Init();
 800033c:	f7ff ff9a 	bl	8000274 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000340:	f7ff ff16 	bl	8000170 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000344:	f000 fa3a 	bl	80007bc <MX_USART1_UART_Init>

  // -- Variables del sistema --
	frame_t	dataFrame;
	static uint16_t	lecturaAdc;
	unsigned	char count = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	unsigned	char contador =1;
 800034e:	2301      	movs	r3, #1
 8000350:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	while (1){

		lecturaAdc = ADC_Read(); //Lectura del ADC
 8000354:	f7ff fefa 	bl	800014c <ADC_Read>
 8000358:	4603      	mov	r3, r0
 800035a:	461a      	mov	r2, r3
 800035c:	4b5a      	ldr	r3, [pc, #360]	; (80004c8 <main+0x19c>)
 800035e:	801a      	strh	r2, [r3, #0]

		switch (contador){
 8000360:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000364:	3b01      	subs	r3, #1
 8000366:	2b07      	cmp	r3, #7
 8000368:	f200 8083 	bhi.w	8000472 <main+0x146>
 800036c:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <main+0x48>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	08000395 	.word	0x08000395
 8000378:	0800039d 	.word	0x0800039d
 800037c:	080003a5 	.word	0x080003a5
 8000380:	080003ad 	.word	0x080003ad
 8000384:	080003b5 	.word	0x080003b5
 8000388:	080003bd 	.word	0x080003bd
 800038c:	080003c5 	.word	0x080003c5
 8000390:	080003cd 	.word	0x080003cd

		case 1: dataFrame.inA1 = lecturaAdc; break;
 8000394:	4b4c      	ldr	r3, [pc, #304]	; (80004c8 <main+0x19c>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	82fb      	strh	r3, [r7, #22]
 800039a:	e06a      	b.n	8000472 <main+0x146>
		case 2: dataFrame.inA2 = lecturaAdc; break;
 800039c:	4b4a      	ldr	r3, [pc, #296]	; (80004c8 <main+0x19c>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	833b      	strh	r3, [r7, #24]
 80003a2:	e066      	b.n	8000472 <main+0x146>
		case 3: dataFrame.inA3 = lecturaAdc; break;
 80003a4:	4b48      	ldr	r3, [pc, #288]	; (80004c8 <main+0x19c>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	837b      	strh	r3, [r7, #26]
 80003aa:	e062      	b.n	8000472 <main+0x146>
		case 4: dataFrame.inA4 = lecturaAdc; break;
 80003ac:	4b46      	ldr	r3, [pc, #280]	; (80004c8 <main+0x19c>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	83bb      	strh	r3, [r7, #28]
 80003b2:	e05e      	b.n	8000472 <main+0x146>
		case 5: dataFrame.inA5 = lecturaAdc; break;
 80003b4:	4b44      	ldr	r3, [pc, #272]	; (80004c8 <main+0x19c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	83fb      	strh	r3, [r7, #30]
 80003ba:	e05a      	b.n	8000472 <main+0x146>
		case 6: dataFrame.inA6 = lecturaAdc; break;
 80003bc:	4b42      	ldr	r3, [pc, #264]	; (80004c8 <main+0x19c>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	843b      	strh	r3, [r7, #32]
 80003c2:	e056      	b.n	8000472 <main+0x146>
		case 7: dataFrame.inA7 = lecturaAdc; break;
 80003c4:	4b40      	ldr	r3, [pc, #256]	; (80004c8 <main+0x19c>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80003ca:	e052      	b.n	8000472 <main+0x146>
		case 8:

			dataFrame.inA8 = lecturaAdc;
 80003cc:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <main+0x19c>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			dataFrame.start = 0x1B;
 80003d2:	231b      	movs	r3, #27
 80003d4:	753b      	strb	r3, [r7, #20]
			dataFrame.count = count;
 80003d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003da:	757b      	strb	r3, [r7, #21]
			dataFrame.outA1 = 0x05;
 80003dc:	2305      	movs	r3, #5
 80003de:	84fb      	strh	r3, [r7, #38]	; 0x26
			dataFrame.outA2 = 0x05;
 80003e0:	2305      	movs	r3, #5
 80003e2:	853b      	strh	r3, [r7, #40]	; 0x28
			dataFrame.insDig =  0xDE;
 80003e4:	23de      	movs	r3, #222	; 0xde
 80003e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			dataFrame.outsDig = 0xDE;
 80003ea:	23de      	movs	r3, #222	; 0xde
 80003ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			count++;
 80003f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003f4:	3301      	adds	r3, #1
 80003f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
//			HAL_UART_Transmit(&huart1, (uint8_t *)&dataFrame, sizeof(dataFrame), 0xFFFF);
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 80003fa:	7d3b      	ldrb	r3, [r7, #20]
 80003fc:	469c      	mov	ip, r3
 80003fe:	7d7b      	ldrb	r3, [r7, #21]
 8000400:	469e      	mov	lr, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 8000402:	8afb      	ldrh	r3, [r7, #22]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000404:	4698      	mov	r8, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 8000406:	8b3b      	ldrh	r3, [r7, #24]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000408:	461a      	mov	r2, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 800040a:	8b7b      	ldrh	r3, [r7, #26]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 800040c:	4619      	mov	r1, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 800040e:	8bbb      	ldrh	r3, [r7, #28]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000410:	4618      	mov	r0, r3
					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
 8000412:	8bfb      	ldrh	r3, [r7, #30]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000414:	461c      	mov	r4, r3
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 8000416:	8c3b      	ldrh	r3, [r7, #32]
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000418:	461d      	mov	r5, r3
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 800041a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 800041c:	461e      	mov	r6, r3
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 800041e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000420:	60fb      	str	r3, [r7, #12]
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 8000422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000424:	60bb      	str	r3, [r7, #8]
					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
 8000426:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000428:	607b      	str	r3, [r7, #4]
					dataFrame.insDig,dataFrame.outsDig);
 800042a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 800042e:	603b      	str	r3, [r7, #0]
					dataFrame.insDig,dataFrame.outsDig);
 8000430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
			printf("%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\r\n", dataFrame.start, dataFrame.count,
 8000434:	930a      	str	r3, [sp, #40]	; 0x28
 8000436:	f8d7 9000 	ldr.w	r9, [r7]
 800043a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800043e:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8000442:	f8cd 9020 	str.w	r9, [sp, #32]
 8000446:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800044a:	f8cd 901c 	str.w	r9, [sp, #28]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	9306      	str	r3, [sp, #24]
 8000452:	9605      	str	r6, [sp, #20]
 8000454:	9504      	str	r5, [sp, #16]
 8000456:	9403      	str	r4, [sp, #12]
 8000458:	9002      	str	r0, [sp, #8]
 800045a:	9101      	str	r1, [sp, #4]
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	4643      	mov	r3, r8
 8000460:	4672      	mov	r2, lr
 8000462:	4661      	mov	r1, ip
 8000464:	4819      	ldr	r0, [pc, #100]	; (80004cc <main+0x1a0>)
 8000466:	f002 fc13 	bl	8002c90 <iprintf>
			contador =0;
 800046a:	2300      	movs	r3, #0
 800046c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8000470:	bf00      	nop
		}

		HAL_GPIO_WritePin(GPIOB, PIN1, (contador & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000472:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	b2db      	uxtb	r3, r3
 800047c:	461a      	mov	r2, r3
 800047e:	2101      	movs	r1, #1
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <main+0x1a4>)
 8000482:	f001 fbdf 	bl	8001c44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PIN2, (contador & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000486:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800048a:	105b      	asrs	r3, r3, #1
 800048c:	b2db      	uxtb	r3, r3
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	2102      	movs	r1, #2
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <main+0x1a4>)
 800049a:	f001 fbd3 	bl	8001c44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PIN3, (contador & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800049e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004a2:	109b      	asrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	461a      	mov	r2, r3
 80004ae:	2104      	movs	r1, #4
 80004b0:	4807      	ldr	r0, [pc, #28]	; (80004d0 <main+0x1a4>)
 80004b2:	f001 fbc7 	bl	8001c44 <HAL_GPIO_WritePin>
		contador++;
 80004b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80004ba:	3301      	adds	r3, #1
 80004bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		HAL_Delay(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 faa3 	bl	8000a0c <HAL_Delay>
		lecturaAdc = ADC_Read(); //Lectura del ADC
 80004c6:	e745      	b.n	8000354 <main+0x28>
 80004c8:	200000b4 	.word	0x200000b4
 80004cc:	080039a4 	.word	0x080039a4
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	; 0x50
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fc29 	bl	8002d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000504:	2301      	movs	r3, #1
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000520:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000524:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fba2 	bl	8001c74 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000536:	f000 f828 	bl	800058a <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fe0e 	bl	8002178 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x92>
    Error_Handler();
 8000562:	f000 f812 	bl	800058a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000566:	2302      	movs	r3, #2
 8000568:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800056a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f001 ff8e 	bl	8002494 <HAL_RCCEx_PeriphCLKConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800057e:	f000 f804 	bl	800058a <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	; 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <Error_Handler>:

void Error_Handler(void){
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058e:	b672      	cpsid	i
}
 8000590:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 8000592:	e7fe      	b.n	8000592 <Error_Handler+0x8>

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_MspInit+0x5c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <HAL_MspInit+0x5c>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_MspInit+0x5c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x5c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_MspInit+0x5c>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_MspInit+0x5c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_MspInit+0x60>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_MspInit+0x60>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010000 	.word	0x40010000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063e:	f000 f9c9 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <DMA1_Channel4_IRQHandler+0x10>)
 800064e:	f001 f86f 	bl	8001730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000104 	.word	0x20000104

0800065c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <ADC1_2_IRQHandler+0x10>)
 8000662:	f000 fc8f 	bl	8000f84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000084 	.word	0x20000084

08000670 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e00a      	b.n	8000698 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000682:	f3af 8000 	nop.w
 8000686:	4601      	mov	r1, r0
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	60ba      	str	r2, [r7, #8]
 800068e:	b2ca      	uxtb	r2, r1
 8000690:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	dbf0      	blt.n	8000682 <_read+0x12>
  }

  return len;
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e009      	b.n	80006d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fe1f 	bl	8000308 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbf1      	blt.n	80006bc <_write+0x12>
  }
  return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <_close>:

int _close(int file)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000708:	605a      	str	r2, [r3, #4]
  return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <_isatty>:

int _isatty(int file)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800072a:	b480      	push	{r7}
 800072c:	b085      	sub	sp, #20
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <_sbrk+0x5c>)
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <_sbrk+0x60>)
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <_sbrk+0x64>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <_sbrk+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000774:	f002 fb30 	bl	8002dd8 <__errno>
 8000778:	4603      	mov	r3, r0
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	e009      	b.n	8000798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <_sbrk+0x64>)
 8000794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20005000 	.word	0x20005000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	200000b8 	.word	0x200000b8
 80007ac:	20000298 	.word	0x20000298

080007b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART1_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f001 ffba 	bl	800276c <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f7ff fec4 	bl	800058a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000bc 	.word	0x200000bc
 800080c:	40013800 	.word	0x40013800

08000810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <HAL_UART_MspInit+0xd8>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d157      	bne.n	80008e0 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <HAL_UART_MspInit+0xdc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <HAL_UART_MspInit+0xdc>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <HAL_UART_MspInit+0xdc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <HAL_UART_MspInit+0xdc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a27      	ldr	r2, [pc, #156]	; (80008ec <HAL_UART_MspInit+0xdc>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <HAL_UART_MspInit+0xdc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	481e      	ldr	r0, [pc, #120]	; (80008f0 <HAL_UART_MspInit+0xe0>)
 8000876:	f001 f861 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4818      	ldr	r0, [pc, #96]	; (80008f0 <HAL_UART_MspInit+0xe0>)
 8000890:	f001 f854 	bl	800193c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0xe8>)
 8000898:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 800089c:	2210      	movs	r2, #16
 800089e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008c6:	f000 fed9 	bl	800167c <HAL_DMA_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80008d0:	f7ff fe5b 	bl	800058a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
 80008da:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_UART_MspInit+0xe4>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013800 	.word	0x40013800
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800
 80008f4:	20000104 	.word	0x20000104
 80008f8:	40020044 	.word	0x40020044

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff ff58 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 fa5d 	bl	8002de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fcff 	bl	800032c <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000938:	08003a4c 	.word	0x08003a4c
  ldr r2, =_sbss
 800093c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000940:	20000298 	.word	0x20000298

08000944 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <CAN1_RX1_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 fe4d 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fe16 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fe65 	bl	8001662 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 fe2d 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000148 	.word	0x20000148

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000148 	.word	0x20000148

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008

08000a54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0be      	b.n	8000bf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d109      	bne.n	8000a98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fbaa 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 fc97 	bl	80013cc <ADC_ConversionStop_Disable>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 8099 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8095 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac0:	f023 0302 	bic.w	r3, r3, #2
 8000ac4:	f043 0202 	orr.w	r2, r3, #2
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7b1b      	ldrb	r3, [r3, #12]
 8000ada:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000adc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aec:	d003      	beq.n	8000af6 <HAL_ADC_Init+0xa2>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d102      	bne.n	8000afc <HAL_ADC_Init+0xa8>
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	e000      	b.n	8000afe <HAL_ADC_Init+0xaa>
 8000afc:	2300      	movs	r3, #0
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7d1b      	ldrb	r3, [r3, #20]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d119      	bne.n	8000b40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7b1b      	ldrb	r3, [r3, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	035a      	lsls	r2, r3, #13
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	e00b      	b.n	8000b40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f043 0220 	orr.w	r2, r3, #32
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	f043 0201 	orr.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <HAL_ADC_Init+0x1a8>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b70:	d003      	beq.n	8000b7a <HAL_ADC_Init+0x126>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	051b      	lsls	r3, r3, #20
 8000b82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_ADC_Init+0x1ac>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb2:	f023 0303 	bic.w	r3, r3, #3
 8000bb6:	f043 0201 	orr.w	r2, r3, #1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbe:	e018      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f023 0312 	bic.w	r3, r3, #18
 8000bc8:	f043 0210 	orr.w	r2, r3, #16
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	f043 0201 	orr.w	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be0:	e007      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be6:	f043 0210 	orr.w	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	ffe1f7fd 	.word	0xffe1f7fd
 8000c00:	ff1f0efe 	.word	0xff1f0efe

08000c04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Start+0x1a>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e098      	b.n	8000d50 <HAL_ADC_Start+0x14c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 fb76 	bl	8001318 <ADC_Enable>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8087 	bne.w	8000d46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c40:	f023 0301 	bic.w	r3, r3, #1
 8000c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a41      	ldr	r2, [pc, #260]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d105      	bne.n	8000c62 <HAL_ADC_Start+0x5e>
 8000c56:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d115      	bne.n	8000c8e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d026      	beq.n	8000cca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c8c:	e01d      	b.n	8000cca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d004      	beq.n	8000cae <HAL_ADC_Start+0xaa>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_ADC_Start+0xc6>
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d007      	beq.n	8000cca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	f023 0206 	bic.w	r2, r3, #6
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ce2:	e002      	b.n	8000cea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f06f 0202 	mvn.w	r2, #2
 8000cfa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d0a:	d113      	bne.n	8000d34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d10:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d105      	bne.n	8000d22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d108      	bne.n	8000d34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	e00c      	b.n	8000d4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e003      	b.n	8000d4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40012800 	.word	0x40012800
 8000d5c:	40012400 	.word	0x40012400

08000d60 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d76:	f7ff fe3f 	bl	80009f8 <HAL_GetTick>
 8000d7a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00b      	beq.n	8000da2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	f043 0220 	orr.w	r2, r3, #32
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e0d3      	b.n	8000f4a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d131      	bne.n	8000e14 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d12a      	bne.n	8000e14 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dbe:	e021      	b.n	8000e04 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc6:	d01d      	beq.n	8000e04 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <HAL_ADC_PollForConversion+0x7e>
 8000dce:	f7ff fe13 	bl	80009f8 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d212      	bcs.n	8000e04 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10b      	bne.n	8000e04 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f043 0204 	orr.w	r2, r3, #4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e0a2      	b.n	8000f4a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0d6      	beq.n	8000dc0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e12:	e070      	b.n	8000ef6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e14:	4b4f      	ldr	r3, [pc, #316]	; (8000f54 <HAL_ADC_PollForConversion+0x1f4>)
 8000e16:	681c      	ldr	r4, [r3, #0]
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f001 fbf1 	bl	8002600 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6919      	ldr	r1, [r3, #16]
 8000e2a:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <HAL_ADC_PollForConversion+0x1f8>)
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d118      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x104>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68d9      	ldr	r1, [r3, #12]
 8000e38:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <HAL_ADC_PollForConversion+0x1fc>)
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d111      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x104>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6919      	ldr	r1, [r3, #16]
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_ADC_PollForConversion+0x200>)
 8000e48:	400b      	ands	r3, r1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d108      	bne.n	8000e60 <HAL_ADC_PollForConversion+0x100>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68d9      	ldr	r1, [r3, #12]
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_ADC_PollForConversion+0x204>)
 8000e56:	400b      	ands	r3, r1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_ADC_PollForConversion+0x100>
 8000e5c:	2314      	movs	r3, #20
 8000e5e:	e020      	b.n	8000ea2 <HAL_ADC_PollForConversion+0x142>
 8000e60:	2329      	movs	r3, #41	; 0x29
 8000e62:	e01e      	b.n	8000ea2 <HAL_ADC_PollForConversion+0x142>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6919      	ldr	r1, [r3, #16]
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_ADC_PollForConversion+0x200>)
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d106      	bne.n	8000e80 <HAL_ADC_PollForConversion+0x120>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68d9      	ldr	r1, [r3, #12]
 8000e78:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <HAL_ADC_PollForConversion+0x204>)
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00d      	beq.n	8000e9c <HAL_ADC_PollForConversion+0x13c>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6919      	ldr	r1, [r3, #16]
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <HAL_ADC_PollForConversion+0x208>)
 8000e88:	400b      	ands	r3, r1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d108      	bne.n	8000ea0 <HAL_ADC_PollForConversion+0x140>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68d9      	ldr	r1, [r3, #12]
 8000e94:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_ADC_PollForConversion+0x208>)
 8000e96:	400b      	ands	r3, r1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <HAL_ADC_PollForConversion+0x140>
 8000e9c:	2354      	movs	r3, #84	; 0x54
 8000e9e:	e000      	b.n	8000ea2 <HAL_ADC_PollForConversion+0x142>
 8000ea0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ea8:	e021      	b.n	8000eee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d01a      	beq.n	8000ee8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d007      	beq.n	8000ec8 <HAL_ADC_PollForConversion+0x168>
 8000eb8:	f7ff fd9e 	bl	80009f8 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d20f      	bcs.n	8000ee8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d90b      	bls.n	8000ee8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f043 0204 	orr.w	r2, r3, #4
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e030      	b.n	8000f4a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d8d9      	bhi.n	8000eaa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f06f 0212 	mvn.w	r2, #18
 8000efe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f1a:	d115      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000000 	.word	0x20000000
 8000f58:	24924924 	.word	0x24924924
 8000f5c:	00924924 	.word	0x00924924
 8000f60:	12492492 	.word	0x12492492
 8000f64:	00492492 	.word	0x00492492
 8000f68:	00249249 	.word	0x00249249

08000f6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d03e      	beq.n	8001024 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d039      	beq.n	8001024 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d105      	bne.n	8000fc8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fd6:	d11d      	bne.n	8001014 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d119      	bne.n	8001014 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0220 	bic.w	r2, r2, #32
 8000fee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d105      	bne.n	8001014 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f874 	bl	8001102 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f06f 0212 	mvn.w	r2, #18
 8001022:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102a:	2b00      	cmp	r3, #0
 800102c:	d04d      	beq.n	80010ca <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	d048      	beq.n	80010ca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001048:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800105a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800105e:	d012      	beq.n	8001086 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800106a:	2b00      	cmp	r3, #0
 800106c:	d125      	bne.n	80010ba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001078:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800107c:	d11d      	bne.n	80010ba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001082:	2b00      	cmp	r3, #0
 8001084:	d119      	bne.n	80010ba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001094:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f9c7 	bl	800144e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f06f 020c 	mvn.w	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d012      	beq.n	80010fa <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00d      	beq.n	80010fa <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f812 	bl	8001114 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f06f 0201 	mvn.w	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
	...

08001128 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x20>
 8001144:	2302      	movs	r3, #2
 8001146:	e0dc      	b.n	8001302 <HAL_ADC_ConfigChannel+0x1da>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b06      	cmp	r3, #6
 8001156:	d81c      	bhi.n	8001192 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b05      	subs	r3, #5
 800116a:	221f      	movs	r2, #31
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	4019      	ands	r1, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	3b05      	subs	r3, #5
 8001184:	fa00 f203 	lsl.w	r2, r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
 8001190:	e03c      	b.n	800120c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	d81c      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b23      	subs	r3, #35	; 0x23
 80011ac:	221f      	movs	r2, #31
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4019      	ands	r1, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b23      	subs	r3, #35	; 0x23
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
 80011d2:	e01b      	b.n	800120c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b41      	subs	r3, #65	; 0x41
 80011e6:	221f      	movs	r2, #31
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b41      	subs	r3, #65	; 0x41
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b09      	cmp	r3, #9
 8001212:	d91c      	bls.n	800124e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68d9      	ldr	r1, [r3, #12]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	3b1e      	subs	r3, #30
 8001226:	2207      	movs	r2, #7
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	4019      	ands	r1, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6898      	ldr	r0, [r3, #8]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	3b1e      	subs	r3, #30
 8001240:	fa00 f203 	lsl.w	r2, r0, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	e019      	b.n	8001282 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6919      	ldr	r1, [r3, #16]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	2207      	movs	r2, #7
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6898      	ldr	r0, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	fa00 f203 	lsl.w	r2, r0, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d003      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800128e:	2b11      	cmp	r3, #17
 8001290:	d132      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_ADC_ConfigChannel+0x1e4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d125      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d126      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d11a      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_ADC_ConfigChannel+0x1e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_ADC_ConfigChannel+0x1ec>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	0c9a      	lsrs	r2, r3, #18
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012d8:	e002      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3b01      	subs	r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <HAL_ADC_ConfigChannel+0x1b2>
 80012e6:	e007      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f043 0220 	orr.w	r2, r3, #32
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40012400 	.word	0x40012400
 8001310:	20000000 	.word	0x20000000
 8001314:	431bde83 	.word	0x431bde83

08001318 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b01      	cmp	r3, #1
 8001334:	d040      	beq.n	80013b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0201 	orr.w	r2, r2, #1
 8001344:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <ADC_Enable+0xac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <ADC_Enable+0xb0>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001354:	e002      	b.n	800135c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3b01      	subs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001362:	f7ff fb49 	bl	80009f8 <HAL_GetTick>
 8001366:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001368:	e01f      	b.n	80013aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800136a:	f7ff fb45 	bl	80009f8 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d918      	bls.n	80013aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b01      	cmp	r3, #1
 8001384:	d011      	beq.n	80013aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f043 0210 	orr.w	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e007      	b.n	80013ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d1d8      	bne.n	800136a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000
 80013c8:	431bde83 	.word	0x431bde83

080013cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d12e      	bne.n	8001444 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0201 	bic.w	r2, r2, #1
 80013f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013f6:	f7ff faff 	bl	80009f8 <HAL_GetTick>
 80013fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013fc:	e01b      	b.n	8001436 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013fe:	f7ff fafb 	bl	80009f8 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d914      	bls.n	8001436 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10d      	bne.n	8001436 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f043 0210 	orr.w	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e007      	b.n	8001446 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d0dc      	beq.n	80013fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <__NVIC_EnableIRQ+0x34>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff90 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff2d 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff42 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff35 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffa2 	bl	80015b4 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e043      	b.n	800171a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_DMA_Init+0xa8>)
 800169a:	4413      	add	r3, r2
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_DMA_Init+0xac>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	009a      	lsls	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a1f      	ldr	r2, [pc, #124]	; (800172c <HAL_DMA_Init+0xb0>)
 80016ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	bffdfff8 	.word	0xbffdfff8
 8001728:	cccccccd 	.word	0xcccccccd
 800172c:	40020000 	.word	0x40020000

08001730 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	2204      	movs	r2, #4
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d04f      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xc8>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d04a      	beq.n	80017f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0204 	bic.w	r2, r2, #4
 800177e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a66      	ldr	r2, [pc, #408]	; (8001920 <HAL_DMA_IRQHandler+0x1f0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d029      	beq.n	80017de <HAL_DMA_IRQHandler+0xae>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a65      	ldr	r2, [pc, #404]	; (8001924 <HAL_DMA_IRQHandler+0x1f4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d022      	beq.n	80017da <HAL_DMA_IRQHandler+0xaa>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a63      	ldr	r2, [pc, #396]	; (8001928 <HAL_DMA_IRQHandler+0x1f8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01a      	beq.n	80017d4 <HAL_DMA_IRQHandler+0xa4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a62      	ldr	r2, [pc, #392]	; (800192c <HAL_DMA_IRQHandler+0x1fc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d012      	beq.n	80017ce <HAL_DMA_IRQHandler+0x9e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a60      	ldr	r2, [pc, #384]	; (8001930 <HAL_DMA_IRQHandler+0x200>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00a      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x98>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a5f      	ldr	r2, [pc, #380]	; (8001934 <HAL_DMA_IRQHandler+0x204>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d102      	bne.n	80017c2 <HAL_DMA_IRQHandler+0x92>
 80017bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c0:	e00e      	b.n	80017e0 <HAL_DMA_IRQHandler+0xb0>
 80017c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017c6:	e00b      	b.n	80017e0 <HAL_DMA_IRQHandler+0xb0>
 80017c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017cc:	e008      	b.n	80017e0 <HAL_DMA_IRQHandler+0xb0>
 80017ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d2:	e005      	b.n	80017e0 <HAL_DMA_IRQHandler+0xb0>
 80017d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d8:	e002      	b.n	80017e0 <HAL_DMA_IRQHandler+0xb0>
 80017da:	2340      	movs	r3, #64	; 0x40
 80017dc:	e000      	b.n	80017e0 <HAL_DMA_IRQHandler+0xb0>
 80017de:	2304      	movs	r3, #4
 80017e0:	4a55      	ldr	r2, [pc, #340]	; (8001938 <HAL_DMA_IRQHandler+0x208>)
 80017e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 8094 	beq.w	8001916 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017f6:	e08e      	b.n	8001916 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2202      	movs	r2, #2
 80017fe:	409a      	lsls	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d056      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x186>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d051      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10b      	bne.n	8001838 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 020a 	bic.w	r2, r2, #10
 800182e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a38      	ldr	r2, [pc, #224]	; (8001920 <HAL_DMA_IRQHandler+0x1f0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d029      	beq.n	8001896 <HAL_DMA_IRQHandler+0x166>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a37      	ldr	r2, [pc, #220]	; (8001924 <HAL_DMA_IRQHandler+0x1f4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d022      	beq.n	8001892 <HAL_DMA_IRQHandler+0x162>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a35      	ldr	r2, [pc, #212]	; (8001928 <HAL_DMA_IRQHandler+0x1f8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01a      	beq.n	800188c <HAL_DMA_IRQHandler+0x15c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_DMA_IRQHandler+0x1fc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d012      	beq.n	8001886 <HAL_DMA_IRQHandler+0x156>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a32      	ldr	r2, [pc, #200]	; (8001930 <HAL_DMA_IRQHandler+0x200>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00a      	beq.n	8001880 <HAL_DMA_IRQHandler+0x150>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_DMA_IRQHandler+0x204>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d102      	bne.n	800187a <HAL_DMA_IRQHandler+0x14a>
 8001874:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001878:	e00e      	b.n	8001898 <HAL_DMA_IRQHandler+0x168>
 800187a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800187e:	e00b      	b.n	8001898 <HAL_DMA_IRQHandler+0x168>
 8001880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001884:	e008      	b.n	8001898 <HAL_DMA_IRQHandler+0x168>
 8001886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188a:	e005      	b.n	8001898 <HAL_DMA_IRQHandler+0x168>
 800188c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001890:	e002      	b.n	8001898 <HAL_DMA_IRQHandler+0x168>
 8001892:	2320      	movs	r3, #32
 8001894:	e000      	b.n	8001898 <HAL_DMA_IRQHandler+0x168>
 8001896:	2302      	movs	r3, #2
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <HAL_DMA_IRQHandler+0x208>)
 800189a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d034      	beq.n	8001916 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018b4:	e02f      	b.n	8001916 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	2208      	movs	r2, #8
 80018bc:	409a      	lsls	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d028      	beq.n	8001918 <HAL_DMA_IRQHandler+0x1e8>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d023      	beq.n	8001918 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 020e 	bic.w	r2, r2, #14
 80018de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
    }
  }
  return;
 8001916:	bf00      	nop
 8001918:	bf00      	nop
}
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020008 	.word	0x40020008
 8001924:	4002001c 	.word	0x4002001c
 8001928:	40020030 	.word	0x40020030
 800192c:	40020044 	.word	0x40020044
 8001930:	40020058 	.word	0x40020058
 8001934:	4002006c 	.word	0x4002006c
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b08b      	sub	sp, #44	; 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e169      	b.n	8001c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001950:	2201      	movs	r2, #1
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 8158 	bne.w	8001c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a9a      	ldr	r2, [pc, #616]	; (8001bdc <HAL_GPIO_Init+0x2a0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d05e      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001978:	4a98      	ldr	r2, [pc, #608]	; (8001bdc <HAL_GPIO_Init+0x2a0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d875      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800197e:	4a98      	ldr	r2, [pc, #608]	; (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d058      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001984:	4a96      	ldr	r2, [pc, #600]	; (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d86f      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800198a:	4a96      	ldr	r2, [pc, #600]	; (8001be4 <HAL_GPIO_Init+0x2a8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d052      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001990:	4a94      	ldr	r2, [pc, #592]	; (8001be4 <HAL_GPIO_Init+0x2a8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d869      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 8001996:	4a94      	ldr	r2, [pc, #592]	; (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04c      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 800199c:	4a92      	ldr	r2, [pc, #584]	; (8001be8 <HAL_GPIO_Init+0x2ac>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d863      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019a2:	4a92      	ldr	r2, [pc, #584]	; (8001bec <HAL_GPIO_Init+0x2b0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d046      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 80019a8:	4a90      	ldr	r2, [pc, #576]	; (8001bec <HAL_GPIO_Init+0x2b0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d85d      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d82a      	bhi.n	8001a08 <HAL_GPIO_Init+0xcc>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d859      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <HAL_GPIO_Init+0x80>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a23 	.word	0x08001a23
 80019c8:	08001a65 	.word	0x08001a65
 80019cc:	08001a6b 	.word	0x08001a6b
 80019d0:	08001a6b 	.word	0x08001a6b
 80019d4:	08001a6b 	.word	0x08001a6b
 80019d8:	08001a6b 	.word	0x08001a6b
 80019dc:	08001a6b 	.word	0x08001a6b
 80019e0:	08001a6b 	.word	0x08001a6b
 80019e4:	08001a6b 	.word	0x08001a6b
 80019e8:	08001a6b 	.word	0x08001a6b
 80019ec:	08001a6b 	.word	0x08001a6b
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a6b 	.word	0x08001a6b
 80019f8:	08001a6b 	.word	0x08001a6b
 80019fc:	08001a6b 	.word	0x08001a6b
 8001a00:	08001a19 	.word	0x08001a19
 8001a04:	08001a2d 	.word	0x08001a2d
 8001a08:	4a79      	ldr	r2, [pc, #484]	; (8001bf0 <HAL_GPIO_Init+0x2b4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0e:	e02c      	b.n	8001a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e029      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e024      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	3308      	adds	r3, #8
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e01f      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	330c      	adds	r3, #12
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e01a      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e013      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	611a      	str	r2, [r3, #16]
          break;
 8001a56:	e009      	b.n	8001a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	615a      	str	r2, [r3, #20]
          break;
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          break;
 8001a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	; 0xff
 8001a70:	d801      	bhi.n	8001a76 <HAL_GPIO_Init+0x13a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_Init+0x13e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	; 0xff
 8001a80:	d802      	bhi.n	8001a88 <HAL_GPIO_Init+0x14c>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x152>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	3b08      	subs	r3, #8
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	210f      	movs	r1, #15
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	6a39      	ldr	r1, [r7, #32]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80b1 	beq.w	8001c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001abc:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	; (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a40      	ldr	r2, [pc, #256]	; (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_GPIO_Init+0x1ec>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3f      	ldr	r2, [pc, #252]	; (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_GPIO_Init+0x1e8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3e      	ldr	r2, [pc, #248]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x1e4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3d      	ldr	r2, [pc, #244]	; (8001c08 <HAL_GPIO_Init+0x2cc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3a:	492f      	ldr	r1, [pc, #188]	; (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	492c      	ldr	r1, [pc, #176]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4928      	ldr	r1, [pc, #160]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4922      	ldr	r1, [pc, #136]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	491e      	ldr	r1, [pc, #120]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4918      	ldr	r1, [pc, #96]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4914      	ldr	r1, [pc, #80]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d021      	beq.n	8001c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	490e      	ldr	r1, [pc, #56]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e021      	b.n	8001c1e <HAL_GPIO_Init+0x2e2>
 8001bda:	bf00      	nop
 8001bdc:	10320000 	.word	0x10320000
 8001be0:	10310000 	.word	0x10310000
 8001be4:	10220000 	.word	0x10220000
 8001be8:	10210000 	.word	0x10210000
 8001bec:	10120000 	.word	0x10120000
 8001bf0:	10110000 	.word	0x10110000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40011400 	.word	0x40011400
 8001c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4909      	ldr	r1, [pc, #36]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	3301      	adds	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f ae8e 	bne.w	8001950 <HAL_GPIO_Init+0x14>
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	372c      	adds	r7, #44	; 0x2c
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40010400 	.word	0x40010400

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e272      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8087 	beq.w	8001da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d00c      	beq.n	8001cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca0:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d112      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
 8001cac:	4b8c      	ldr	r3, [pc, #560]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x12c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d168      	bne.n	8001da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e24c      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x76>
 8001cdc:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a7f      	ldr	r2, [pc, #508]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e02e      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x98>
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7a      	ldr	r2, [pc, #488]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a77      	ldr	r2, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0xbc>
 8001d16:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a71      	ldr	r2, [pc, #452]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d30:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6a      	ldr	r2, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a67      	ldr	r2, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe fe52 	bl	80009f8 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7fe fe4e 	bl	80009f8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e200      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe4>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe3e 	bl	80009f8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7fe fe3a 	bl	80009f8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1ec      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x10c>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1c0      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4939      	ldr	r1, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe fdf3 	bl	80009f8 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7fe fdef 	bl	80009f8 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1a1      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4927      	ldr	r1, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7fe fdd2 	bl	80009f8 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7fe fdce 	bl	80009f8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e180      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03a      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d019      	beq.n	8001ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7fe fdb2 	bl	80009f8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7fe fdae 	bl	80009f8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e160      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f000 face 	bl	8002458 <RCC_Delay>
 8001ebc:	e01c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fd98 	bl	80009f8 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7fe fd94 	bl	80009f8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e146      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	42420000 	.word	0x42420000
 8001ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b92      	ldr	r3, [pc, #584]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e9      	bne.n	8001ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a6 	beq.w	8002052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a87      	ldr	r2, [pc, #540]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b85      	ldr	r3, [pc, #532]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b82      	ldr	r3, [pc, #520]	; (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b7f      	ldr	r3, [pc, #508]	; (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a7e      	ldr	r2, [pc, #504]	; (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7fe fd55 	bl	80009f8 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7fe fd51 	bl	80009f8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e103      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b75      	ldr	r3, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x4c8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x312>
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a6e      	ldr	r2, [pc, #440]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	e02d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x334>
 8001f8e:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a69      	ldr	r2, [pc, #420]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a66      	ldr	r2, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	e01c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x356>
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a60      	ldr	r2, [pc, #384]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d015      	beq.n	8002016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fd05 	bl	80009f8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe fd01 	bl	80009f8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0b1      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ee      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x37e>
 8002014:	e014      	b.n	8002040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe fcef 	bl	80009f8 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7fe fceb 	bl	80009f8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e09b      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4b40      	ldr	r3, [pc, #256]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8087 	beq.w	800216a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d061      	beq.n	800212c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d146      	bne.n	80020fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe fcbf 	bl	80009f8 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7fe fcbb 	bl	80009f8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e06d      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4921      	ldr	r1, [pc, #132]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a19      	ldr	r1, [r3, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	430b      	orrs	r3, r1
 80020ca:	491b      	ldr	r1, [pc, #108]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x4cc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7fe fc8f 	bl	80009f8 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7fe fc8b 	bl	80009f8 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e03d      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x46a>
 80020fc:	e035      	b.n	800216a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_RCC_OscConfig+0x4cc>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe fc78 	bl	80009f8 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe fc74 	bl	80009f8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e026      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x498>
 800212a:	e01e      	b.n	800216a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e019      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
 8002140:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_OscConfig+0x500>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	429a      	cmp	r2, r3
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0d0      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d910      	bls.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4965      	ldr	r1, [pc, #404]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0b8      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a52      	ldr	r2, [pc, #328]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	494d      	ldr	r1, [pc, #308]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d040      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d115      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e07f      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e073      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4936      	ldr	r1, [pc, #216]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7fe fbc6 	bl	80009f8 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7fe fbc2 	bl	80009f8 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e053      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d210      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	4922      	ldr	r1, [pc, #136]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e032      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4916      	ldr	r1, [pc, #88]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002306:	f000 f821 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800230a:	4602      	mov	r2, r0
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	490a      	ldr	r1, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	5ccb      	ldrb	r3, [r1, r3]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1cc>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fb24 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000
 800233c:	40021000 	.word	0x40021000
 8002340:	080039d0 	.word	0x080039d0
 8002344:	20000000 	.word	0x20000000
 8002348:	20000004 	.word	0x20000004

0800234c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002366:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d002      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x30>
 8002376:	2b08      	cmp	r3, #8
 8002378:	d003      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x36>
 800237a:	e027      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800237e:	613b      	str	r3, [r7, #16]
      break;
 8002380:	e027      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0c5b      	lsrs	r3, r3, #17
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ae:	fb03 f202 	mul.w	r2, r3, r2
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e004      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	613b      	str	r3, [r7, #16]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d2:	693b      	ldr	r3, [r7, #16]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	007a1200 	.word	0x007a1200
 80023e8:	080039e8 	.word	0x080039e8
 80023ec:	080039f8 	.word	0x080039f8
 80023f0:	003d0900 	.word	0x003d0900

080023f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <HAL_RCC_GetHCLKFreq+0x10>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	20000000 	.word	0x20000000

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800240c:	f7ff fff2 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	080039e0 	.word	0x080039e0

08002430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002434:	f7ff ffde 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	0adb      	lsrs	r3, r3, #11
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	080039e0 	.word	0x080039e0

08002458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <RCC_Delay+0x34>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <RCC_Delay+0x38>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0a5b      	lsrs	r3, r3, #9
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002474:	bf00      	nop
  }
  while (Delay --);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	60fa      	str	r2, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f9      	bne.n	8002474 <RCC_Delay+0x1c>
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	20000000 	.word	0x20000000
 8002490:	10624dd3 	.word	0x10624dd3

08002494 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d07d      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b4:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	4a4b      	ldr	r2, [pc, #300]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	61d3      	str	r3, [r2, #28]
 80024cc:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d118      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a42      	ldr	r2, [pc, #264]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fa80 	bl	80009f8 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	e008      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fc:	f7fe fa7c 	bl	80009f8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e06d      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800251a:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002522:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d02e      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	429a      	cmp	r2, r3
 8002536:	d027      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002540:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002542:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002548:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800254e:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d014      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fa4b 	bl	80009f8 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fa47 	bl	80009f8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e036      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002588:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4917      	ldr	r1, [pc, #92]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002596:	4313      	orrs	r3, r2
 8002598:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	490b      	ldr	r1, [pc, #44]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4904      	ldr	r1, [pc, #16]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42420440 	.word	0x42420440

08002600 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b10      	cmp	r3, #16
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b10      	cmp	r3, #16
 8002626:	f200 808a 	bhi.w	800273e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d045      	beq.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d075      	beq.n	8002722 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002636:	e082      	b.n	800273e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800263e:	4b45      	ldr	r3, [pc, #276]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d07b      	beq.n	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a41      	ldr	r2, [pc, #260]	; (8002758 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d015      	beq.n	800268e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0c5b      	lsrs	r3, r3, #17
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	4a3b      	ldr	r2, [pc, #236]	; (800275c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800267c:	4a38      	ldr	r2, [pc, #224]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fbb2 f2f3 	udiv	r2, r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	e004      	b.n	8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4a34      	ldr	r2, [pc, #208]	; (8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a4:	d102      	bne.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	61bb      	str	r3, [r7, #24]
      break;
 80026aa:	e04a      	b.n	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
      break;
 80026ba:	e042      	b.n	8002742 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026cc:	d108      	bne.n	80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80026d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e01f      	b.n	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ea:	d109      	bne.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80026f8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	e00f      	b.n	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800270a:	d11c      	bne.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d016      	beq.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002718:	f24f 4324 	movw	r3, #62500	; 0xf424
 800271c:	61bb      	str	r3, [r7, #24]
      break;
 800271e:	e012      	b.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002720:	e011      	b.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002722:	f7ff fe85 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0b9b      	lsrs	r3, r3, #14
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	3301      	adds	r3, #1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	61bb      	str	r3, [r7, #24]
      break;
 800273c:	e004      	b.n	8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002746:	bf00      	nop
    }
  }
  return (frequency);
 8002748:	69bb      	ldr	r3, [r7, #24]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	080039fc 	.word	0x080039fc
 800275c:	08003a0c 	.word	0x08003a0c
 8002760:	007a1200 	.word	0x007a1200
 8002764:	003d0900 	.word	0x003d0900
 8002768:	aaaaaaab 	.word	0xaaaaaaab

0800276c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e042      	b.n	8002804 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe f83c 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2224      	movs	r2, #36	; 0x24
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f91d 	bl	80029f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b20      	cmp	r3, #32
 800282a:	d16d      	bne.n	8002908 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_UART_Transmit+0x2c>
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e066      	b.n	800290a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2221      	movs	r2, #33	; 0x21
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800284a:	f7fe f8d5 	bl	80009f8 <HAL_GetTick>
 800284e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	88fa      	ldrh	r2, [r7, #6]
 8002854:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002864:	d108      	bne.n	8002878 <HAL_UART_Transmit+0x6c>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d104      	bne.n	8002878 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	e003      	b.n	8002880 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002880:	e02a      	b.n	80028d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f840 	bl	8002912 <UART_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e036      	b.n	800290a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10b      	bne.n	80028ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	3302      	adds	r3, #2
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	e007      	b.n	80028ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	3301      	adds	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1cf      	bne.n	8002882 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	2140      	movs	r1, #64	; 0x40
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f810 	bl	8002912 <UART_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e006      	b.n	800290a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b090      	sub	sp, #64	; 0x40
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002922:	e050      	b.n	80029c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d04c      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800292c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <UART_WaitOnFlagUntilTimeout+0x30>
 8002932:	f7fe f861 	bl	80009f8 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800293e:	429a      	cmp	r2, r3
 8002940:	d241      	bcs.n	80029c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002962:	637a      	str	r2, [r7, #52]	; 0x34
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e5      	bne.n	8002942 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3314      	adds	r3, #20
 800297c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	613b      	str	r3, [r7, #16]
   return(result);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3314      	adds	r3, #20
 8002994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002996:	623a      	str	r2, [r7, #32]
 8002998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	69f9      	ldr	r1, [r7, #28]
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e5      	bne.n	8002976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e00f      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d09f      	beq.n	8002924 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3740      	adds	r7, #64	; 0x40
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a2a:	f023 030c 	bic.w	r3, r3, #12
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <UART_SetConfig+0x114>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a58:	f7ff fcea 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	e002      	b.n	8002a66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a60:	f7ff fcd2 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8002a64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009a      	lsls	r2, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <UART_SetConfig+0x118>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	0119      	lsls	r1, r3, #4
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009a      	lsls	r2, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <UART_SetConfig+0x118>)
 8002a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2064      	movs	r0, #100	; 0x64
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <UART_SetConfig+0x118>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002abc:	4419      	add	r1, r3
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	441a      	add	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <UART_SetConfig+0x118>)
 8002ad6:	fba3 0302 	umull	r0, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2064      	movs	r0, #100	; 0x64
 8002ade:	fb00 f303 	mul.w	r3, r0, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	3332      	adds	r3, #50	; 0x32
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <UART_SetConfig+0x118>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	440a      	add	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40013800 	.word	0x40013800
 8002b08:	51eb851f 	.word	0x51eb851f

08002b0c <std>:
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	b510      	push	{r4, lr}
 8002b10:	4604      	mov	r4, r0
 8002b12:	e9c0 3300 	strd	r3, r3, [r0]
 8002b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b1a:	6083      	str	r3, [r0, #8]
 8002b1c:	8181      	strh	r1, [r0, #12]
 8002b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8002b20:	81c2      	strh	r2, [r0, #14]
 8002b22:	6183      	str	r3, [r0, #24]
 8002b24:	4619      	mov	r1, r3
 8002b26:	2208      	movs	r2, #8
 8002b28:	305c      	adds	r0, #92	; 0x5c
 8002b2a:	f000 f906 	bl	8002d3a <memset>
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <std+0x58>)
 8002b30:	6224      	str	r4, [r4, #32]
 8002b32:	6263      	str	r3, [r4, #36]	; 0x24
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <std+0x5c>)
 8002b36:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <std+0x60>)
 8002b3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <std+0x64>)
 8002b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <std+0x68>)
 8002b42:	429c      	cmp	r4, r3
 8002b44:	d006      	beq.n	8002b54 <std+0x48>
 8002b46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002b4a:	4294      	cmp	r4, r2
 8002b4c:	d002      	beq.n	8002b54 <std+0x48>
 8002b4e:	33d0      	adds	r3, #208	; 0xd0
 8002b50:	429c      	cmp	r4, r3
 8002b52:	d105      	bne.n	8002b60 <std+0x54>
 8002b54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b5c:	f000 b966 	b.w	8002e2c <__retarget_lock_init_recursive>
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	bf00      	nop
 8002b64:	08002cb5 	.word	0x08002cb5
 8002b68:	08002cd7 	.word	0x08002cd7
 8002b6c:	08002d0f 	.word	0x08002d0f
 8002b70:	08002d33 	.word	0x08002d33
 8002b74:	2000014c 	.word	0x2000014c

08002b78 <stdio_exit_handler>:
 8002b78:	4a02      	ldr	r2, [pc, #8]	; (8002b84 <stdio_exit_handler+0xc>)
 8002b7a:	4903      	ldr	r1, [pc, #12]	; (8002b88 <stdio_exit_handler+0x10>)
 8002b7c:	4803      	ldr	r0, [pc, #12]	; (8002b8c <stdio_exit_handler+0x14>)
 8002b7e:	f000 b869 	b.w	8002c54 <_fwalk_sglue>
 8002b82:	bf00      	nop
 8002b84:	2000000c 	.word	0x2000000c
 8002b88:	080036cd 	.word	0x080036cd
 8002b8c:	20000018 	.word	0x20000018

08002b90 <cleanup_stdio>:
 8002b90:	6841      	ldr	r1, [r0, #4]
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <cleanup_stdio+0x34>)
 8002b94:	b510      	push	{r4, lr}
 8002b96:	4299      	cmp	r1, r3
 8002b98:	4604      	mov	r4, r0
 8002b9a:	d001      	beq.n	8002ba0 <cleanup_stdio+0x10>
 8002b9c:	f000 fd96 	bl	80036cc <_fflush_r>
 8002ba0:	68a1      	ldr	r1, [r4, #8]
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <cleanup_stdio+0x38>)
 8002ba4:	4299      	cmp	r1, r3
 8002ba6:	d002      	beq.n	8002bae <cleanup_stdio+0x1e>
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f000 fd8f 	bl	80036cc <_fflush_r>
 8002bae:	68e1      	ldr	r1, [r4, #12]
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <cleanup_stdio+0x3c>)
 8002bb2:	4299      	cmp	r1, r3
 8002bb4:	d004      	beq.n	8002bc0 <cleanup_stdio+0x30>
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bbc:	f000 bd86 	b.w	80036cc <_fflush_r>
 8002bc0:	bd10      	pop	{r4, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000014c 	.word	0x2000014c
 8002bc8:	200001b4 	.word	0x200001b4
 8002bcc:	2000021c 	.word	0x2000021c

08002bd0 <global_stdio_init.part.0>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <global_stdio_init.part.0+0x30>)
 8002bd4:	4c0b      	ldr	r4, [pc, #44]	; (8002c04 <global_stdio_init.part.0+0x34>)
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <global_stdio_init.part.0+0x38>)
 8002bd8:	4620      	mov	r0, r4
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	2104      	movs	r1, #4
 8002bde:	2200      	movs	r2, #0
 8002be0:	f7ff ff94 	bl	8002b0c <std>
 8002be4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002be8:	2201      	movs	r2, #1
 8002bea:	2109      	movs	r1, #9
 8002bec:	f7ff ff8e 	bl	8002b0c <std>
 8002bf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bfa:	2112      	movs	r1, #18
 8002bfc:	f7ff bf86 	b.w	8002b0c <std>
 8002c00:	20000284 	.word	0x20000284
 8002c04:	2000014c 	.word	0x2000014c
 8002c08:	08002b79 	.word	0x08002b79

08002c0c <__sfp_lock_acquire>:
 8002c0c:	4801      	ldr	r0, [pc, #4]	; (8002c14 <__sfp_lock_acquire+0x8>)
 8002c0e:	f000 b90e 	b.w	8002e2e <__retarget_lock_acquire_recursive>
 8002c12:	bf00      	nop
 8002c14:	2000028d 	.word	0x2000028d

08002c18 <__sfp_lock_release>:
 8002c18:	4801      	ldr	r0, [pc, #4]	; (8002c20 <__sfp_lock_release+0x8>)
 8002c1a:	f000 b909 	b.w	8002e30 <__retarget_lock_release_recursive>
 8002c1e:	bf00      	nop
 8002c20:	2000028d 	.word	0x2000028d

08002c24 <__sinit>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4604      	mov	r4, r0
 8002c28:	f7ff fff0 	bl	8002c0c <__sfp_lock_acquire>
 8002c2c:	6a23      	ldr	r3, [r4, #32]
 8002c2e:	b11b      	cbz	r3, 8002c38 <__sinit+0x14>
 8002c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c34:	f7ff bff0 	b.w	8002c18 <__sfp_lock_release>
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <__sinit+0x28>)
 8002c3a:	6223      	str	r3, [r4, #32]
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <__sinit+0x2c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f5      	bne.n	8002c30 <__sinit+0xc>
 8002c44:	f7ff ffc4 	bl	8002bd0 <global_stdio_init.part.0>
 8002c48:	e7f2      	b.n	8002c30 <__sinit+0xc>
 8002c4a:	bf00      	nop
 8002c4c:	08002b91 	.word	0x08002b91
 8002c50:	20000284 	.word	0x20000284

08002c54 <_fwalk_sglue>:
 8002c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c58:	4607      	mov	r7, r0
 8002c5a:	4688      	mov	r8, r1
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	2600      	movs	r6, #0
 8002c60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c64:	f1b9 0901 	subs.w	r9, r9, #1
 8002c68:	d505      	bpl.n	8002c76 <_fwalk_sglue+0x22>
 8002c6a:	6824      	ldr	r4, [r4, #0]
 8002c6c:	2c00      	cmp	r4, #0
 8002c6e:	d1f7      	bne.n	8002c60 <_fwalk_sglue+0xc>
 8002c70:	4630      	mov	r0, r6
 8002c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c76:	89ab      	ldrh	r3, [r5, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d907      	bls.n	8002c8c <_fwalk_sglue+0x38>
 8002c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c80:	3301      	adds	r3, #1
 8002c82:	d003      	beq.n	8002c8c <_fwalk_sglue+0x38>
 8002c84:	4629      	mov	r1, r5
 8002c86:	4638      	mov	r0, r7
 8002c88:	47c0      	blx	r8
 8002c8a:	4306      	orrs	r6, r0
 8002c8c:	3568      	adds	r5, #104	; 0x68
 8002c8e:	e7e9      	b.n	8002c64 <_fwalk_sglue+0x10>

08002c90 <iprintf>:
 8002c90:	b40f      	push	{r0, r1, r2, r3}
 8002c92:	b507      	push	{r0, r1, r2, lr}
 8002c94:	4906      	ldr	r1, [pc, #24]	; (8002cb0 <iprintf+0x20>)
 8002c96:	ab04      	add	r3, sp, #16
 8002c98:	6808      	ldr	r0, [r1, #0]
 8002c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c9e:	6881      	ldr	r1, [r0, #8]
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	f000 f9e3 	bl	800306c <_vfiprintf_r>
 8002ca6:	b003      	add	sp, #12
 8002ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cac:	b004      	add	sp, #16
 8002cae:	4770      	bx	lr
 8002cb0:	20000064 	.word	0x20000064

08002cb4 <__sread>:
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cbc:	f000 f868 	bl	8002d90 <_read_r>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	bfab      	itete	ge
 8002cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8002cc8:	181b      	addge	r3, r3, r0
 8002cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cce:	bfac      	ite	ge
 8002cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002cd2:	81a3      	strhlt	r3, [r4, #12]
 8002cd4:	bd10      	pop	{r4, pc}

08002cd6 <__swrite>:
 8002cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cda:	461f      	mov	r7, r3
 8002cdc:	898b      	ldrh	r3, [r1, #12]
 8002cde:	4605      	mov	r5, r0
 8002ce0:	05db      	lsls	r3, r3, #23
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	4616      	mov	r6, r2
 8002ce6:	d505      	bpl.n	8002cf4 <__swrite+0x1e>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	2200      	movs	r2, #0
 8002cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf0:	f000 f83c 	bl	8002d6c <_lseek_r>
 8002cf4:	89a3      	ldrh	r3, [r4, #12]
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cfc:	81a3      	strh	r3, [r4, #12]
 8002cfe:	4628      	mov	r0, r5
 8002d00:	463b      	mov	r3, r7
 8002d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0a:	f000 b853 	b.w	8002db4 <_write_r>

08002d0e <__sseek>:
 8002d0e:	b510      	push	{r4, lr}
 8002d10:	460c      	mov	r4, r1
 8002d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d16:	f000 f829 	bl	8002d6c <_lseek_r>
 8002d1a:	1c43      	adds	r3, r0, #1
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	bf15      	itete	ne
 8002d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d2a:	81a3      	strheq	r3, [r4, #12]
 8002d2c:	bf18      	it	ne
 8002d2e:	81a3      	strhne	r3, [r4, #12]
 8002d30:	bd10      	pop	{r4, pc}

08002d32 <__sclose>:
 8002d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d36:	f000 b809 	b.w	8002d4c <_close_r>

08002d3a <memset>:
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4402      	add	r2, r0
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d100      	bne.n	8002d44 <memset+0xa>
 8002d42:	4770      	bx	lr
 8002d44:	f803 1b01 	strb.w	r1, [r3], #1
 8002d48:	e7f9      	b.n	8002d3e <memset+0x4>
	...

08002d4c <_close_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4d05      	ldr	r5, [pc, #20]	; (8002d68 <_close_r+0x1c>)
 8002d52:	4604      	mov	r4, r0
 8002d54:	4608      	mov	r0, r1
 8002d56:	602b      	str	r3, [r5, #0]
 8002d58:	f7fd fcc3 	bl	80006e2 <_close>
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d102      	bne.n	8002d66 <_close_r+0x1a>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	b103      	cbz	r3, 8002d66 <_close_r+0x1a>
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
 8002d68:	20000288 	.word	0x20000288

08002d6c <_lseek_r>:
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	4604      	mov	r4, r0
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	2200      	movs	r2, #0
 8002d76:	4d05      	ldr	r5, [pc, #20]	; (8002d8c <_lseek_r+0x20>)
 8002d78:	602a      	str	r2, [r5, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f7fd fcd5 	bl	800072a <_lseek>
 8002d80:	1c43      	adds	r3, r0, #1
 8002d82:	d102      	bne.n	8002d8a <_lseek_r+0x1e>
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	b103      	cbz	r3, 8002d8a <_lseek_r+0x1e>
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
 8002d8c:	20000288 	.word	0x20000288

08002d90 <_read_r>:
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	4604      	mov	r4, r0
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4d05      	ldr	r5, [pc, #20]	; (8002db0 <_read_r+0x20>)
 8002d9c:	602a      	str	r2, [r5, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f7fd fc66 	bl	8000670 <_read>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_read_r+0x1e>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_read_r+0x1e>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	20000288 	.word	0x20000288

08002db4 <_write_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4604      	mov	r4, r0
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4d05      	ldr	r5, [pc, #20]	; (8002dd4 <_write_r+0x20>)
 8002dc0:	602a      	str	r2, [r5, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f7fd fc71 	bl	80006aa <_write>
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d102      	bne.n	8002dd2 <_write_r+0x1e>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	b103      	cbz	r3, 8002dd2 <_write_r+0x1e>
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	bd38      	pop	{r3, r4, r5, pc}
 8002dd4:	20000288 	.word	0x20000288

08002dd8 <__errno>:
 8002dd8:	4b01      	ldr	r3, [pc, #4]	; (8002de0 <__errno+0x8>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000064 	.word	0x20000064

08002de4 <__libc_init_array>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	2600      	movs	r6, #0
 8002de8:	4d0c      	ldr	r5, [pc, #48]	; (8002e1c <__libc_init_array+0x38>)
 8002dea:	4c0d      	ldr	r4, [pc, #52]	; (8002e20 <__libc_init_array+0x3c>)
 8002dec:	1b64      	subs	r4, r4, r5
 8002dee:	10a4      	asrs	r4, r4, #2
 8002df0:	42a6      	cmp	r6, r4
 8002df2:	d109      	bne.n	8002e08 <__libc_init_array+0x24>
 8002df4:	f000 fdca 	bl	800398c <_init>
 8002df8:	2600      	movs	r6, #0
 8002dfa:	4d0a      	ldr	r5, [pc, #40]	; (8002e24 <__libc_init_array+0x40>)
 8002dfc:	4c0a      	ldr	r4, [pc, #40]	; (8002e28 <__libc_init_array+0x44>)
 8002dfe:	1b64      	subs	r4, r4, r5
 8002e00:	10a4      	asrs	r4, r4, #2
 8002e02:	42a6      	cmp	r6, r4
 8002e04:	d105      	bne.n	8002e12 <__libc_init_array+0x2e>
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
 8002e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0c:	4798      	blx	r3
 8002e0e:	3601      	adds	r6, #1
 8002e10:	e7ee      	b.n	8002df0 <__libc_init_array+0xc>
 8002e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e16:	4798      	blx	r3
 8002e18:	3601      	adds	r6, #1
 8002e1a:	e7f2      	b.n	8002e02 <__libc_init_array+0x1e>
 8002e1c:	08003a44 	.word	0x08003a44
 8002e20:	08003a44 	.word	0x08003a44
 8002e24:	08003a44 	.word	0x08003a44
 8002e28:	08003a48 	.word	0x08003a48

08002e2c <__retarget_lock_init_recursive>:
 8002e2c:	4770      	bx	lr

08002e2e <__retarget_lock_acquire_recursive>:
 8002e2e:	4770      	bx	lr

08002e30 <__retarget_lock_release_recursive>:
 8002e30:	4770      	bx	lr
	...

08002e34 <_free_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	4605      	mov	r5, r0
 8002e38:	2900      	cmp	r1, #0
 8002e3a:	d040      	beq.n	8002ebe <_free_r+0x8a>
 8002e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e40:	1f0c      	subs	r4, r1, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bfb8      	it	lt
 8002e46:	18e4      	addlt	r4, r4, r3
 8002e48:	f000 f8dc 	bl	8003004 <__malloc_lock>
 8002e4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <_free_r+0x8c>)
 8002e4e:	6813      	ldr	r3, [r2, #0]
 8002e50:	b933      	cbnz	r3, 8002e60 <_free_r+0x2c>
 8002e52:	6063      	str	r3, [r4, #4]
 8002e54:	6014      	str	r4, [r2, #0]
 8002e56:	4628      	mov	r0, r5
 8002e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e5c:	f000 b8d8 	b.w	8003010 <__malloc_unlock>
 8002e60:	42a3      	cmp	r3, r4
 8002e62:	d908      	bls.n	8002e76 <_free_r+0x42>
 8002e64:	6820      	ldr	r0, [r4, #0]
 8002e66:	1821      	adds	r1, r4, r0
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	bf01      	itttt	eq
 8002e6c:	6819      	ldreq	r1, [r3, #0]
 8002e6e:	685b      	ldreq	r3, [r3, #4]
 8002e70:	1809      	addeq	r1, r1, r0
 8002e72:	6021      	streq	r1, [r4, #0]
 8002e74:	e7ed      	b.n	8002e52 <_free_r+0x1e>
 8002e76:	461a      	mov	r2, r3
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	b10b      	cbz	r3, 8002e80 <_free_r+0x4c>
 8002e7c:	42a3      	cmp	r3, r4
 8002e7e:	d9fa      	bls.n	8002e76 <_free_r+0x42>
 8002e80:	6811      	ldr	r1, [r2, #0]
 8002e82:	1850      	adds	r0, r2, r1
 8002e84:	42a0      	cmp	r0, r4
 8002e86:	d10b      	bne.n	8002ea0 <_free_r+0x6c>
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	4401      	add	r1, r0
 8002e8c:	1850      	adds	r0, r2, r1
 8002e8e:	4283      	cmp	r3, r0
 8002e90:	6011      	str	r1, [r2, #0]
 8002e92:	d1e0      	bne.n	8002e56 <_free_r+0x22>
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4408      	add	r0, r1
 8002e9a:	6010      	str	r0, [r2, #0]
 8002e9c:	6053      	str	r3, [r2, #4]
 8002e9e:	e7da      	b.n	8002e56 <_free_r+0x22>
 8002ea0:	d902      	bls.n	8002ea8 <_free_r+0x74>
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	602b      	str	r3, [r5, #0]
 8002ea6:	e7d6      	b.n	8002e56 <_free_r+0x22>
 8002ea8:	6820      	ldr	r0, [r4, #0]
 8002eaa:	1821      	adds	r1, r4, r0
 8002eac:	428b      	cmp	r3, r1
 8002eae:	bf01      	itttt	eq
 8002eb0:	6819      	ldreq	r1, [r3, #0]
 8002eb2:	685b      	ldreq	r3, [r3, #4]
 8002eb4:	1809      	addeq	r1, r1, r0
 8002eb6:	6021      	streq	r1, [r4, #0]
 8002eb8:	6063      	str	r3, [r4, #4]
 8002eba:	6054      	str	r4, [r2, #4]
 8002ebc:	e7cb      	b.n	8002e56 <_free_r+0x22>
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	20000290 	.word	0x20000290

08002ec4 <sbrk_aligned>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4e0e      	ldr	r6, [pc, #56]	; (8002f00 <sbrk_aligned+0x3c>)
 8002ec8:	460c      	mov	r4, r1
 8002eca:	6831      	ldr	r1, [r6, #0]
 8002ecc:	4605      	mov	r5, r0
 8002ece:	b911      	cbnz	r1, 8002ed6 <sbrk_aligned+0x12>
 8002ed0:	f000 fcba 	bl	8003848 <_sbrk_r>
 8002ed4:	6030      	str	r0, [r6, #0]
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 fcb5 	bl	8003848 <_sbrk_r>
 8002ede:	1c43      	adds	r3, r0, #1
 8002ee0:	d00a      	beq.n	8002ef8 <sbrk_aligned+0x34>
 8002ee2:	1cc4      	adds	r4, r0, #3
 8002ee4:	f024 0403 	bic.w	r4, r4, #3
 8002ee8:	42a0      	cmp	r0, r4
 8002eea:	d007      	beq.n	8002efc <sbrk_aligned+0x38>
 8002eec:	1a21      	subs	r1, r4, r0
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f000 fcaa 	bl	8003848 <_sbrk_r>
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	d101      	bne.n	8002efc <sbrk_aligned+0x38>
 8002ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8002efc:	4620      	mov	r0, r4
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
 8002f00:	20000294 	.word	0x20000294

08002f04 <_malloc_r>:
 8002f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f08:	1ccd      	adds	r5, r1, #3
 8002f0a:	f025 0503 	bic.w	r5, r5, #3
 8002f0e:	3508      	adds	r5, #8
 8002f10:	2d0c      	cmp	r5, #12
 8002f12:	bf38      	it	cc
 8002f14:	250c      	movcc	r5, #12
 8002f16:	2d00      	cmp	r5, #0
 8002f18:	4607      	mov	r7, r0
 8002f1a:	db01      	blt.n	8002f20 <_malloc_r+0x1c>
 8002f1c:	42a9      	cmp	r1, r5
 8002f1e:	d905      	bls.n	8002f2c <_malloc_r+0x28>
 8002f20:	230c      	movs	r3, #12
 8002f22:	2600      	movs	r6, #0
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4630      	mov	r0, r6
 8002f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003000 <_malloc_r+0xfc>
 8002f30:	f000 f868 	bl	8003004 <__malloc_lock>
 8002f34:	f8d8 3000 	ldr.w	r3, [r8]
 8002f38:	461c      	mov	r4, r3
 8002f3a:	bb5c      	cbnz	r4, 8002f94 <_malloc_r+0x90>
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	4638      	mov	r0, r7
 8002f40:	f7ff ffc0 	bl	8002ec4 <sbrk_aligned>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	4604      	mov	r4, r0
 8002f48:	d155      	bne.n	8002ff6 <_malloc_r+0xf2>
 8002f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8002f4e:	4626      	mov	r6, r4
 8002f50:	2e00      	cmp	r6, #0
 8002f52:	d145      	bne.n	8002fe0 <_malloc_r+0xdc>
 8002f54:	2c00      	cmp	r4, #0
 8002f56:	d048      	beq.n	8002fea <_malloc_r+0xe6>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	4631      	mov	r1, r6
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	eb04 0903 	add.w	r9, r4, r3
 8002f62:	f000 fc71 	bl	8003848 <_sbrk_r>
 8002f66:	4581      	cmp	r9, r0
 8002f68:	d13f      	bne.n	8002fea <_malloc_r+0xe6>
 8002f6a:	6821      	ldr	r1, [r4, #0]
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	1a6d      	subs	r5, r5, r1
 8002f70:	4629      	mov	r1, r5
 8002f72:	f7ff ffa7 	bl	8002ec4 <sbrk_aligned>
 8002f76:	3001      	adds	r0, #1
 8002f78:	d037      	beq.n	8002fea <_malloc_r+0xe6>
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	442b      	add	r3, r5
 8002f7e:	6023      	str	r3, [r4, #0]
 8002f80:	f8d8 3000 	ldr.w	r3, [r8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d038      	beq.n	8002ffa <_malloc_r+0xf6>
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	42a2      	cmp	r2, r4
 8002f8c:	d12b      	bne.n	8002fe6 <_malloc_r+0xe2>
 8002f8e:	2200      	movs	r2, #0
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	e00f      	b.n	8002fb4 <_malloc_r+0xb0>
 8002f94:	6822      	ldr	r2, [r4, #0]
 8002f96:	1b52      	subs	r2, r2, r5
 8002f98:	d41f      	bmi.n	8002fda <_malloc_r+0xd6>
 8002f9a:	2a0b      	cmp	r2, #11
 8002f9c:	d917      	bls.n	8002fce <_malloc_r+0xca>
 8002f9e:	1961      	adds	r1, r4, r5
 8002fa0:	42a3      	cmp	r3, r4
 8002fa2:	6025      	str	r5, [r4, #0]
 8002fa4:	bf18      	it	ne
 8002fa6:	6059      	strne	r1, [r3, #4]
 8002fa8:	6863      	ldr	r3, [r4, #4]
 8002faa:	bf08      	it	eq
 8002fac:	f8c8 1000 	streq.w	r1, [r8]
 8002fb0:	5162      	str	r2, [r4, r5]
 8002fb2:	604b      	str	r3, [r1, #4]
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	f104 060b 	add.w	r6, r4, #11
 8002fba:	f000 f829 	bl	8003010 <__malloc_unlock>
 8002fbe:	f026 0607 	bic.w	r6, r6, #7
 8002fc2:	1d23      	adds	r3, r4, #4
 8002fc4:	1af2      	subs	r2, r6, r3
 8002fc6:	d0ae      	beq.n	8002f26 <_malloc_r+0x22>
 8002fc8:	1b9b      	subs	r3, r3, r6
 8002fca:	50a3      	str	r3, [r4, r2]
 8002fcc:	e7ab      	b.n	8002f26 <_malloc_r+0x22>
 8002fce:	42a3      	cmp	r3, r4
 8002fd0:	6862      	ldr	r2, [r4, #4]
 8002fd2:	d1dd      	bne.n	8002f90 <_malloc_r+0x8c>
 8002fd4:	f8c8 2000 	str.w	r2, [r8]
 8002fd8:	e7ec      	b.n	8002fb4 <_malloc_r+0xb0>
 8002fda:	4623      	mov	r3, r4
 8002fdc:	6864      	ldr	r4, [r4, #4]
 8002fde:	e7ac      	b.n	8002f3a <_malloc_r+0x36>
 8002fe0:	4634      	mov	r4, r6
 8002fe2:	6876      	ldr	r6, [r6, #4]
 8002fe4:	e7b4      	b.n	8002f50 <_malloc_r+0x4c>
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	e7cc      	b.n	8002f84 <_malloc_r+0x80>
 8002fea:	230c      	movs	r3, #12
 8002fec:	4638      	mov	r0, r7
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	f000 f80e 	bl	8003010 <__malloc_unlock>
 8002ff4:	e797      	b.n	8002f26 <_malloc_r+0x22>
 8002ff6:	6025      	str	r5, [r4, #0]
 8002ff8:	e7dc      	b.n	8002fb4 <_malloc_r+0xb0>
 8002ffa:	605b      	str	r3, [r3, #4]
 8002ffc:	deff      	udf	#255	; 0xff
 8002ffe:	bf00      	nop
 8003000:	20000290 	.word	0x20000290

08003004 <__malloc_lock>:
 8003004:	4801      	ldr	r0, [pc, #4]	; (800300c <__malloc_lock+0x8>)
 8003006:	f7ff bf12 	b.w	8002e2e <__retarget_lock_acquire_recursive>
 800300a:	bf00      	nop
 800300c:	2000028c 	.word	0x2000028c

08003010 <__malloc_unlock>:
 8003010:	4801      	ldr	r0, [pc, #4]	; (8003018 <__malloc_unlock+0x8>)
 8003012:	f7ff bf0d 	b.w	8002e30 <__retarget_lock_release_recursive>
 8003016:	bf00      	nop
 8003018:	2000028c 	.word	0x2000028c

0800301c <__sfputc_r>:
 800301c:	6893      	ldr	r3, [r2, #8]
 800301e:	b410      	push	{r4}
 8003020:	3b01      	subs	r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	da07      	bge.n	8003038 <__sfputc_r+0x1c>
 8003028:	6994      	ldr	r4, [r2, #24]
 800302a:	42a3      	cmp	r3, r4
 800302c:	db01      	blt.n	8003032 <__sfputc_r+0x16>
 800302e:	290a      	cmp	r1, #10
 8003030:	d102      	bne.n	8003038 <__sfputc_r+0x1c>
 8003032:	bc10      	pop	{r4}
 8003034:	f000 bb72 	b.w	800371c <__swbuf_r>
 8003038:	6813      	ldr	r3, [r2, #0]
 800303a:	1c58      	adds	r0, r3, #1
 800303c:	6010      	str	r0, [r2, #0]
 800303e:	7019      	strb	r1, [r3, #0]
 8003040:	4608      	mov	r0, r1
 8003042:	bc10      	pop	{r4}
 8003044:	4770      	bx	lr

08003046 <__sfputs_r>:
 8003046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003048:	4606      	mov	r6, r0
 800304a:	460f      	mov	r7, r1
 800304c:	4614      	mov	r4, r2
 800304e:	18d5      	adds	r5, r2, r3
 8003050:	42ac      	cmp	r4, r5
 8003052:	d101      	bne.n	8003058 <__sfputs_r+0x12>
 8003054:	2000      	movs	r0, #0
 8003056:	e007      	b.n	8003068 <__sfputs_r+0x22>
 8003058:	463a      	mov	r2, r7
 800305a:	4630      	mov	r0, r6
 800305c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003060:	f7ff ffdc 	bl	800301c <__sfputc_r>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d1f3      	bne.n	8003050 <__sfputs_r+0xa>
 8003068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800306c <_vfiprintf_r>:
 800306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003070:	460d      	mov	r5, r1
 8003072:	4614      	mov	r4, r2
 8003074:	4698      	mov	r8, r3
 8003076:	4606      	mov	r6, r0
 8003078:	b09d      	sub	sp, #116	; 0x74
 800307a:	b118      	cbz	r0, 8003084 <_vfiprintf_r+0x18>
 800307c:	6a03      	ldr	r3, [r0, #32]
 800307e:	b90b      	cbnz	r3, 8003084 <_vfiprintf_r+0x18>
 8003080:	f7ff fdd0 	bl	8002c24 <__sinit>
 8003084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003086:	07d9      	lsls	r1, r3, #31
 8003088:	d405      	bmi.n	8003096 <_vfiprintf_r+0x2a>
 800308a:	89ab      	ldrh	r3, [r5, #12]
 800308c:	059a      	lsls	r2, r3, #22
 800308e:	d402      	bmi.n	8003096 <_vfiprintf_r+0x2a>
 8003090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003092:	f7ff fecc 	bl	8002e2e <__retarget_lock_acquire_recursive>
 8003096:	89ab      	ldrh	r3, [r5, #12]
 8003098:	071b      	lsls	r3, r3, #28
 800309a:	d501      	bpl.n	80030a0 <_vfiprintf_r+0x34>
 800309c:	692b      	ldr	r3, [r5, #16]
 800309e:	b99b      	cbnz	r3, 80030c8 <_vfiprintf_r+0x5c>
 80030a0:	4629      	mov	r1, r5
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 fb78 	bl	8003798 <__swsetup_r>
 80030a8:	b170      	cbz	r0, 80030c8 <_vfiprintf_r+0x5c>
 80030aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030ac:	07dc      	lsls	r4, r3, #31
 80030ae:	d504      	bpl.n	80030ba <_vfiprintf_r+0x4e>
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	b01d      	add	sp, #116	; 0x74
 80030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ba:	89ab      	ldrh	r3, [r5, #12]
 80030bc:	0598      	lsls	r0, r3, #22
 80030be:	d4f7      	bmi.n	80030b0 <_vfiprintf_r+0x44>
 80030c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030c2:	f7ff feb5 	bl	8002e30 <__retarget_lock_release_recursive>
 80030c6:	e7f3      	b.n	80030b0 <_vfiprintf_r+0x44>
 80030c8:	2300      	movs	r3, #0
 80030ca:	9309      	str	r3, [sp, #36]	; 0x24
 80030cc:	2320      	movs	r3, #32
 80030ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030d2:	2330      	movs	r3, #48	; 0x30
 80030d4:	f04f 0901 	mov.w	r9, #1
 80030d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80030dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800328c <_vfiprintf_r+0x220>
 80030e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030e4:	4623      	mov	r3, r4
 80030e6:	469a      	mov	sl, r3
 80030e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030ec:	b10a      	cbz	r2, 80030f2 <_vfiprintf_r+0x86>
 80030ee:	2a25      	cmp	r2, #37	; 0x25
 80030f0:	d1f9      	bne.n	80030e6 <_vfiprintf_r+0x7a>
 80030f2:	ebba 0b04 	subs.w	fp, sl, r4
 80030f6:	d00b      	beq.n	8003110 <_vfiprintf_r+0xa4>
 80030f8:	465b      	mov	r3, fp
 80030fa:	4622      	mov	r2, r4
 80030fc:	4629      	mov	r1, r5
 80030fe:	4630      	mov	r0, r6
 8003100:	f7ff ffa1 	bl	8003046 <__sfputs_r>
 8003104:	3001      	adds	r0, #1
 8003106:	f000 80a9 	beq.w	800325c <_vfiprintf_r+0x1f0>
 800310a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800310c:	445a      	add	r2, fp
 800310e:	9209      	str	r2, [sp, #36]	; 0x24
 8003110:	f89a 3000 	ldrb.w	r3, [sl]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a1 	beq.w	800325c <_vfiprintf_r+0x1f0>
 800311a:	2300      	movs	r3, #0
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003124:	f10a 0a01 	add.w	sl, sl, #1
 8003128:	9304      	str	r3, [sp, #16]
 800312a:	9307      	str	r3, [sp, #28]
 800312c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003130:	931a      	str	r3, [sp, #104]	; 0x68
 8003132:	4654      	mov	r4, sl
 8003134:	2205      	movs	r2, #5
 8003136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800313a:	4854      	ldr	r0, [pc, #336]	; (800328c <_vfiprintf_r+0x220>)
 800313c:	f000 fb94 	bl	8003868 <memchr>
 8003140:	9a04      	ldr	r2, [sp, #16]
 8003142:	b9d8      	cbnz	r0, 800317c <_vfiprintf_r+0x110>
 8003144:	06d1      	lsls	r1, r2, #27
 8003146:	bf44      	itt	mi
 8003148:	2320      	movmi	r3, #32
 800314a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800314e:	0713      	lsls	r3, r2, #28
 8003150:	bf44      	itt	mi
 8003152:	232b      	movmi	r3, #43	; 0x2b
 8003154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003158:	f89a 3000 	ldrb.w	r3, [sl]
 800315c:	2b2a      	cmp	r3, #42	; 0x2a
 800315e:	d015      	beq.n	800318c <_vfiprintf_r+0x120>
 8003160:	4654      	mov	r4, sl
 8003162:	2000      	movs	r0, #0
 8003164:	f04f 0c0a 	mov.w	ip, #10
 8003168:	9a07      	ldr	r2, [sp, #28]
 800316a:	4621      	mov	r1, r4
 800316c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003170:	3b30      	subs	r3, #48	; 0x30
 8003172:	2b09      	cmp	r3, #9
 8003174:	d94d      	bls.n	8003212 <_vfiprintf_r+0x1a6>
 8003176:	b1b0      	cbz	r0, 80031a6 <_vfiprintf_r+0x13a>
 8003178:	9207      	str	r2, [sp, #28]
 800317a:	e014      	b.n	80031a6 <_vfiprintf_r+0x13a>
 800317c:	eba0 0308 	sub.w	r3, r0, r8
 8003180:	fa09 f303 	lsl.w	r3, r9, r3
 8003184:	4313      	orrs	r3, r2
 8003186:	46a2      	mov	sl, r4
 8003188:	9304      	str	r3, [sp, #16]
 800318a:	e7d2      	b.n	8003132 <_vfiprintf_r+0xc6>
 800318c:	9b03      	ldr	r3, [sp, #12]
 800318e:	1d19      	adds	r1, r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	9103      	str	r1, [sp, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	bfbb      	ittet	lt
 8003198:	425b      	neglt	r3, r3
 800319a:	f042 0202 	orrlt.w	r2, r2, #2
 800319e:	9307      	strge	r3, [sp, #28]
 80031a0:	9307      	strlt	r3, [sp, #28]
 80031a2:	bfb8      	it	lt
 80031a4:	9204      	strlt	r2, [sp, #16]
 80031a6:	7823      	ldrb	r3, [r4, #0]
 80031a8:	2b2e      	cmp	r3, #46	; 0x2e
 80031aa:	d10c      	bne.n	80031c6 <_vfiprintf_r+0x15a>
 80031ac:	7863      	ldrb	r3, [r4, #1]
 80031ae:	2b2a      	cmp	r3, #42	; 0x2a
 80031b0:	d134      	bne.n	800321c <_vfiprintf_r+0x1b0>
 80031b2:	9b03      	ldr	r3, [sp, #12]
 80031b4:	3402      	adds	r4, #2
 80031b6:	1d1a      	adds	r2, r3, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	9203      	str	r2, [sp, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bfb8      	it	lt
 80031c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80031c4:	9305      	str	r3, [sp, #20]
 80031c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003290 <_vfiprintf_r+0x224>
 80031ca:	2203      	movs	r2, #3
 80031cc:	4650      	mov	r0, sl
 80031ce:	7821      	ldrb	r1, [r4, #0]
 80031d0:	f000 fb4a 	bl	8003868 <memchr>
 80031d4:	b138      	cbz	r0, 80031e6 <_vfiprintf_r+0x17a>
 80031d6:	2240      	movs	r2, #64	; 0x40
 80031d8:	9b04      	ldr	r3, [sp, #16]
 80031da:	eba0 000a 	sub.w	r0, r0, sl
 80031de:	4082      	lsls	r2, r0
 80031e0:	4313      	orrs	r3, r2
 80031e2:	3401      	adds	r4, #1
 80031e4:	9304      	str	r3, [sp, #16]
 80031e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031ea:	2206      	movs	r2, #6
 80031ec:	4829      	ldr	r0, [pc, #164]	; (8003294 <_vfiprintf_r+0x228>)
 80031ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031f2:	f000 fb39 	bl	8003868 <memchr>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d03f      	beq.n	800327a <_vfiprintf_r+0x20e>
 80031fa:	4b27      	ldr	r3, [pc, #156]	; (8003298 <_vfiprintf_r+0x22c>)
 80031fc:	bb1b      	cbnz	r3, 8003246 <_vfiprintf_r+0x1da>
 80031fe:	9b03      	ldr	r3, [sp, #12]
 8003200:	3307      	adds	r3, #7
 8003202:	f023 0307 	bic.w	r3, r3, #7
 8003206:	3308      	adds	r3, #8
 8003208:	9303      	str	r3, [sp, #12]
 800320a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800320c:	443b      	add	r3, r7
 800320e:	9309      	str	r3, [sp, #36]	; 0x24
 8003210:	e768      	b.n	80030e4 <_vfiprintf_r+0x78>
 8003212:	460c      	mov	r4, r1
 8003214:	2001      	movs	r0, #1
 8003216:	fb0c 3202 	mla	r2, ip, r2, r3
 800321a:	e7a6      	b.n	800316a <_vfiprintf_r+0xfe>
 800321c:	2300      	movs	r3, #0
 800321e:	f04f 0c0a 	mov.w	ip, #10
 8003222:	4619      	mov	r1, r3
 8003224:	3401      	adds	r4, #1
 8003226:	9305      	str	r3, [sp, #20]
 8003228:	4620      	mov	r0, r4
 800322a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800322e:	3a30      	subs	r2, #48	; 0x30
 8003230:	2a09      	cmp	r2, #9
 8003232:	d903      	bls.n	800323c <_vfiprintf_r+0x1d0>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0c6      	beq.n	80031c6 <_vfiprintf_r+0x15a>
 8003238:	9105      	str	r1, [sp, #20]
 800323a:	e7c4      	b.n	80031c6 <_vfiprintf_r+0x15a>
 800323c:	4604      	mov	r4, r0
 800323e:	2301      	movs	r3, #1
 8003240:	fb0c 2101 	mla	r1, ip, r1, r2
 8003244:	e7f0      	b.n	8003228 <_vfiprintf_r+0x1bc>
 8003246:	ab03      	add	r3, sp, #12
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	462a      	mov	r2, r5
 800324c:	4630      	mov	r0, r6
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <_vfiprintf_r+0x230>)
 8003250:	a904      	add	r1, sp, #16
 8003252:	f3af 8000 	nop.w
 8003256:	4607      	mov	r7, r0
 8003258:	1c78      	adds	r0, r7, #1
 800325a:	d1d6      	bne.n	800320a <_vfiprintf_r+0x19e>
 800325c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800325e:	07d9      	lsls	r1, r3, #31
 8003260:	d405      	bmi.n	800326e <_vfiprintf_r+0x202>
 8003262:	89ab      	ldrh	r3, [r5, #12]
 8003264:	059a      	lsls	r2, r3, #22
 8003266:	d402      	bmi.n	800326e <_vfiprintf_r+0x202>
 8003268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800326a:	f7ff fde1 	bl	8002e30 <__retarget_lock_release_recursive>
 800326e:	89ab      	ldrh	r3, [r5, #12]
 8003270:	065b      	lsls	r3, r3, #25
 8003272:	f53f af1d 	bmi.w	80030b0 <_vfiprintf_r+0x44>
 8003276:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003278:	e71c      	b.n	80030b4 <_vfiprintf_r+0x48>
 800327a:	ab03      	add	r3, sp, #12
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	462a      	mov	r2, r5
 8003280:	4630      	mov	r0, r6
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <_vfiprintf_r+0x230>)
 8003284:	a904      	add	r1, sp, #16
 8003286:	f000 f87d 	bl	8003384 <_printf_i>
 800328a:	e7e4      	b.n	8003256 <_vfiprintf_r+0x1ea>
 800328c:	08003a0e 	.word	0x08003a0e
 8003290:	08003a14 	.word	0x08003a14
 8003294:	08003a18 	.word	0x08003a18
 8003298:	00000000 	.word	0x00000000
 800329c:	08003047 	.word	0x08003047

080032a0 <_printf_common>:
 80032a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a4:	4616      	mov	r6, r2
 80032a6:	4699      	mov	r9, r3
 80032a8:	688a      	ldr	r2, [r1, #8]
 80032aa:	690b      	ldr	r3, [r1, #16]
 80032ac:	4607      	mov	r7, r0
 80032ae:	4293      	cmp	r3, r2
 80032b0:	bfb8      	it	lt
 80032b2:	4613      	movlt	r3, r2
 80032b4:	6033      	str	r3, [r6, #0]
 80032b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ba:	460c      	mov	r4, r1
 80032bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032c0:	b10a      	cbz	r2, 80032c6 <_printf_common+0x26>
 80032c2:	3301      	adds	r3, #1
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	0699      	lsls	r1, r3, #26
 80032ca:	bf42      	ittt	mi
 80032cc:	6833      	ldrmi	r3, [r6, #0]
 80032ce:	3302      	addmi	r3, #2
 80032d0:	6033      	strmi	r3, [r6, #0]
 80032d2:	6825      	ldr	r5, [r4, #0]
 80032d4:	f015 0506 	ands.w	r5, r5, #6
 80032d8:	d106      	bne.n	80032e8 <_printf_common+0x48>
 80032da:	f104 0a19 	add.w	sl, r4, #25
 80032de:	68e3      	ldr	r3, [r4, #12]
 80032e0:	6832      	ldr	r2, [r6, #0]
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	42ab      	cmp	r3, r5
 80032e6:	dc2b      	bgt.n	8003340 <_printf_common+0xa0>
 80032e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032ec:	1e13      	subs	r3, r2, #0
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	bf18      	it	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	0692      	lsls	r2, r2, #26
 80032f6:	d430      	bmi.n	800335a <_printf_common+0xba>
 80032f8:	4649      	mov	r1, r9
 80032fa:	4638      	mov	r0, r7
 80032fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003300:	47c0      	blx	r8
 8003302:	3001      	adds	r0, #1
 8003304:	d023      	beq.n	800334e <_printf_common+0xae>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	6922      	ldr	r2, [r4, #16]
 800330a:	f003 0306 	and.w	r3, r3, #6
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf14      	ite	ne
 8003312:	2500      	movne	r5, #0
 8003314:	6833      	ldreq	r3, [r6, #0]
 8003316:	f04f 0600 	mov.w	r6, #0
 800331a:	bf08      	it	eq
 800331c:	68e5      	ldreq	r5, [r4, #12]
 800331e:	f104 041a 	add.w	r4, r4, #26
 8003322:	bf08      	it	eq
 8003324:	1aed      	subeq	r5, r5, r3
 8003326:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800332a:	bf08      	it	eq
 800332c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003330:	4293      	cmp	r3, r2
 8003332:	bfc4      	itt	gt
 8003334:	1a9b      	subgt	r3, r3, r2
 8003336:	18ed      	addgt	r5, r5, r3
 8003338:	42b5      	cmp	r5, r6
 800333a:	d11a      	bne.n	8003372 <_printf_common+0xd2>
 800333c:	2000      	movs	r0, #0
 800333e:	e008      	b.n	8003352 <_printf_common+0xb2>
 8003340:	2301      	movs	r3, #1
 8003342:	4652      	mov	r2, sl
 8003344:	4649      	mov	r1, r9
 8003346:	4638      	mov	r0, r7
 8003348:	47c0      	blx	r8
 800334a:	3001      	adds	r0, #1
 800334c:	d103      	bne.n	8003356 <_printf_common+0xb6>
 800334e:	f04f 30ff 	mov.w	r0, #4294967295
 8003352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003356:	3501      	adds	r5, #1
 8003358:	e7c1      	b.n	80032de <_printf_common+0x3e>
 800335a:	2030      	movs	r0, #48	; 0x30
 800335c:	18e1      	adds	r1, r4, r3
 800335e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003368:	4422      	add	r2, r4
 800336a:	3302      	adds	r3, #2
 800336c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003370:	e7c2      	b.n	80032f8 <_printf_common+0x58>
 8003372:	2301      	movs	r3, #1
 8003374:	4622      	mov	r2, r4
 8003376:	4649      	mov	r1, r9
 8003378:	4638      	mov	r0, r7
 800337a:	47c0      	blx	r8
 800337c:	3001      	adds	r0, #1
 800337e:	d0e6      	beq.n	800334e <_printf_common+0xae>
 8003380:	3601      	adds	r6, #1
 8003382:	e7d9      	b.n	8003338 <_printf_common+0x98>

08003384 <_printf_i>:
 8003384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003388:	7e0f      	ldrb	r7, [r1, #24]
 800338a:	4691      	mov	r9, r2
 800338c:	2f78      	cmp	r7, #120	; 0x78
 800338e:	4680      	mov	r8, r0
 8003390:	460c      	mov	r4, r1
 8003392:	469a      	mov	sl, r3
 8003394:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800339a:	d807      	bhi.n	80033ac <_printf_i+0x28>
 800339c:	2f62      	cmp	r7, #98	; 0x62
 800339e:	d80a      	bhi.n	80033b6 <_printf_i+0x32>
 80033a0:	2f00      	cmp	r7, #0
 80033a2:	f000 80d5 	beq.w	8003550 <_printf_i+0x1cc>
 80033a6:	2f58      	cmp	r7, #88	; 0x58
 80033a8:	f000 80c1 	beq.w	800352e <_printf_i+0x1aa>
 80033ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033b4:	e03a      	b.n	800342c <_printf_i+0xa8>
 80033b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033ba:	2b15      	cmp	r3, #21
 80033bc:	d8f6      	bhi.n	80033ac <_printf_i+0x28>
 80033be:	a101      	add	r1, pc, #4	; (adr r1, 80033c4 <_printf_i+0x40>)
 80033c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033c4:	0800341d 	.word	0x0800341d
 80033c8:	08003431 	.word	0x08003431
 80033cc:	080033ad 	.word	0x080033ad
 80033d0:	080033ad 	.word	0x080033ad
 80033d4:	080033ad 	.word	0x080033ad
 80033d8:	080033ad 	.word	0x080033ad
 80033dc:	08003431 	.word	0x08003431
 80033e0:	080033ad 	.word	0x080033ad
 80033e4:	080033ad 	.word	0x080033ad
 80033e8:	080033ad 	.word	0x080033ad
 80033ec:	080033ad 	.word	0x080033ad
 80033f0:	08003537 	.word	0x08003537
 80033f4:	0800345d 	.word	0x0800345d
 80033f8:	080034f1 	.word	0x080034f1
 80033fc:	080033ad 	.word	0x080033ad
 8003400:	080033ad 	.word	0x080033ad
 8003404:	08003559 	.word	0x08003559
 8003408:	080033ad 	.word	0x080033ad
 800340c:	0800345d 	.word	0x0800345d
 8003410:	080033ad 	.word	0x080033ad
 8003414:	080033ad 	.word	0x080033ad
 8003418:	080034f9 	.word	0x080034f9
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	1d1a      	adds	r2, r3, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	602a      	str	r2, [r5, #0]
 8003424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800342c:	2301      	movs	r3, #1
 800342e:	e0a0      	b.n	8003572 <_printf_i+0x1ee>
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	682b      	ldr	r3, [r5, #0]
 8003434:	0607      	lsls	r7, r0, #24
 8003436:	f103 0104 	add.w	r1, r3, #4
 800343a:	6029      	str	r1, [r5, #0]
 800343c:	d501      	bpl.n	8003442 <_printf_i+0xbe>
 800343e:	681e      	ldr	r6, [r3, #0]
 8003440:	e003      	b.n	800344a <_printf_i+0xc6>
 8003442:	0646      	lsls	r6, r0, #25
 8003444:	d5fb      	bpl.n	800343e <_printf_i+0xba>
 8003446:	f9b3 6000 	ldrsh.w	r6, [r3]
 800344a:	2e00      	cmp	r6, #0
 800344c:	da03      	bge.n	8003456 <_printf_i+0xd2>
 800344e:	232d      	movs	r3, #45	; 0x2d
 8003450:	4276      	negs	r6, r6
 8003452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003456:	230a      	movs	r3, #10
 8003458:	4859      	ldr	r0, [pc, #356]	; (80035c0 <_printf_i+0x23c>)
 800345a:	e012      	b.n	8003482 <_printf_i+0xfe>
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	1d19      	adds	r1, r3, #4
 8003462:	6029      	str	r1, [r5, #0]
 8003464:	0605      	lsls	r5, r0, #24
 8003466:	d501      	bpl.n	800346c <_printf_i+0xe8>
 8003468:	681e      	ldr	r6, [r3, #0]
 800346a:	e002      	b.n	8003472 <_printf_i+0xee>
 800346c:	0641      	lsls	r1, r0, #25
 800346e:	d5fb      	bpl.n	8003468 <_printf_i+0xe4>
 8003470:	881e      	ldrh	r6, [r3, #0]
 8003472:	2f6f      	cmp	r7, #111	; 0x6f
 8003474:	bf0c      	ite	eq
 8003476:	2308      	moveq	r3, #8
 8003478:	230a      	movne	r3, #10
 800347a:	4851      	ldr	r0, [pc, #324]	; (80035c0 <_printf_i+0x23c>)
 800347c:	2100      	movs	r1, #0
 800347e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003482:	6865      	ldr	r5, [r4, #4]
 8003484:	2d00      	cmp	r5, #0
 8003486:	bfa8      	it	ge
 8003488:	6821      	ldrge	r1, [r4, #0]
 800348a:	60a5      	str	r5, [r4, #8]
 800348c:	bfa4      	itt	ge
 800348e:	f021 0104 	bicge.w	r1, r1, #4
 8003492:	6021      	strge	r1, [r4, #0]
 8003494:	b90e      	cbnz	r6, 800349a <_printf_i+0x116>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d04b      	beq.n	8003532 <_printf_i+0x1ae>
 800349a:	4615      	mov	r5, r2
 800349c:	fbb6 f1f3 	udiv	r1, r6, r3
 80034a0:	fb03 6711 	mls	r7, r3, r1, r6
 80034a4:	5dc7      	ldrb	r7, [r0, r7]
 80034a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034aa:	4637      	mov	r7, r6
 80034ac:	42bb      	cmp	r3, r7
 80034ae:	460e      	mov	r6, r1
 80034b0:	d9f4      	bls.n	800349c <_printf_i+0x118>
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d10b      	bne.n	80034ce <_printf_i+0x14a>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	07de      	lsls	r6, r3, #31
 80034ba:	d508      	bpl.n	80034ce <_printf_i+0x14a>
 80034bc:	6923      	ldr	r3, [r4, #16]
 80034be:	6861      	ldr	r1, [r4, #4]
 80034c0:	4299      	cmp	r1, r3
 80034c2:	bfde      	ittt	le
 80034c4:	2330      	movle	r3, #48	; 0x30
 80034c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034ce:	1b52      	subs	r2, r2, r5
 80034d0:	6122      	str	r2, [r4, #16]
 80034d2:	464b      	mov	r3, r9
 80034d4:	4621      	mov	r1, r4
 80034d6:	4640      	mov	r0, r8
 80034d8:	f8cd a000 	str.w	sl, [sp]
 80034dc:	aa03      	add	r2, sp, #12
 80034de:	f7ff fedf 	bl	80032a0 <_printf_common>
 80034e2:	3001      	adds	r0, #1
 80034e4:	d14a      	bne.n	800357c <_printf_i+0x1f8>
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ea:	b004      	add	sp, #16
 80034ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	f043 0320 	orr.w	r3, r3, #32
 80034f6:	6023      	str	r3, [r4, #0]
 80034f8:	2778      	movs	r7, #120	; 0x78
 80034fa:	4832      	ldr	r0, [pc, #200]	; (80035c4 <_printf_i+0x240>)
 80034fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	6829      	ldr	r1, [r5, #0]
 8003504:	061f      	lsls	r7, r3, #24
 8003506:	f851 6b04 	ldr.w	r6, [r1], #4
 800350a:	d402      	bmi.n	8003512 <_printf_i+0x18e>
 800350c:	065f      	lsls	r7, r3, #25
 800350e:	bf48      	it	mi
 8003510:	b2b6      	uxthmi	r6, r6
 8003512:	07df      	lsls	r7, r3, #31
 8003514:	bf48      	it	mi
 8003516:	f043 0320 	orrmi.w	r3, r3, #32
 800351a:	6029      	str	r1, [r5, #0]
 800351c:	bf48      	it	mi
 800351e:	6023      	strmi	r3, [r4, #0]
 8003520:	b91e      	cbnz	r6, 800352a <_printf_i+0x1a6>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	f023 0320 	bic.w	r3, r3, #32
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	2310      	movs	r3, #16
 800352c:	e7a6      	b.n	800347c <_printf_i+0xf8>
 800352e:	4824      	ldr	r0, [pc, #144]	; (80035c0 <_printf_i+0x23c>)
 8003530:	e7e4      	b.n	80034fc <_printf_i+0x178>
 8003532:	4615      	mov	r5, r2
 8003534:	e7bd      	b.n	80034b2 <_printf_i+0x12e>
 8003536:	682b      	ldr	r3, [r5, #0]
 8003538:	6826      	ldr	r6, [r4, #0]
 800353a:	1d18      	adds	r0, r3, #4
 800353c:	6961      	ldr	r1, [r4, #20]
 800353e:	6028      	str	r0, [r5, #0]
 8003540:	0635      	lsls	r5, r6, #24
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	d501      	bpl.n	800354a <_printf_i+0x1c6>
 8003546:	6019      	str	r1, [r3, #0]
 8003548:	e002      	b.n	8003550 <_printf_i+0x1cc>
 800354a:	0670      	lsls	r0, r6, #25
 800354c:	d5fb      	bpl.n	8003546 <_printf_i+0x1c2>
 800354e:	8019      	strh	r1, [r3, #0]
 8003550:	2300      	movs	r3, #0
 8003552:	4615      	mov	r5, r2
 8003554:	6123      	str	r3, [r4, #16]
 8003556:	e7bc      	b.n	80034d2 <_printf_i+0x14e>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	2100      	movs	r1, #0
 800355c:	1d1a      	adds	r2, r3, #4
 800355e:	602a      	str	r2, [r5, #0]
 8003560:	681d      	ldr	r5, [r3, #0]
 8003562:	6862      	ldr	r2, [r4, #4]
 8003564:	4628      	mov	r0, r5
 8003566:	f000 f97f 	bl	8003868 <memchr>
 800356a:	b108      	cbz	r0, 8003570 <_printf_i+0x1ec>
 800356c:	1b40      	subs	r0, r0, r5
 800356e:	6060      	str	r0, [r4, #4]
 8003570:	6863      	ldr	r3, [r4, #4]
 8003572:	6123      	str	r3, [r4, #16]
 8003574:	2300      	movs	r3, #0
 8003576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800357a:	e7aa      	b.n	80034d2 <_printf_i+0x14e>
 800357c:	462a      	mov	r2, r5
 800357e:	4649      	mov	r1, r9
 8003580:	4640      	mov	r0, r8
 8003582:	6923      	ldr	r3, [r4, #16]
 8003584:	47d0      	blx	sl
 8003586:	3001      	adds	r0, #1
 8003588:	d0ad      	beq.n	80034e6 <_printf_i+0x162>
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	079b      	lsls	r3, r3, #30
 800358e:	d413      	bmi.n	80035b8 <_printf_i+0x234>
 8003590:	68e0      	ldr	r0, [r4, #12]
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	4298      	cmp	r0, r3
 8003596:	bfb8      	it	lt
 8003598:	4618      	movlt	r0, r3
 800359a:	e7a6      	b.n	80034ea <_printf_i+0x166>
 800359c:	2301      	movs	r3, #1
 800359e:	4632      	mov	r2, r6
 80035a0:	4649      	mov	r1, r9
 80035a2:	4640      	mov	r0, r8
 80035a4:	47d0      	blx	sl
 80035a6:	3001      	adds	r0, #1
 80035a8:	d09d      	beq.n	80034e6 <_printf_i+0x162>
 80035aa:	3501      	adds	r5, #1
 80035ac:	68e3      	ldr	r3, [r4, #12]
 80035ae:	9903      	ldr	r1, [sp, #12]
 80035b0:	1a5b      	subs	r3, r3, r1
 80035b2:	42ab      	cmp	r3, r5
 80035b4:	dcf2      	bgt.n	800359c <_printf_i+0x218>
 80035b6:	e7eb      	b.n	8003590 <_printf_i+0x20c>
 80035b8:	2500      	movs	r5, #0
 80035ba:	f104 0619 	add.w	r6, r4, #25
 80035be:	e7f5      	b.n	80035ac <_printf_i+0x228>
 80035c0:	08003a1f 	.word	0x08003a1f
 80035c4:	08003a30 	.word	0x08003a30

080035c8 <__sflush_r>:
 80035c8:	898a      	ldrh	r2, [r1, #12]
 80035ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035cc:	4605      	mov	r5, r0
 80035ce:	0710      	lsls	r0, r2, #28
 80035d0:	460c      	mov	r4, r1
 80035d2:	d457      	bmi.n	8003684 <__sflush_r+0xbc>
 80035d4:	684b      	ldr	r3, [r1, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dc04      	bgt.n	80035e4 <__sflush_r+0x1c>
 80035da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	dc01      	bgt.n	80035e4 <__sflush_r+0x1c>
 80035e0:	2000      	movs	r0, #0
 80035e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	d0fa      	beq.n	80035e0 <__sflush_r+0x18>
 80035ea:	2300      	movs	r3, #0
 80035ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035f0:	682f      	ldr	r7, [r5, #0]
 80035f2:	6a21      	ldr	r1, [r4, #32]
 80035f4:	602b      	str	r3, [r5, #0]
 80035f6:	d032      	beq.n	800365e <__sflush_r+0x96>
 80035f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	075a      	lsls	r2, r3, #29
 80035fe:	d505      	bpl.n	800360c <__sflush_r+0x44>
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	1ac0      	subs	r0, r0, r3
 8003604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003606:	b10b      	cbz	r3, 800360c <__sflush_r+0x44>
 8003608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800360a:	1ac0      	subs	r0, r0, r3
 800360c:	2300      	movs	r3, #0
 800360e:	4602      	mov	r2, r0
 8003610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003612:	4628      	mov	r0, r5
 8003614:	6a21      	ldr	r1, [r4, #32]
 8003616:	47b0      	blx	r6
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	d106      	bne.n	800362c <__sflush_r+0x64>
 800361e:	6829      	ldr	r1, [r5, #0]
 8003620:	291d      	cmp	r1, #29
 8003622:	d82b      	bhi.n	800367c <__sflush_r+0xb4>
 8003624:	4a28      	ldr	r2, [pc, #160]	; (80036c8 <__sflush_r+0x100>)
 8003626:	410a      	asrs	r2, r1
 8003628:	07d6      	lsls	r6, r2, #31
 800362a:	d427      	bmi.n	800367c <__sflush_r+0xb4>
 800362c:	2200      	movs	r2, #0
 800362e:	6062      	str	r2, [r4, #4]
 8003630:	6922      	ldr	r2, [r4, #16]
 8003632:	04d9      	lsls	r1, r3, #19
 8003634:	6022      	str	r2, [r4, #0]
 8003636:	d504      	bpl.n	8003642 <__sflush_r+0x7a>
 8003638:	1c42      	adds	r2, r0, #1
 800363a:	d101      	bne.n	8003640 <__sflush_r+0x78>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b903      	cbnz	r3, 8003642 <__sflush_r+0x7a>
 8003640:	6560      	str	r0, [r4, #84]	; 0x54
 8003642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003644:	602f      	str	r7, [r5, #0]
 8003646:	2900      	cmp	r1, #0
 8003648:	d0ca      	beq.n	80035e0 <__sflush_r+0x18>
 800364a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800364e:	4299      	cmp	r1, r3
 8003650:	d002      	beq.n	8003658 <__sflush_r+0x90>
 8003652:	4628      	mov	r0, r5
 8003654:	f7ff fbee 	bl	8002e34 <_free_r>
 8003658:	2000      	movs	r0, #0
 800365a:	6360      	str	r0, [r4, #52]	; 0x34
 800365c:	e7c1      	b.n	80035e2 <__sflush_r+0x1a>
 800365e:	2301      	movs	r3, #1
 8003660:	4628      	mov	r0, r5
 8003662:	47b0      	blx	r6
 8003664:	1c41      	adds	r1, r0, #1
 8003666:	d1c8      	bne.n	80035fa <__sflush_r+0x32>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0c5      	beq.n	80035fa <__sflush_r+0x32>
 800366e:	2b1d      	cmp	r3, #29
 8003670:	d001      	beq.n	8003676 <__sflush_r+0xae>
 8003672:	2b16      	cmp	r3, #22
 8003674:	d101      	bne.n	800367a <__sflush_r+0xb2>
 8003676:	602f      	str	r7, [r5, #0]
 8003678:	e7b2      	b.n	80035e0 <__sflush_r+0x18>
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	e7ae      	b.n	80035e2 <__sflush_r+0x1a>
 8003684:	690f      	ldr	r7, [r1, #16]
 8003686:	2f00      	cmp	r7, #0
 8003688:	d0aa      	beq.n	80035e0 <__sflush_r+0x18>
 800368a:	0793      	lsls	r3, r2, #30
 800368c:	bf18      	it	ne
 800368e:	2300      	movne	r3, #0
 8003690:	680e      	ldr	r6, [r1, #0]
 8003692:	bf08      	it	eq
 8003694:	694b      	ldreq	r3, [r1, #20]
 8003696:	1bf6      	subs	r6, r6, r7
 8003698:	600f      	str	r7, [r1, #0]
 800369a:	608b      	str	r3, [r1, #8]
 800369c:	2e00      	cmp	r6, #0
 800369e:	dd9f      	ble.n	80035e0 <__sflush_r+0x18>
 80036a0:	4633      	mov	r3, r6
 80036a2:	463a      	mov	r2, r7
 80036a4:	4628      	mov	r0, r5
 80036a6:	6a21      	ldr	r1, [r4, #32]
 80036a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80036ac:	47e0      	blx	ip
 80036ae:	2800      	cmp	r0, #0
 80036b0:	dc06      	bgt.n	80036c0 <__sflush_r+0xf8>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	e790      	b.n	80035e2 <__sflush_r+0x1a>
 80036c0:	4407      	add	r7, r0
 80036c2:	1a36      	subs	r6, r6, r0
 80036c4:	e7ea      	b.n	800369c <__sflush_r+0xd4>
 80036c6:	bf00      	nop
 80036c8:	dfbffffe 	.word	0xdfbffffe

080036cc <_fflush_r>:
 80036cc:	b538      	push	{r3, r4, r5, lr}
 80036ce:	690b      	ldr	r3, [r1, #16]
 80036d0:	4605      	mov	r5, r0
 80036d2:	460c      	mov	r4, r1
 80036d4:	b913      	cbnz	r3, 80036dc <_fflush_r+0x10>
 80036d6:	2500      	movs	r5, #0
 80036d8:	4628      	mov	r0, r5
 80036da:	bd38      	pop	{r3, r4, r5, pc}
 80036dc:	b118      	cbz	r0, 80036e6 <_fflush_r+0x1a>
 80036de:	6a03      	ldr	r3, [r0, #32]
 80036e0:	b90b      	cbnz	r3, 80036e6 <_fflush_r+0x1a>
 80036e2:	f7ff fa9f 	bl	8002c24 <__sinit>
 80036e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f3      	beq.n	80036d6 <_fflush_r+0xa>
 80036ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036f0:	07d0      	lsls	r0, r2, #31
 80036f2:	d404      	bmi.n	80036fe <_fflush_r+0x32>
 80036f4:	0599      	lsls	r1, r3, #22
 80036f6:	d402      	bmi.n	80036fe <_fflush_r+0x32>
 80036f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036fa:	f7ff fb98 	bl	8002e2e <__retarget_lock_acquire_recursive>
 80036fe:	4628      	mov	r0, r5
 8003700:	4621      	mov	r1, r4
 8003702:	f7ff ff61 	bl	80035c8 <__sflush_r>
 8003706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003708:	4605      	mov	r5, r0
 800370a:	07da      	lsls	r2, r3, #31
 800370c:	d4e4      	bmi.n	80036d8 <_fflush_r+0xc>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	059b      	lsls	r3, r3, #22
 8003712:	d4e1      	bmi.n	80036d8 <_fflush_r+0xc>
 8003714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003716:	f7ff fb8b 	bl	8002e30 <__retarget_lock_release_recursive>
 800371a:	e7dd      	b.n	80036d8 <_fflush_r+0xc>

0800371c <__swbuf_r>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	460e      	mov	r6, r1
 8003720:	4614      	mov	r4, r2
 8003722:	4605      	mov	r5, r0
 8003724:	b118      	cbz	r0, 800372e <__swbuf_r+0x12>
 8003726:	6a03      	ldr	r3, [r0, #32]
 8003728:	b90b      	cbnz	r3, 800372e <__swbuf_r+0x12>
 800372a:	f7ff fa7b 	bl	8002c24 <__sinit>
 800372e:	69a3      	ldr	r3, [r4, #24]
 8003730:	60a3      	str	r3, [r4, #8]
 8003732:	89a3      	ldrh	r3, [r4, #12]
 8003734:	071a      	lsls	r2, r3, #28
 8003736:	d525      	bpl.n	8003784 <__swbuf_r+0x68>
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	b31b      	cbz	r3, 8003784 <__swbuf_r+0x68>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	6922      	ldr	r2, [r4, #16]
 8003740:	b2f6      	uxtb	r6, r6
 8003742:	1a98      	subs	r0, r3, r2
 8003744:	6963      	ldr	r3, [r4, #20]
 8003746:	4637      	mov	r7, r6
 8003748:	4283      	cmp	r3, r0
 800374a:	dc04      	bgt.n	8003756 <__swbuf_r+0x3a>
 800374c:	4621      	mov	r1, r4
 800374e:	4628      	mov	r0, r5
 8003750:	f7ff ffbc 	bl	80036cc <_fflush_r>
 8003754:	b9e0      	cbnz	r0, 8003790 <__swbuf_r+0x74>
 8003756:	68a3      	ldr	r3, [r4, #8]
 8003758:	3b01      	subs	r3, #1
 800375a:	60a3      	str	r3, [r4, #8]
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	6022      	str	r2, [r4, #0]
 8003762:	701e      	strb	r6, [r3, #0]
 8003764:	6962      	ldr	r2, [r4, #20]
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	429a      	cmp	r2, r3
 800376a:	d004      	beq.n	8003776 <__swbuf_r+0x5a>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	07db      	lsls	r3, r3, #31
 8003770:	d506      	bpl.n	8003780 <__swbuf_r+0x64>
 8003772:	2e0a      	cmp	r6, #10
 8003774:	d104      	bne.n	8003780 <__swbuf_r+0x64>
 8003776:	4621      	mov	r1, r4
 8003778:	4628      	mov	r0, r5
 800377a:	f7ff ffa7 	bl	80036cc <_fflush_r>
 800377e:	b938      	cbnz	r0, 8003790 <__swbuf_r+0x74>
 8003780:	4638      	mov	r0, r7
 8003782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003784:	4621      	mov	r1, r4
 8003786:	4628      	mov	r0, r5
 8003788:	f000 f806 	bl	8003798 <__swsetup_r>
 800378c:	2800      	cmp	r0, #0
 800378e:	d0d5      	beq.n	800373c <__swbuf_r+0x20>
 8003790:	f04f 37ff 	mov.w	r7, #4294967295
 8003794:	e7f4      	b.n	8003780 <__swbuf_r+0x64>
	...

08003798 <__swsetup_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <__swsetup_r+0xac>)
 800379c:	4605      	mov	r5, r0
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	460c      	mov	r4, r1
 80037a2:	b118      	cbz	r0, 80037ac <__swsetup_r+0x14>
 80037a4:	6a03      	ldr	r3, [r0, #32]
 80037a6:	b90b      	cbnz	r3, 80037ac <__swsetup_r+0x14>
 80037a8:	f7ff fa3c 	bl	8002c24 <__sinit>
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037b2:	0718      	lsls	r0, r3, #28
 80037b4:	d422      	bmi.n	80037fc <__swsetup_r+0x64>
 80037b6:	06d9      	lsls	r1, r3, #27
 80037b8:	d407      	bmi.n	80037ca <__swsetup_r+0x32>
 80037ba:	2309      	movs	r3, #9
 80037bc:	602b      	str	r3, [r5, #0]
 80037be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037c2:	f04f 30ff 	mov.w	r0, #4294967295
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	e034      	b.n	8003834 <__swsetup_r+0x9c>
 80037ca:	0758      	lsls	r0, r3, #29
 80037cc:	d512      	bpl.n	80037f4 <__swsetup_r+0x5c>
 80037ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d0:	b141      	cbz	r1, 80037e4 <__swsetup_r+0x4c>
 80037d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037d6:	4299      	cmp	r1, r3
 80037d8:	d002      	beq.n	80037e0 <__swsetup_r+0x48>
 80037da:	4628      	mov	r0, r5
 80037dc:	f7ff fb2a 	bl	8002e34 <_free_r>
 80037e0:	2300      	movs	r3, #0
 80037e2:	6363      	str	r3, [r4, #52]	; 0x34
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037ea:	81a3      	strh	r3, [r4, #12]
 80037ec:	2300      	movs	r3, #0
 80037ee:	6063      	str	r3, [r4, #4]
 80037f0:	6923      	ldr	r3, [r4, #16]
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f043 0308 	orr.w	r3, r3, #8
 80037fa:	81a3      	strh	r3, [r4, #12]
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	b94b      	cbnz	r3, 8003814 <__swsetup_r+0x7c>
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380a:	d003      	beq.n	8003814 <__swsetup_r+0x7c>
 800380c:	4621      	mov	r1, r4
 800380e:	4628      	mov	r0, r5
 8003810:	f000 f85d 	bl	80038ce <__smakebuf_r>
 8003814:	89a0      	ldrh	r0, [r4, #12]
 8003816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800381a:	f010 0301 	ands.w	r3, r0, #1
 800381e:	d00a      	beq.n	8003836 <__swsetup_r+0x9e>
 8003820:	2300      	movs	r3, #0
 8003822:	60a3      	str	r3, [r4, #8]
 8003824:	6963      	ldr	r3, [r4, #20]
 8003826:	425b      	negs	r3, r3
 8003828:	61a3      	str	r3, [r4, #24]
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	b943      	cbnz	r3, 8003840 <__swsetup_r+0xa8>
 800382e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003832:	d1c4      	bne.n	80037be <__swsetup_r+0x26>
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	0781      	lsls	r1, r0, #30
 8003838:	bf58      	it	pl
 800383a:	6963      	ldrpl	r3, [r4, #20]
 800383c:	60a3      	str	r3, [r4, #8]
 800383e:	e7f4      	b.n	800382a <__swsetup_r+0x92>
 8003840:	2000      	movs	r0, #0
 8003842:	e7f7      	b.n	8003834 <__swsetup_r+0x9c>
 8003844:	20000064 	.word	0x20000064

08003848 <_sbrk_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	2300      	movs	r3, #0
 800384c:	4d05      	ldr	r5, [pc, #20]	; (8003864 <_sbrk_r+0x1c>)
 800384e:	4604      	mov	r4, r0
 8003850:	4608      	mov	r0, r1
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	f7fc ff76 	bl	8000744 <_sbrk>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_sbrk_r+0x1a>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_sbrk_r+0x1a>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	20000288 	.word	0x20000288

08003868 <memchr>:
 8003868:	4603      	mov	r3, r0
 800386a:	b510      	push	{r4, lr}
 800386c:	b2c9      	uxtb	r1, r1
 800386e:	4402      	add	r2, r0
 8003870:	4293      	cmp	r3, r2
 8003872:	4618      	mov	r0, r3
 8003874:	d101      	bne.n	800387a <memchr+0x12>
 8003876:	2000      	movs	r0, #0
 8003878:	e003      	b.n	8003882 <memchr+0x1a>
 800387a:	7804      	ldrb	r4, [r0, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	428c      	cmp	r4, r1
 8003880:	d1f6      	bne.n	8003870 <memchr+0x8>
 8003882:	bd10      	pop	{r4, pc}

08003884 <__swhatbuf_r>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	460c      	mov	r4, r1
 8003888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800388c:	4615      	mov	r5, r2
 800388e:	2900      	cmp	r1, #0
 8003890:	461e      	mov	r6, r3
 8003892:	b096      	sub	sp, #88	; 0x58
 8003894:	da0c      	bge.n	80038b0 <__swhatbuf_r+0x2c>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	2100      	movs	r1, #0
 800389a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800389e:	bf0c      	ite	eq
 80038a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80038a4:	2340      	movne	r3, #64	; 0x40
 80038a6:	2000      	movs	r0, #0
 80038a8:	6031      	str	r1, [r6, #0]
 80038aa:	602b      	str	r3, [r5, #0]
 80038ac:	b016      	add	sp, #88	; 0x58
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	466a      	mov	r2, sp
 80038b2:	f000 f849 	bl	8003948 <_fstat_r>
 80038b6:	2800      	cmp	r0, #0
 80038b8:	dbed      	blt.n	8003896 <__swhatbuf_r+0x12>
 80038ba:	9901      	ldr	r1, [sp, #4]
 80038bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80038c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80038c4:	4259      	negs	r1, r3
 80038c6:	4159      	adcs	r1, r3
 80038c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038cc:	e7eb      	b.n	80038a6 <__swhatbuf_r+0x22>

080038ce <__smakebuf_r>:
 80038ce:	898b      	ldrh	r3, [r1, #12]
 80038d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038d2:	079d      	lsls	r5, r3, #30
 80038d4:	4606      	mov	r6, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	d507      	bpl.n	80038ea <__smakebuf_r+0x1c>
 80038da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038de:	6023      	str	r3, [r4, #0]
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	2301      	movs	r3, #1
 80038e4:	6163      	str	r3, [r4, #20]
 80038e6:	b002      	add	sp, #8
 80038e8:	bd70      	pop	{r4, r5, r6, pc}
 80038ea:	466a      	mov	r2, sp
 80038ec:	ab01      	add	r3, sp, #4
 80038ee:	f7ff ffc9 	bl	8003884 <__swhatbuf_r>
 80038f2:	9900      	ldr	r1, [sp, #0]
 80038f4:	4605      	mov	r5, r0
 80038f6:	4630      	mov	r0, r6
 80038f8:	f7ff fb04 	bl	8002f04 <_malloc_r>
 80038fc:	b948      	cbnz	r0, 8003912 <__smakebuf_r+0x44>
 80038fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003902:	059a      	lsls	r2, r3, #22
 8003904:	d4ef      	bmi.n	80038e6 <__smakebuf_r+0x18>
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	f043 0302 	orr.w	r3, r3, #2
 800390e:	81a3      	strh	r3, [r4, #12]
 8003910:	e7e3      	b.n	80038da <__smakebuf_r+0xc>
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	6020      	str	r0, [r4, #0]
 8003916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391a:	81a3      	strh	r3, [r4, #12]
 800391c:	9b00      	ldr	r3, [sp, #0]
 800391e:	6120      	str	r0, [r4, #16]
 8003920:	6163      	str	r3, [r4, #20]
 8003922:	9b01      	ldr	r3, [sp, #4]
 8003924:	b15b      	cbz	r3, 800393e <__smakebuf_r+0x70>
 8003926:	4630      	mov	r0, r6
 8003928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800392c:	f000 f81e 	bl	800396c <_isatty_r>
 8003930:	b128      	cbz	r0, 800393e <__smakebuf_r+0x70>
 8003932:	89a3      	ldrh	r3, [r4, #12]
 8003934:	f023 0303 	bic.w	r3, r3, #3
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	81a3      	strh	r3, [r4, #12]
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	431d      	orrs	r5, r3
 8003942:	81a5      	strh	r5, [r4, #12]
 8003944:	e7cf      	b.n	80038e6 <__smakebuf_r+0x18>
	...

08003948 <_fstat_r>:
 8003948:	b538      	push	{r3, r4, r5, lr}
 800394a:	2300      	movs	r3, #0
 800394c:	4d06      	ldr	r5, [pc, #24]	; (8003968 <_fstat_r+0x20>)
 800394e:	4604      	mov	r4, r0
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	602b      	str	r3, [r5, #0]
 8003956:	f7fc fecf 	bl	80006f8 <_fstat>
 800395a:	1c43      	adds	r3, r0, #1
 800395c:	d102      	bne.n	8003964 <_fstat_r+0x1c>
 800395e:	682b      	ldr	r3, [r5, #0]
 8003960:	b103      	cbz	r3, 8003964 <_fstat_r+0x1c>
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	bd38      	pop	{r3, r4, r5, pc}
 8003966:	bf00      	nop
 8003968:	20000288 	.word	0x20000288

0800396c <_isatty_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	2300      	movs	r3, #0
 8003970:	4d05      	ldr	r5, [pc, #20]	; (8003988 <_isatty_r+0x1c>)
 8003972:	4604      	mov	r4, r0
 8003974:	4608      	mov	r0, r1
 8003976:	602b      	str	r3, [r5, #0]
 8003978:	f7fc fecd 	bl	8000716 <_isatty>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_isatty_r+0x1a>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_isatty_r+0x1a>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	20000288 	.word	0x20000288

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
