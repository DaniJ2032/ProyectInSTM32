
8_GeneracionDeFrameBeta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003d24  08003d24  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d24  08003d24  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000010  08003d3c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003d3c  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e59a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000272a  00000000  00000000  0002e616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00030d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab8  00000000  00000000  00031b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cba  00000000  00000000  000325d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cda  00000000  00000000  0004b28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f147  00000000  00000000  0005cf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037e4  00000000  00000000  000ec0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000ef890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ccc 	.word	0x08003ccc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003ccc 	.word	0x08003ccc

0800014c <ADC_Read>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;

uint16_t ADC_Read()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&adc1);               // Inicio el ADC   
 8000150:	4806      	ldr	r0, [pc, #24]	; (800016c <ADC_Read+0x20>)
 8000152:	f000 fd83 	bl	8000c5c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&adc1,1); // Conversi√≥n por interrup
 8000156:	2101      	movs	r1, #1
 8000158:	4804      	ldr	r0, [pc, #16]	; (800016c <ADC_Read+0x20>)
 800015a:	f000 fe2d 	bl	8000db8 <HAL_ADC_PollForConversion>
    return (HAL_ADC_GetValue(&adc1));   // obtengo el valor del adc
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <ADC_Read+0x20>)
 8000160:	f000 ff30 	bl	8000fc4 <HAL_ADC_GetValue>
 8000164:	4603      	mov	r3, r0
 8000166:	b29b      	uxth	r3, r3
}
 8000168:	4618      	mov	r0, r3
 800016a:	bd80      	pop	{r7, pc}
 800016c:	2000002c 	.word	0x2000002c

08000170 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000182:	4a19      	ldr	r2, [pc, #100]	; (80001e8 <MX_ADC1_Init+0x78>)
 8000184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000188:	2200      	movs	r2, #0
 800018a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800018c:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000192:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000194:	2200      	movs	r2, #0
 8000196:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <MX_ADC1_Init+0x74>)
 800019a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800019e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ae:	f000 fc7d 	bl	8000aac <HAL_ADC_Init>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001b8:	f000 fa65 	bl	8000686 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001bc:	2300      	movs	r3, #0
 80001be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001c0:	2301      	movs	r3, #1
 80001c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ce:	f000 ff05 	bl	8000fdc <HAL_ADC_ConfigChannel>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001d8:	f000 fa55 	bl	8000686 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001dc:	bf00      	nop
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a14      	ldr	r2, [pc, #80]	; (8000258 <HAL_ADC_MspInit+0x6c>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d121      	bne.n	8000250 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <HAL_ADC_MspInit+0x70>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a0c      	ldr	r2, [pc, #48]	; (800025c <HAL_ADC_MspInit+0x70>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800023c:	2301      	movs	r3, #1
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000240:	2303      	movs	r3, #3
 8000242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4619      	mov	r1, r3
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <HAL_ADC_MspInit+0x74>)
 800024c:	f001 fb7c 	bl	8001948 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40012400 	.word	0x40012400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <MX_DMA_Init+0x38>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a0b      	ldr	r2, [pc, #44]	; (800029c <MX_DMA_Init+0x38>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	6153      	str	r3, [r2, #20]
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_DMA_Init+0x38>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2100      	movs	r1, #0
 8000286:	200f      	movs	r0, #15
 8000288:	f001 f913 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800028c:	200f      	movs	r0, #15
 800028e:	f001 f92c 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000

080002a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b4:	4b1d      	ldr	r3, [pc, #116]	; (800032c <MX_GPIO_Init+0x8c>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a1c      	ldr	r2, [pc, #112]	; (800032c <MX_GPIO_Init+0x8c>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_GPIO_Init+0x8c>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0320 	and.w	r3, r3, #32
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_GPIO_Init+0x8c>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a16      	ldr	r2, [pc, #88]	; (800032c <MX_GPIO_Init+0x8c>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_GPIO_Init+0x8c>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0304 	and.w	r3, r3, #4
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_GPIO_Init+0x8c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a10      	ldr	r2, [pc, #64]	; (800032c <MX_GPIO_Init+0x8c>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_GPIO_Init+0x8c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0308 	and.w	r3, r3, #8
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2107      	movs	r1, #7
 8000300:	480b      	ldr	r0, [pc, #44]	; (8000330 <MX_GPIO_Init+0x90>)
 8000302:	f001 fca5 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000306:	2307      	movs	r3, #7
 8000308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2302      	movs	r3, #2
 8000314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_GPIO_Init+0x90>)
 800031e:	f001 fb13 	bl	8001948 <HAL_GPIO_Init>

}
 8000322:	bf00      	nop
 8000324:	3720      	adds	r7, #32
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	40010c00 	.word	0x40010c00

08000334 <main>:
void generateFrameTx(charRxFrame_t rxDataFramechar);


uint8_t codeCRC8(uint8_t *dataFrame, uint8_t longitud);

int main(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0

  //-- Inicializacion de bloques --
  HAL_Init();
 800033a:	f000 fb55 	bl	80009e8 <HAL_Init>
  SystemClock_Config();
 800033e:	f000 f947 	bl	80005d0 <SystemClock_Config>
  MX_GPIO_Init();
 8000342:	f7ff ffad 	bl	80002a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000346:	f7ff ff13 	bl	8000170 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800034a:	f000 fa7f 	bl	800084c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800034e:	f000 fa0d 	bl	800076c <MX_TIM2_Init>
  MX_DMA_Init();
 8000352:	f7ff ff87 	bl	8000264 <MX_DMA_Init>
  // Inicializamos un timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000356:	4809      	ldr	r0, [pc, #36]	; (800037c <main+0x48>)
 8000358:	f002 fa5e 	bl	8002818 <HAL_TIM_Base_Start_IT>

  charRxFrame_t rxDataFramechar={0};
 800035c:	463b      	mov	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	809a      	strh	r2, [r3, #4]

  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxDataFramechar,sizeof(rxDataFramechar));
 8000364:	463b      	mov	r3, r7
 8000366:	2206      	movs	r2, #6
 8000368:	4619      	mov	r1, r3
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <main+0x4c>)
 800036c:	f002 fedd 	bl	800312a <HAL_UART_Receive_IT>


	  //ARREGLAR
//	  rxDataFramechar = ProcessReceivedFrame();
//	  HAL_UART_Receive_IT(&huart1, rxDataFramechar.tramaEnvioChar,sizeof(rxDataFramechar));
	  generateFrameTx(rxDataFramechar);
 8000370:	463b      	mov	r3, r7
 8000372:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000376:	f000 f817 	bl	80003a8 <generateFrameTx>
 800037a:	e7f9      	b.n	8000370 <main+0x3c>
 800037c:	20000080 	.word	0x20000080
 8000380:	200000c8 	.word	0x200000c8

08000384 <HAL_UART_RxCpltCallback>:
//
//	return rxDataFramechar;
//}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]

	static charRxFrame_t rxDataFramechar;

	if (huart->Instance == USART1){}

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxDataFramechar,sizeof(rxDataFramechar));
 800038c:	2206      	movs	r2, #6
 800038e:	4904      	ldr	r1, [pc, #16]	; (80003a0 <HAL_UART_RxCpltCallback+0x1c>)
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <HAL_UART_RxCpltCallback+0x20>)
 8000392:	f002 feca 	bl	800312a <HAL_UART_Receive_IT>
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000005c 	.word	0x2000005c
 80003a4:	200000c8 	.word	0x200000c8

080003a8 <generateFrameTx>:

void generateFrameTx(charRxFrame_t rxDataFramechar){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	463b      	mov	r3, r7
 80003b0:	e883 0003 	stmia.w	r3, {r0, r1}
	static frame_t			dataFrame = {0};
	static uint16_t			lecturaAdc;
	static unsigned char	count = 0;
	static unsigned char	contador = 1;

			while(contador<=8){
 80003b4:	e07c      	b.n	80004b0 <generateFrameTx+0x108>

				lecturaAdc = ADC_Read(); //Lectura del ADC
 80003b6:	f7ff fec9 	bl	800014c <ADC_Read>
 80003ba:	4603      	mov	r3, r0
 80003bc:	461a      	mov	r2, r3
 80003be:	4b44      	ldr	r3, [pc, #272]	; (80004d0 <generateFrameTx+0x128>)
 80003c0:	801a      	strh	r2, [r3, #0]
				switch (contador){
 80003c2:	4b44      	ldr	r3, [pc, #272]	; (80004d4 <generateFrameTx+0x12c>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	2b07      	cmp	r3, #7
 80003ca:	d865      	bhi.n	8000498 <generateFrameTx+0xf0>
 80003cc:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <generateFrameTx+0x2c>)
 80003ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d2:	bf00      	nop
 80003d4:	080003f5 	.word	0x080003f5
 80003d8:	080003ff 	.word	0x080003ff
 80003dc:	08000409 	.word	0x08000409
 80003e0:	08000413 	.word	0x08000413
 80003e4:	0800041d 	.word	0x0800041d
 80003e8:	08000427 	.word	0x08000427
 80003ec:	08000431 	.word	0x08000431
 80003f0:	0800043b 	.word	0x0800043b

				case 1: dataFrame.inA1 = lecturaAdc; break;
 80003f4:	4b36      	ldr	r3, [pc, #216]	; (80004d0 <generateFrameTx+0x128>)
 80003f6:	881a      	ldrh	r2, [r3, #0]
 80003f8:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <generateFrameTx+0x130>)
 80003fa:	805a      	strh	r2, [r3, #2]
 80003fc:	e04c      	b.n	8000498 <generateFrameTx+0xf0>
				case 2: dataFrame.inA2 = lecturaAdc; break;
 80003fe:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <generateFrameTx+0x128>)
 8000400:	881a      	ldrh	r2, [r3, #0]
 8000402:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <generateFrameTx+0x130>)
 8000404:	809a      	strh	r2, [r3, #4]
 8000406:	e047      	b.n	8000498 <generateFrameTx+0xf0>
				case 3: dataFrame.inA3 = lecturaAdc; break;
 8000408:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <generateFrameTx+0x128>)
 800040a:	881a      	ldrh	r2, [r3, #0]
 800040c:	4b32      	ldr	r3, [pc, #200]	; (80004d8 <generateFrameTx+0x130>)
 800040e:	80da      	strh	r2, [r3, #6]
 8000410:	e042      	b.n	8000498 <generateFrameTx+0xf0>
				case 4: dataFrame.inA4 = lecturaAdc; break;
 8000412:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <generateFrameTx+0x128>)
 8000414:	881a      	ldrh	r2, [r3, #0]
 8000416:	4b30      	ldr	r3, [pc, #192]	; (80004d8 <generateFrameTx+0x130>)
 8000418:	811a      	strh	r2, [r3, #8]
 800041a:	e03d      	b.n	8000498 <generateFrameTx+0xf0>
				case 5: dataFrame.inA5 = lecturaAdc; break;
 800041c:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <generateFrameTx+0x128>)
 800041e:	881a      	ldrh	r2, [r3, #0]
 8000420:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <generateFrameTx+0x130>)
 8000422:	815a      	strh	r2, [r3, #10]
 8000424:	e038      	b.n	8000498 <generateFrameTx+0xf0>
				case 6: dataFrame.inA6 = lecturaAdc; break;
 8000426:	4b2a      	ldr	r3, [pc, #168]	; (80004d0 <generateFrameTx+0x128>)
 8000428:	881a      	ldrh	r2, [r3, #0]
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <generateFrameTx+0x130>)
 800042c:	819a      	strh	r2, [r3, #12]
 800042e:	e033      	b.n	8000498 <generateFrameTx+0xf0>
				case 7: dataFrame.inA7 = lecturaAdc; break;
 8000430:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <generateFrameTx+0x128>)
 8000432:	881a      	ldrh	r2, [r3, #0]
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <generateFrameTx+0x130>)
 8000436:	81da      	strh	r2, [r3, #14]
 8000438:	e02e      	b.n	8000498 <generateFrameTx+0xf0>
				case 8:
						dataFrame.inA8 = lecturaAdc;
 800043a:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <generateFrameTx+0x128>)
 800043c:	881a      	ldrh	r2, [r3, #0]
 800043e:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <generateFrameTx+0x130>)
 8000440:	821a      	strh	r2, [r3, #16]
						count++;
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <generateFrameTx+0x134>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3301      	adds	r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b24      	ldr	r3, [pc, #144]	; (80004dc <generateFrameTx+0x134>)
 800044c:	701a      	strb	r2, [r3, #0]
						dataFrame.start = 0x1B;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <generateFrameTx+0x130>)
 8000450:	221b      	movs	r2, #27
 8000452:	701a      	strb	r2, [r3, #0]
						dataFrame.count = count;
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <generateFrameTx+0x134>)
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <generateFrameTx+0x130>)
 800045a:	705a      	strb	r2, [r3, #1]
						dataFrame.outA1 = rxDataFramechar.tramaEnvio.outA1;		// Tiene que venir desde QT
 800045c:	78bb      	ldrb	r3, [r7, #2]
 800045e:	b29a      	uxth	r2, r3
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <generateFrameTx+0x130>)
 8000462:	825a      	strh	r2, [r3, #18]
						dataFrame.outA2 = rxDataFramechar.tramaEnvio.outA2;		// Tiene que venir desde QT
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	b29a      	uxth	r2, r3
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <generateFrameTx+0x130>)
 800046a:	829a      	strh	r2, [r3, #20]
						dataFrame.insDig =  0xDE;
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <generateFrameTx+0x130>)
 800046e:	22de      	movs	r2, #222	; 0xde
 8000470:	759a      	strb	r2, [r3, #22]
						dataFrame.outsDig = rxDataFramechar.tramaEnvio.outsDig;	// Tiene que venir desde QT
 8000472:	793a      	ldrb	r2, [r7, #4]
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <generateFrameTx+0x130>)
 8000476:	75da      	strb	r2, [r3, #23]

						dataFrame.crc8 = codeCRC8((uint8_t *)&dataFrame, sizeof(dataFrame)-2);
 8000478:	2118      	movs	r1, #24
 800047a:	4817      	ldr	r0, [pc, #92]	; (80004d8 <generateFrameTx+0x130>)
 800047c:	f000 f86e 	bl	800055c <codeCRC8>
 8000480:	4603      	mov	r3, r0
 8000482:	461a      	mov	r2, r3
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <generateFrameTx+0x130>)
 8000486:	761a      	strb	r2, [r3, #24]

						HAL_UART_Transmit(&huart1, (uint8_t *)&dataFrame, sizeof(dataFrame),0xFFFF);
 8000488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800048c:	221a      	movs	r2, #26
 800048e:	4912      	ldr	r1, [pc, #72]	; (80004d8 <generateFrameTx+0x130>)
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <generateFrameTx+0x138>)
 8000492:	f002 fdc7 	bl	8003024 <HAL_UART_Transmit>

			//			printf("Trama enviada: %u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u \r\n", dataFrame.start, dataFrame.count,
			//					dataFrame.inA1, dataFrame.inA2, dataFrame.inA3, dataFrame.inA4, dataFrame.inA5,
			//					dataFrame.inA6, dataFrame.inA7, dataFrame.inA8, dataFrame.outA1, dataFrame.outA2,
			//					dataFrame.insDig,dataFrame.outsDig, dataFrame.crc8);
						break;
 8000496:	bf00      	nop
				}
				if (sweepMux(&htim2) == true) contador++;
 8000498:	4812      	ldr	r0, [pc, #72]	; (80004e4 <generateFrameTx+0x13c>)
 800049a:	f000 f825 	bl	80004e8 <sweepMux>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d005      	beq.n	80004b0 <generateFrameTx+0x108>
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <generateFrameTx+0x12c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <generateFrameTx+0x12c>)
 80004ae:	701a      	strb	r2, [r3, #0]
			while(contador<=8){
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <generateFrameTx+0x12c>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b08      	cmp	r3, #8
 80004b6:	f67f af7e 	bls.w	80003b6 <generateFrameTx+0xe>
//				if (contador == 9 ) contador =1;
			}

//			contador = sweepMux(&htim2);
			if (contador == 9 ) contador =1;
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <generateFrameTx+0x12c>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b09      	cmp	r3, #9
 80004c0:	d102      	bne.n	80004c8 <generateFrameTx+0x120>
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <generateFrameTx+0x12c>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]

}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000062 	.word	0x20000062
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000064 	.word	0x20000064
 80004dc:	2000007e 	.word	0x2000007e
 80004e0:	200000c8 	.word	0x200000c8
 80004e4:	20000080 	.word	0x20000080

080004e8 <sweepMux>:

bool sweepMux(TIM_HandleTypeDef *htim){	//Contador a una frec de 12kHz
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]

	static unsigned char contador = 1;

	if (htim->Instance == TIM2){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f8:	d127      	bne.n	800054a <sweepMux+0x62>


        HAL_GPIO_WritePin(GPIOB, PIN1, (contador & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <sweepMux+0x6c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	b2db      	uxtb	r3, r3
 8000504:	461a      	mov	r2, r3
 8000506:	2101      	movs	r1, #1
 8000508:	4813      	ldr	r0, [pc, #76]	; (8000558 <sweepMux+0x70>)
 800050a:	f001 fba1 	bl	8001c50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, PIN2, (contador & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <sweepMux+0x6c>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	105b      	asrs	r3, r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	2102      	movs	r1, #2
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <sweepMux+0x70>)
 8000522:	f001 fb95 	bl	8001c50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, PIN3, (contador & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <sweepMux+0x6c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	109b      	asrs	r3, r3, #2
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	2104      	movs	r1, #4
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <sweepMux+0x70>)
 800053a:	f001 fb89 	bl	8001c50 <HAL_GPIO_WritePin>
    	contador++;
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <sweepMux+0x6c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b03      	ldr	r3, [pc, #12]	; (8000554 <sweepMux+0x6c>)
 8000548:	701a      	strb	r2, [r3, #0]
	}

	return true;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000001 	.word	0x20000001
 8000558:	40010c00 	.word	0x40010c00

0800055c <codeCRC8>:


uint8_t codeCRC8(uint8_t *dataFrame, uint8_t longitud) {
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]

    uint8_t polinomio_generador = 0x07; // Polinomio generador CRC-8 (0x07)
 8000568:	2307      	movs	r3, #7
 800056a:	733b      	strb	r3, [r7, #12]
    uint8_t reg_crc = 0; // Inicializa el registro CRC en cero
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < longitud; i++) { // Se recorre la estructura
 8000570:	2300      	movs	r3, #0
 8000572:	73bb      	strb	r3, [r7, #14]
 8000574:	e022      	b.n	80005bc <codeCRC8+0x60>
        reg_crc ^= dataFrame[i]; // Realiza un XOR con el byte actual
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	4413      	add	r3, r2
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	4053      	eors	r3, r2
 8000582:	73fb      	strb	r3, [r7, #15]

        for (uint8_t j = 0; j < 8; j++) {
 8000584:	2300      	movs	r3, #0
 8000586:	737b      	strb	r3, [r7, #13]
 8000588:	e012      	b.n	80005b0 <codeCRC8+0x54>

            if (reg_crc & 0x80) {	// // Si el bit MSB = 1
 800058a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058e:	2b00      	cmp	r3, #0
 8000590:	da08      	bge.n	80005a4 <codeCRC8+0x48>
				/*se realiza una operaci√≥n XOR con el polinomio generador y se
				 * desplaza el registro CRC un bit a la izquierda*/
                reg_crc = (reg_crc << 1) ^ polinomio_generador;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	b25a      	sxtb	r2, r3
 8000598:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800059c:	4053      	eors	r3, r2
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	e002      	b.n	80005aa <codeCRC8+0x4e>

             // Si el MSB = 0 Simplemente se desplaza 1 bit a la izquierda el reg_crc
            }else reg_crc <<= 1;
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 80005aa:	7b7b      	ldrb	r3, [r7, #13]
 80005ac:	3301      	adds	r3, #1
 80005ae:	737b      	strb	r3, [r7, #13]
 80005b0:	7b7b      	ldrb	r3, [r7, #13]
 80005b2:	2b07      	cmp	r3, #7
 80005b4:	d9e9      	bls.n	800058a <codeCRC8+0x2e>
    for (uint8_t i = 0; i < longitud; i++) { // Se recorre la estructura
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	3301      	adds	r3, #1
 80005ba:	73bb      	strb	r3, [r7, #14]
 80005bc:	7bba      	ldrb	r2, [r7, #14]
 80005be:	78fb      	ldrb	r3, [r7, #3]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3d8      	bcc.n	8000576 <codeCRC8+0x1a>
        }
    }

    return reg_crc;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <SystemClock_Config>:


void SystemClock_Config(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005da:	2228      	movs	r2, #40	; 0x28
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb48 	bl	8003c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060e:	2301      	movs	r3, #1
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800061c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fb2a 	bl	8001c80 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000632:	f000 f828 	bl	8000686 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000646:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fd96 	bl	8002184 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x92>
    Error_Handler();
 800065e:	f000 f812 	bl	8000686 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000662:	2302      	movs	r3, #2
 8000664:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800066a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f001 ff16 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800067a:	f000 f804 	bl	8000686 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <Error_Handler>:


void Error_Handler(void){
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068a:	b672      	cpsid	i
}
 800068c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1){}
 800068e:	e7fe      	b.n	800068e <Error_Handler+0x8>

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_MspInit+0x40>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <HAL_MspInit+0x40>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_MspInit+0x40>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HAL_MspInit+0x40>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <HAL_MspInit+0x40>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_MspInit+0x40>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	40021000 	.word	0x40021000

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <NMI_Handler+0x4>

080006da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <HardFault_Handler+0x4>

080006e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <MemManage_Handler+0x4>

080006e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <BusFault_Handler+0x4>

080006ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <UsageFault_Handler+0x4>

080006f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071a:	f000 f9ab 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <DMA1_Channel5_IRQHandler+0x10>)
 800072a:	f001 f807 	bl	800173c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000110 	.word	0x20000110

08000738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <TIM2_IRQHandler+0x10>)
 800073e:	f002 f8bd 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000080 	.word	0x20000080

0800074c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <USART1_IRQHandler+0x10>)
 8000752:	f002 fd0f 	bl	8003174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000c8 	.word	0x200000c8

08000760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_TIM2_Init+0x94>)
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_TIM2_Init+0x94>)
 8000792:	2247      	movs	r2, #71	; 0x47
 8000794:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_TIM2_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_TIM2_Init+0x94>)
 800079e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_TIM2_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_TIM2_Init+0x94>)
 80007b2:	f001 ffe1 	bl	8002778 <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007bc:	f7ff ff63 	bl	8000686 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ce:	f002 f97d 	bl	8002acc <HAL_TIM_ConfigClockSource>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007d8:	f7ff ff55 	bl	8000686 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_TIM2_Init+0x94>)
 80007ea:	f002 fb5b 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007f4:	f7ff ff47 	bl	8000686 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000080 	.word	0x20000080

08000804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000814:	d113      	bne.n	800083e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_TIM_Base_MspInit+0x44>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <HAL_TIM_Base_MspInit+0x44>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_TIM_Base_MspInit+0x44>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	201c      	movs	r0, #28
 8000834:	f000 fe3d 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000838:	201c      	movs	r0, #28
 800083a:	f000 fe56 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_USART1_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000858:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800085c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART1_UART_Init+0x4c>)
 8000884:	f002 fb7e 	bl	8002f84 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f7ff fefa 	bl	8000686 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000c8 	.word	0x200000c8
 800089c:	40013800 	.word	0x40013800

080008a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a33      	ldr	r2, [pc, #204]	; (8000988 <HAL_UART_MspInit+0xe8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d15f      	bne.n	8000980 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c0:	4b32      	ldr	r3, [pc, #200]	; (800098c <HAL_UART_MspInit+0xec>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a31      	ldr	r2, [pc, #196]	; (800098c <HAL_UART_MspInit+0xec>)
 80008c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b2f      	ldr	r3, [pc, #188]	; (800098c <HAL_UART_MspInit+0xec>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <HAL_UART_MspInit+0xec>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a2b      	ldr	r2, [pc, #172]	; (800098c <HAL_UART_MspInit+0xec>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <HAL_UART_MspInit+0xec>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	4822      	ldr	r0, [pc, #136]	; (8000990 <HAL_UART_MspInit+0xf0>)
 8000906:	f001 f81f 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800090a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	481c      	ldr	r0, [pc, #112]	; (8000990 <HAL_UART_MspInit+0xf0>)
 8000920:	f001 f812 	bl	8001948 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_UART_MspInit+0xf4>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <HAL_UART_MspInit+0xf8>)
 8000928:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <HAL_UART_MspInit+0xf4>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0xf4>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_UART_MspInit+0xf4>)
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0xf4>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_UART_MspInit+0xf4>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_UART_MspInit+0xf4>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0xf4>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <HAL_UART_MspInit+0xf4>)
 8000956:	f000 fde3 	bl	8001520 <HAL_DMA_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000960:	f7ff fe91 	bl	8000686 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <HAL_UART_MspInit+0xf4>)
 8000968:	63da      	str	r2, [r3, #60]	; 0x3c
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_UART_MspInit+0xf4>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2025      	movs	r0, #37	; 0x25
 8000976:	f000 fd9c 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800097a:	2025      	movs	r0, #37	; 0x25
 800097c:	f000 fdb5 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40013800 	.word	0x40013800
 800098c:	40021000 	.word	0x40021000
 8000990:	40010800 	.word	0x40010800
 8000994:	20000110 	.word	0x20000110
 8000998:	40020058 	.word	0x40020058

0800099c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800099c:	f7ff fee0 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009a2:	490c      	ldr	r1, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a09      	ldr	r2, [pc, #36]	; (80009dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b8:	4c09      	ldr	r4, [pc, #36]	; (80009e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f003 f95d 	bl	8003c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fcb3 	bl	8000334 <main>
  bx lr
 80009ce:	4770      	bx	lr
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009d8:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 80009dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009e0:	20000158 	.word	0x20000158

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 fd4f 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fe44 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fd67 	bl	8001506 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 fd2f 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000004 	.word	0x20000004
 8000a6c:	2000000c 	.word	0x2000000c
 8000a70:	20000008 	.word	0x20000008

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <HAL_IncTick+0x20>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	2000000c 	.word	0x2000000c
 8000a94:	20000154 	.word	0x20000154

08000a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20000154 	.word	0x20000154

08000aac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e0be      	b.n	8000c4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d109      	bne.n	8000af0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fb7e 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 fbc5 	bl	8001280 <ADC_ConversionStop_Disable>
 8000af6:	4603      	mov	r3, r0
 8000af8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f040 8099 	bne.w	8000c3a <HAL_ADC_Init+0x18e>
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f040 8095 	bne.w	8000c3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b18:	f023 0302 	bic.w	r3, r3, #2
 8000b1c:	f043 0202 	orr.w	r2, r3, #2
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7b1b      	ldrb	r3, [r3, #12]
 8000b32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b44:	d003      	beq.n	8000b4e <HAL_ADC_Init+0xa2>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d102      	bne.n	8000b54 <HAL_ADC_Init+0xa8>
 8000b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b52:	e000      	b.n	8000b56 <HAL_ADC_Init+0xaa>
 8000b54:	2300      	movs	r3, #0
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7d1b      	ldrb	r3, [r3, #20]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d119      	bne.n	8000b98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7b1b      	ldrb	r3, [r3, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d109      	bne.n	8000b80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	035a      	lsls	r2, r3, #13
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	e00b      	b.n	8000b98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	f043 0220 	orr.w	r2, r3, #32
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	f043 0201 	orr.w	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <HAL_ADC_Init+0x1a8>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	430b      	orrs	r3, r1
 8000bbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc8:	d003      	beq.n	8000bd2 <HAL_ADC_Init+0x126>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d104      	bne.n	8000bdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	051b      	lsls	r3, r3, #20
 8000bda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_ADC_Init+0x1ac>)
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d10b      	bne.n	8000c18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f023 0303 	bic.w	r3, r3, #3
 8000c0e:	f043 0201 	orr.w	r2, r3, #1
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c16:	e018      	b.n	8000c4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1c:	f023 0312 	bic.w	r3, r3, #18
 8000c20:	f043 0210 	orr.w	r2, r3, #16
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c38:	e007      	b.n	8000c4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	f043 0210 	orr.w	r2, r3, #16
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	ffe1f7fd 	.word	0xffe1f7fd
 8000c58:	ff1f0efe 	.word	0xff1f0efe

08000c5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d101      	bne.n	8000c76 <HAL_ADC_Start+0x1a>
 8000c72:	2302      	movs	r3, #2
 8000c74:	e098      	b.n	8000da8 <HAL_ADC_Start+0x14c>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 faa4 	bl	80011cc <ADC_Enable>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f040 8087 	bne.w	8000d9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a41      	ldr	r2, [pc, #260]	; (8000db0 <HAL_ADC_Start+0x154>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d105      	bne.n	8000cba <HAL_ADC_Start+0x5e>
 8000cae:	4b41      	ldr	r3, [pc, #260]	; (8000db4 <HAL_ADC_Start+0x158>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d115      	bne.n	8000ce6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d026      	beq.n	8000d22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ce4:	e01d      	b.n	8000d22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <HAL_ADC_Start+0x158>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d004      	beq.n	8000d06 <HAL_ADC_Start+0xaa>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <HAL_ADC_Start+0x154>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10d      	bne.n	8000d22 <HAL_ADC_Start+0xc6>
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <HAL_ADC_Start+0x158>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	f023 0206 	bic.w	r2, r3, #6
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d3a:	e002      	b.n	8000d42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f06f 0202 	mvn.w	r2, #2
 8000d52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d62:	d113      	bne.n	8000d8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d68:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <HAL_ADC_Start+0x154>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d105      	bne.n	8000d7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_ADC_Start+0x158>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d108      	bne.n	8000d8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	e00c      	b.n	8000da6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	e003      	b.n	8000da6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40012800 	.word	0x40012800
 8000db4:	40012400 	.word	0x40012400

08000db8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000dce:	f7ff fe63 	bl	8000a98 <HAL_GetTick>
 8000dd2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00b      	beq.n	8000dfa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de6:	f043 0220 	orr.w	r2, r3, #32
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e0d3      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d131      	bne.n	8000e6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d12a      	bne.n	8000e6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e16:	e021      	b.n	8000e5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1e:	d01d      	beq.n	8000e5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <HAL_ADC_PollForConversion+0x7e>
 8000e26:	f7ff fe37 	bl	8000a98 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d212      	bcs.n	8000e5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10b      	bne.n	8000e5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f043 0204 	orr.w	r2, r3, #4
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e0a2      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0d6      	beq.n	8000e18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e6a:	e070      	b.n	8000f4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e6c:	4b4f      	ldr	r3, [pc, #316]	; (8000fac <HAL_ADC_PollForConversion+0x1f4>)
 8000e6e:	681c      	ldr	r4, [r3, #0]
 8000e70:	2002      	movs	r0, #2
 8000e72:	f001 fbcb 	bl	800260c <HAL_RCCEx_GetPeriphCLKFreq>
 8000e76:	4603      	mov	r3, r0
 8000e78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6919      	ldr	r1, [r3, #16]
 8000e82:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <HAL_ADC_PollForConversion+0x1f8>)
 8000e84:	400b      	ands	r3, r1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_ADC_PollForConversion+0x104>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68d9      	ldr	r1, [r3, #12]
 8000e90:	4b48      	ldr	r3, [pc, #288]	; (8000fb4 <HAL_ADC_PollForConversion+0x1fc>)
 8000e92:	400b      	ands	r3, r1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d111      	bne.n	8000ebc <HAL_ADC_PollForConversion+0x104>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6919      	ldr	r1, [r3, #16]
 8000e9e:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <HAL_ADC_PollForConversion+0x200>)
 8000ea0:	400b      	ands	r3, r1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d108      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x100>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68d9      	ldr	r1, [r3, #12]
 8000eac:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_ADC_PollForConversion+0x204>)
 8000eae:	400b      	ands	r3, r1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x100>
 8000eb4:	2314      	movs	r3, #20
 8000eb6:	e020      	b.n	8000efa <HAL_ADC_PollForConversion+0x142>
 8000eb8:	2329      	movs	r3, #41	; 0x29
 8000eba:	e01e      	b.n	8000efa <HAL_ADC_PollForConversion+0x142>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6919      	ldr	r1, [r3, #16]
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <HAL_ADC_PollForConversion+0x200>)
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d106      	bne.n	8000ed8 <HAL_ADC_PollForConversion+0x120>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68d9      	ldr	r1, [r3, #12]
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <HAL_ADC_PollForConversion+0x204>)
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_ADC_PollForConversion+0x13c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6919      	ldr	r1, [r3, #16]
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <HAL_ADC_PollForConversion+0x208>)
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d108      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x140>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68d9      	ldr	r1, [r3, #12]
 8000eec:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <HAL_ADC_PollForConversion+0x208>)
 8000eee:	400b      	ands	r3, r1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x140>
 8000ef4:	2354      	movs	r3, #84	; 0x54
 8000ef6:	e000      	b.n	8000efa <HAL_ADC_PollForConversion+0x142>
 8000ef8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f00:	e021      	b.n	8000f46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d01a      	beq.n	8000f40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <HAL_ADC_PollForConversion+0x168>
 8000f10:	f7ff fdc2 	bl	8000a98 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d20f      	bcs.n	8000f40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d90b      	bls.n	8000f40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f043 0204 	orr.w	r2, r3, #4
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e030      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d8d9      	bhi.n	8000f02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f06f 0212 	mvn.w	r2, #18
 8000f56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f72:	d115      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	24924924 	.word	0x24924924
 8000fb4:	00924924 	.word	0x00924924
 8000fb8:	12492492 	.word	0x12492492
 8000fbc:	00492492 	.word	0x00492492
 8000fc0:	00249249 	.word	0x00249249

08000fc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x20>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e0dc      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x1da>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b06      	cmp	r3, #6
 800100a:	d81c      	bhi.n	8001046 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	3b05      	subs	r3, #5
 800101e:	221f      	movs	r2, #31
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	4019      	ands	r1, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3b05      	subs	r3, #5
 8001038:	fa00 f203 	lsl.w	r2, r0, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
 8001044:	e03c      	b.n	80010c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b0c      	cmp	r3, #12
 800104c:	d81c      	bhi.n	8001088 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	3b23      	subs	r3, #35	; 0x23
 8001060:	221f      	movs	r2, #31
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	4019      	ands	r1, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b23      	subs	r3, #35	; 0x23
 800107a:	fa00 f203 	lsl.w	r2, r0, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
 8001086:	e01b      	b.n	80010c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b41      	subs	r3, #65	; 0x41
 800109a:	221f      	movs	r2, #31
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4019      	ands	r1, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	3b41      	subs	r3, #65	; 0x41
 80010b4:	fa00 f203 	lsl.w	r2, r0, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d91c      	bls.n	8001102 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	3b1e      	subs	r3, #30
 80010da:	2207      	movs	r2, #7
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4019      	ands	r1, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	6898      	ldr	r0, [r3, #8]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	3b1e      	subs	r3, #30
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	e019      	b.n	8001136 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6919      	ldr	r1, [r3, #16]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	2207      	movs	r2, #7
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	4019      	ands	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6898      	ldr	r0, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	fa00 f203 	lsl.w	r2, r0, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b10      	cmp	r3, #16
 800113c:	d003      	beq.n	8001146 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001142:	2b11      	cmp	r3, #17
 8001144:	d132      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d125      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d126      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800116c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b10      	cmp	r3, #16
 8001174:	d11a      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	0c9a      	lsrs	r2, r3, #18
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800118c:	e002      	b.n	8001194 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3b01      	subs	r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <HAL_ADC_ConfigChannel+0x1b2>
 800119a:	e007      	b.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	f043 0220 	orr.w	r2, r3, #32
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40012400 	.word	0x40012400
 80011c4:	20000004 	.word	0x20000004
 80011c8:	431bde83 	.word	0x431bde83

080011cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d040      	beq.n	800126c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <ADC_Enable+0xac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1f      	ldr	r2, [pc, #124]	; (800127c <ADC_Enable+0xb0>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9b      	lsrs	r3, r3, #18
 8001206:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001208:	e002      	b.n	8001210 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3b01      	subs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001216:	f7ff fc3f 	bl	8000a98 <HAL_GetTick>
 800121a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800121c:	e01f      	b.n	800125e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800121e:	f7ff fc3b 	bl	8000a98 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d918      	bls.n	800125e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b01      	cmp	r3, #1
 8001238:	d011      	beq.n	800125e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	f043 0210 	orr.w	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e007      	b.n	800126e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b01      	cmp	r3, #1
 800126a:	d1d8      	bne.n	800121e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000004 	.word	0x20000004
 800127c:	431bde83 	.word	0x431bde83

08001280 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d12e      	bne.n	80012f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012aa:	f7ff fbf5 	bl	8000a98 <HAL_GetTick>
 80012ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012b0:	e01b      	b.n	80012ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012b2:	f7ff fbf1 	bl	8000a98 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d914      	bls.n	80012ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10d      	bne.n	80012ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	f043 0210 	orr.w	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e007      	b.n	80012fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d0dc      	beq.n	80012b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4906      	ldr	r1, [pc, #24]	; (800139c <__NVIC_EnableIRQ+0x34>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff90 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff2d 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff42 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff90 	bl	80013f4 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5f 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff35 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e043      	b.n	80015be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_DMA_Init+0xa8>)
 800153e:	4413      	add	r3, r2
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_DMA_Init+0xac>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	009a      	lsls	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_DMA_Init+0xb0>)
 8001552:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800156a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800156e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	bffdfff8 	.word	0xbffdfff8
 80015cc:	cccccccd 	.word	0xcccccccd
 80015d0:	40020000 	.word	0x40020000

080015d4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d008      	beq.n	80015fe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e020      	b.n	8001640 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d005      	beq.n	8001670 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2204      	movs	r2, #4
 8001668:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e051      	b.n	8001714 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 020e 	bic.w	r2, r2, #14
 800167e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_DMA_Abort_IT+0xd4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d029      	beq.n	80016ee <HAL_DMA_Abort_IT+0xa2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a21      	ldr	r2, [pc, #132]	; (8001724 <HAL_DMA_Abort_IT+0xd8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <HAL_DMA_Abort_IT+0x9e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <HAL_DMA_Abort_IT+0xdc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01a      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x98>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_DMA_Abort_IT+0xe0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d012      	beq.n	80016de <HAL_DMA_Abort_IT+0x92>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <HAL_DMA_Abort_IT+0xe4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00a      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x8c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_DMA_Abort_IT+0xe8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d102      	bne.n	80016d2 <HAL_DMA_Abort_IT+0x86>
 80016cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016d0:	e00e      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d6:	e00b      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016dc:	e008      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	e005      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e8:	e002      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016ea:	2310      	movs	r3, #16
 80016ec:	e000      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016ee:	2301      	movs	r3, #1
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_DMA_Abort_IT+0xec>)
 80016f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
    } 
  }
  return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40020008 	.word	0x40020008
 8001724:	4002001c 	.word	0x4002001c
 8001728:	40020030 	.word	0x40020030
 800172c:	40020044 	.word	0x40020044
 8001730:	40020058 	.word	0x40020058
 8001734:	4002006c 	.word	0x4002006c
 8001738:	40020000 	.word	0x40020000

0800173c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	2204      	movs	r2, #4
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d04f      	beq.n	8001804 <HAL_DMA_IRQHandler+0xc8>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d04a      	beq.n	8001804 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a66      	ldr	r2, [pc, #408]	; (800192c <HAL_DMA_IRQHandler+0x1f0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d029      	beq.n	80017ea <HAL_DMA_IRQHandler+0xae>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a65      	ldr	r2, [pc, #404]	; (8001930 <HAL_DMA_IRQHandler+0x1f4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xaa>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a63      	ldr	r2, [pc, #396]	; (8001934 <HAL_DMA_IRQHandler+0x1f8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01a      	beq.n	80017e0 <HAL_DMA_IRQHandler+0xa4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a62      	ldr	r2, [pc, #392]	; (8001938 <HAL_DMA_IRQHandler+0x1fc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d012      	beq.n	80017da <HAL_DMA_IRQHandler+0x9e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a60      	ldr	r2, [pc, #384]	; (800193c <HAL_DMA_IRQHandler+0x200>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00a      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x98>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a5f      	ldr	r2, [pc, #380]	; (8001940 <HAL_DMA_IRQHandler+0x204>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d102      	bne.n	80017ce <HAL_DMA_IRQHandler+0x92>
 80017c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017cc:	e00e      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017d2:	e00b      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017d8:	e008      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017de:	e005      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e4:	e002      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	e000      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017ea:	2304      	movs	r3, #4
 80017ec:	4a55      	ldr	r2, [pc, #340]	; (8001944 <HAL_DMA_IRQHandler+0x208>)
 80017ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8094 	beq.w	8001922 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001802:	e08e      	b.n	8001922 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	2202      	movs	r2, #2
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d056      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x186>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d051      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10b      	bne.n	8001844 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020a 	bic.w	r2, r2, #10
 800183a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a38      	ldr	r2, [pc, #224]	; (800192c <HAL_DMA_IRQHandler+0x1f0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d029      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x166>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a37      	ldr	r2, [pc, #220]	; (8001930 <HAL_DMA_IRQHandler+0x1f4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d022      	beq.n	800189e <HAL_DMA_IRQHandler+0x162>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a35      	ldr	r2, [pc, #212]	; (8001934 <HAL_DMA_IRQHandler+0x1f8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d01a      	beq.n	8001898 <HAL_DMA_IRQHandler+0x15c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a34      	ldr	r2, [pc, #208]	; (8001938 <HAL_DMA_IRQHandler+0x1fc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d012      	beq.n	8001892 <HAL_DMA_IRQHandler+0x156>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a32      	ldr	r2, [pc, #200]	; (800193c <HAL_DMA_IRQHandler+0x200>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00a      	beq.n	800188c <HAL_DMA_IRQHandler+0x150>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a31      	ldr	r2, [pc, #196]	; (8001940 <HAL_DMA_IRQHandler+0x204>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d102      	bne.n	8001886 <HAL_DMA_IRQHandler+0x14a>
 8001880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001884:	e00e      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 8001886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188a:	e00b      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 800188c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001890:	e008      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 8001892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001896:	e005      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 8001898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189c:	e002      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 800189e:	2320      	movs	r3, #32
 80018a0:	e000      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 80018a2:	2302      	movs	r3, #2
 80018a4:	4a27      	ldr	r2, [pc, #156]	; (8001944 <HAL_DMA_IRQHandler+0x208>)
 80018a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d034      	beq.n	8001922 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018c0:	e02f      	b.n	8001922 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2208      	movs	r2, #8
 80018c8:	409a      	lsls	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d028      	beq.n	8001924 <HAL_DMA_IRQHandler+0x1e8>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d023      	beq.n	8001924 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 020e 	bic.w	r2, r2, #14
 80018ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	2b00      	cmp	r3, #0
 8001918:	d004      	beq.n	8001924 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
    }
  }
  return;
 8001922:	bf00      	nop
 8001924:	bf00      	nop
}
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40020008 	.word	0x40020008
 8001930:	4002001c 	.word	0x4002001c
 8001934:	40020030 	.word	0x40020030
 8001938:	40020044 	.word	0x40020044
 800193c:	40020058 	.word	0x40020058
 8001940:	4002006c 	.word	0x4002006c
 8001944:	40020000 	.word	0x40020000

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b08b      	sub	sp, #44	; 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e169      	b.n	8001c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800195c:	2201      	movs	r2, #1
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8158 	bne.w	8001c2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a9a      	ldr	r2, [pc, #616]	; (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d05e      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001984:	4a98      	ldr	r2, [pc, #608]	; (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d875      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 800198a:	4a98      	ldr	r2, [pc, #608]	; (8001bec <HAL_GPIO_Init+0x2a4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d058      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001990:	4a96      	ldr	r2, [pc, #600]	; (8001bec <HAL_GPIO_Init+0x2a4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d86f      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 8001996:	4a96      	ldr	r2, [pc, #600]	; (8001bf0 <HAL_GPIO_Init+0x2a8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d052      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 800199c:	4a94      	ldr	r2, [pc, #592]	; (8001bf0 <HAL_GPIO_Init+0x2a8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d869      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019a2:	4a94      	ldr	r2, [pc, #592]	; (8001bf4 <HAL_GPIO_Init+0x2ac>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04c      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019a8:	4a92      	ldr	r2, [pc, #584]	; (8001bf4 <HAL_GPIO_Init+0x2ac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d863      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ae:	4a92      	ldr	r2, [pc, #584]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d046      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019b4:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d85d      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d82a      	bhi.n	8001a14 <HAL_GPIO_Init+0xcc>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d859      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019c2:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <HAL_GPIO_Init+0x80>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a1d 	.word	0x08001a1d
 80019d0:	08001a2f 	.word	0x08001a2f
 80019d4:	08001a71 	.word	0x08001a71
 80019d8:	08001a77 	.word	0x08001a77
 80019dc:	08001a77 	.word	0x08001a77
 80019e0:	08001a77 	.word	0x08001a77
 80019e4:	08001a77 	.word	0x08001a77
 80019e8:	08001a77 	.word	0x08001a77
 80019ec:	08001a77 	.word	0x08001a77
 80019f0:	08001a77 	.word	0x08001a77
 80019f4:	08001a77 	.word	0x08001a77
 80019f8:	08001a77 	.word	0x08001a77
 80019fc:	08001a77 	.word	0x08001a77
 8001a00:	08001a77 	.word	0x08001a77
 8001a04:	08001a77 	.word	0x08001a77
 8001a08:	08001a77 	.word	0x08001a77
 8001a0c:	08001a25 	.word	0x08001a25
 8001a10:	08001a39 	.word	0x08001a39
 8001a14:	4a79      	ldr	r2, [pc, #484]	; (8001bfc <HAL_GPIO_Init+0x2b4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a1a:	e02c      	b.n	8001a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e029      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e024      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	3308      	adds	r3, #8
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e01f      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e01a      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e013      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	611a      	str	r2, [r3, #16]
          break;
 8001a62:	e009      	b.n	8001a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a64:	2308      	movs	r3, #8
 8001a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	615a      	str	r2, [r3, #20]
          break;
 8001a6e:	e003      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          break;
 8001a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2bff      	cmp	r3, #255	; 0xff
 8001a7c:	d801      	bhi.n	8001a82 <HAL_GPIO_Init+0x13a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_Init+0x13e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3304      	adds	r3, #4
 8001a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2bff      	cmp	r3, #255	; 0xff
 8001a8c:	d802      	bhi.n	8001a94 <HAL_GPIO_Init+0x14c>
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_Init+0x152>
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	3b08      	subs	r3, #8
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	6a39      	ldr	r1, [r7, #32]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80b1 	beq.w	8001c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae0:	4a48      	ldr	r2, [pc, #288]	; (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a40      	ldr	r2, [pc, #256]	; (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d013      	beq.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3f      	ldr	r2, [pc, #252]	; (8001c0c <HAL_GPIO_Init+0x2c4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00d      	beq.n	8001b30 <HAL_GPIO_Init+0x1e8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3e      	ldr	r2, [pc, #248]	; (8001c10 <HAL_GPIO_Init+0x2c8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d007      	beq.n	8001b2c <HAL_GPIO_Init+0x1e4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3d      	ldr	r2, [pc, #244]	; (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d101      	bne.n	8001b28 <HAL_GPIO_Init+0x1e0>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e006      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e004      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b34:	2300      	movs	r3, #0
 8001b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b46:	492f      	ldr	r1, [pc, #188]	; (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	492c      	ldr	r1, [pc, #176]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4928      	ldr	r1, [pc, #160]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b88:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4922      	ldr	r1, [pc, #136]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	491e      	ldr	r1, [pc, #120]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4918      	ldr	r1, [pc, #96]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4914      	ldr	r1, [pc, #80]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d021      	beq.n	8001c1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	490e      	ldr	r1, [pc, #56]	; (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
 8001be4:	e021      	b.n	8001c2a <HAL_GPIO_Init+0x2e2>
 8001be6:	bf00      	nop
 8001be8:	10320000 	.word	0x10320000
 8001bec:	10310000 	.word	0x10310000
 8001bf0:	10220000 	.word	0x10220000
 8001bf4:	10210000 	.word	0x10210000
 8001bf8:	10120000 	.word	0x10120000
 8001bfc:	10110000 	.word	0x10110000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000
 8001c08:	40010800 	.word	0x40010800
 8001c0c:	40010c00 	.word	0x40010c00
 8001c10:	40011000 	.word	0x40011000
 8001c14:	40011400 	.word	0x40011400
 8001c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_GPIO_Init+0x304>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4909      	ldr	r1, [pc, #36]	; (8001c4c <HAL_GPIO_Init+0x304>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f47f ae8e 	bne.w	800195c <HAL_GPIO_Init+0x14>
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	372c      	adds	r7, #44	; 0x2c
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c6c:	e003      	b.n	8001c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e272      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8087 	beq.w	8001dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca0:	4b92      	ldr	r3, [pc, #584]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d00c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cac:	4b8f      	ldr	r3, [pc, #572]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d112      	bne.n	8001cde <HAL_RCC_OscConfig+0x5e>
 8001cb8:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d10b      	bne.n	8001cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc6:	4b89      	ldr	r3, [pc, #548]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d06c      	beq.n	8001dac <HAL_RCC_OscConfig+0x12c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d168      	bne.n	8001dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e24c      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x76>
 8001ce8:	4b80      	ldr	r3, [pc, #512]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7f      	ldr	r2, [pc, #508]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e02e      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x98>
 8001cfe:	4b7b      	ldr	r3, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a7a      	ldr	r2, [pc, #488]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b78      	ldr	r3, [pc, #480]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a77      	ldr	r2, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01d      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0xbc>
 8001d22:	4b72      	ldr	r3, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a71      	ldr	r2, [pc, #452]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6a      	ldr	r2, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b68      	ldr	r3, [pc, #416]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a67      	ldr	r2, [pc, #412]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fe9c 	bl	8000a98 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7fe fe98 	bl	8000a98 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e200      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe4>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe fe88 	bl	8000a98 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7fe fe84 	bl	8000a98 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1ec      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x10c>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d11c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x18c>
 8001dd2:	4b46      	ldr	r3, [pc, #280]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	4b43      	ldr	r3, [pc, #268]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x176>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e1c0      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4939      	ldr	r1, [pc, #228]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	e03a      	b.n	8001e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e14:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCC_OscConfig+0x270>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fe3d 	bl	8000a98 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e22:	f7fe fe39 	bl	8000a98 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1a1      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4927      	ldr	r1, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <HAL_RCC_OscConfig+0x270>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fe1c 	bl	8000a98 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7fe fe18 	bl	8000a98 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e180      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03a      	beq.n	8001f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_RCC_OscConfig+0x274>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fdfc 	bl	8000a98 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fdf8 	bl	8000a98 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e160      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f000 face 	bl	8002464 <RCC_Delay>
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed0:	f7fe fde2 	bl	8000a98 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed6:	e00f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7fe fdde 	bl	8000a98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d908      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e146      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	42420000 	.word	0x42420000
 8001ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	4b92      	ldr	r3, [pc, #584]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e9      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80a6 	beq.w	800205e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a87      	ldr	r2, [pc, #540]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b85      	ldr	r3, [pc, #532]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3e:	4b82      	ldr	r3, [pc, #520]	; (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d118      	bne.n	8001f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fd9f 	bl	8000a98 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7fe fd9b 	bl	8000a98 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e103      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	4b75      	ldr	r3, [pc, #468]	; (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x312>
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a6e      	ldr	r2, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e02d      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x334>
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a69      	ldr	r2, [pc, #420]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	e01c      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x356>
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a60      	ldr	r2, [pc, #384]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a5d      	ldr	r2, [pc, #372]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	e00b      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	4b58      	ldr	r3, [pc, #352]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a57      	ldr	r2, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d015      	beq.n	8002022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fd4f 	bl	8000a98 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe fd4b 	bl	8000a98 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0b1      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ee      	beq.n	8001ffe <HAL_RCC_OscConfig+0x37e>
 8002020:	e014      	b.n	800204c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe fd39 	bl	8000a98 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fd35 	bl	8000a98 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e09b      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	4b40      	ldr	r3, [pc, #256]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8087 	beq.w	8002176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d061      	beq.n	8002138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d146      	bne.n	800210a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_RCC_OscConfig+0x4cc>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fd09 	bl	8000a98 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fd05 	bl	8000a98 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e06d      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d108      	bne.n	80020c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4921      	ldr	r1, [pc, #132]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a19      	ldr	r1, [r3, #32]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	430b      	orrs	r3, r1
 80020d6:	491b      	ldr	r1, [pc, #108]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x4cc>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fcd9 	bl	8000a98 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fcd5 	bl	8000a98 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e03d      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x46a>
 8002108:	e035      	b.n	8002176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_RCC_OscConfig+0x4cc>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fcc2 	bl	8000a98 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fcbe 	bl	8000a98 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e026      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x498>
 8002136:	e01e      	b.n	8002176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e019      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_OscConfig+0x500>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	429a      	cmp	r2, r3
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0d0      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4965      	ldr	r1, [pc, #404]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d040      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e073      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4936      	ldr	r1, [pc, #216]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7fe fc10 	bl	8000a98 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe fc0c 	bl	8000a98 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e053      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d210      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4922      	ldr	r1, [pc, #136]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1cc>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1d0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fb6e 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	08003ce4 	.word	0x08003ce4
 8002350:	20000004 	.word	0x20000004
 8002354:	20000008 	.word	0x20000008

08002358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002372:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d002      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x30>
 8002382:	2b08      	cmp	r3, #8
 8002384:	d003      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x36>
 8002386:	e027      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800238a:	613b      	str	r3, [r7, #16]
      break;
 800238c:	e027      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_RCC_GetSysClockFreq+0x94>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0c5b      	lsrs	r3, r3, #17
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e004      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	613b      	str	r3, [r7, #16]
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023da:	613b      	str	r3, [r7, #16]
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	693b      	ldr	r3, [r7, #16]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	007a1200 	.word	0x007a1200
 80023f4:	08003cfc 	.word	0x08003cfc
 80023f8:	08003d0c 	.word	0x08003d0c
 80023fc:	003d0900 	.word	0x003d0900

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <HAL_RCC_GetHCLKFreq+0x10>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002418:	f7ff fff2 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	08003cf4 	.word	0x08003cf4

0800243c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002440:	f7ff ffde 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0adb      	lsrs	r3, r3, #11
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08003cf4 	.word	0x08003cf4

08002464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <RCC_Delay+0x34>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <RCC_Delay+0x38>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002480:	bf00      	nop
  }
  while (Delay --);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	60fa      	str	r2, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f9      	bne.n	8002480 <RCC_Delay+0x1c>
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000004 	.word	0x20000004
 800249c:	10624dd3 	.word	0x10624dd3

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d07d      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c0:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	4b4c      	ldr	r3, [pc, #304]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4a4b      	ldr	r2, [pc, #300]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	61d3      	str	r3, [r2, #28]
 80024d8:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e4:	2301      	movs	r3, #1
 80024e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b46      	ldr	r3, [pc, #280]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d118      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a42      	ldr	r2, [pc, #264]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002500:	f7fe faca 	bl	8000a98 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002506:	e008      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002508:	f7fe fac6 	bl	8000a98 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e06d      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002526:	4b36      	ldr	r3, [pc, #216]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02e      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d027      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002544:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254e:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800255a:	4a29      	ldr	r2, [pc, #164]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d014      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe fa95 	bl	8000a98 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	e00a      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fa91 	bl	8000a98 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e036      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ee      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4917      	ldr	r1, [pc, #92]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	4a13      	ldr	r2, [pc, #76]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	490b      	ldr	r1, [pc, #44]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4904      	ldr	r1, [pc, #16]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
 8002608:	42420440 	.word	0x42420440

0800260c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b10      	cmp	r3, #16
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b10      	cmp	r3, #16
 8002632:	f200 808a 	bhi.w	800274a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d045      	beq.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d075      	beq.n	800272e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002642:	e082      	b.n	800274a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800264a:	4b45      	ldr	r3, [pc, #276]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d07b      	beq.n	800274e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	0c9b      	lsrs	r3, r3, #18
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a41      	ldr	r2, [pc, #260]	; (8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d015      	beq.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0c5b      	lsrs	r3, r3, #17
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002688:	4a38      	ldr	r2, [pc, #224]	; (800276c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e004      	b.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4a34      	ldr	r2, [pc, #208]	; (8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026a4:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b0:	d102      	bne.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	61bb      	str	r3, [r7, #24]
      break;
 80026b6:	e04a      	b.n	800274e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4a2d      	ldr	r2, [pc, #180]	; (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
      break;
 80026c6:	e042      	b.n	800274e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d8:	d108      	bne.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80026e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e01f      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f6:	d109      	bne.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002704:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e00f      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002716:	d11c      	bne.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d016      	beq.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002724:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002728:	61bb      	str	r3, [r7, #24]
      break;
 800272a:	e012      	b.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800272c:	e011      	b.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800272e:	f7ff fe85 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0b9b      	lsrs	r3, r3, #14
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	61bb      	str	r3, [r7, #24]
      break;
 8002748:	e004      	b.n	8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800274a:	bf00      	nop
 800274c:	e002      	b.n	8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800274e:	bf00      	nop
 8002750:	e000      	b.n	8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002752:	bf00      	nop
    }
  }
  return (frequency);
 8002754:	69bb      	ldr	r3, [r7, #24]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	08003d10 	.word	0x08003d10
 8002768:	08003d20 	.word	0x08003d20
 800276c:	007a1200 	.word	0x007a1200
 8002770:	003d0900 	.word	0x003d0900
 8002774:	aaaaaaab 	.word	0xaaaaaaab

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e041      	b.n	800280e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe f830 	bl	8000804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 fa7c 	bl	8002cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d001      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e03a      	b.n	80028a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_TIM_Base_Start_IT+0x98>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285a:	d009      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d010      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	e007      	b.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f9bd 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f9b0 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f9bf 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f993 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f986 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f995 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f969 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f95c 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f96b 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f93f 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f932 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f941 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f90d 	bl	8002c5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa83 	bl	8002f72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f905 	bl	8002ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0220 	mvn.w	r2, #32
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa4e 	bl	8002f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e0b4      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x186>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b20:	d03e      	beq.n	8002ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b26:	f200 8087 	bhi.w	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2e:	f000 8086 	beq.w	8002c3e <HAL_TIM_ConfigClockSource+0x172>
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b36:	d87f      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b70      	cmp	r3, #112	; 0x70
 8002b3a:	d01a      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xa6>
 8002b3c:	2b70      	cmp	r3, #112	; 0x70
 8002b3e:	d87b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b60      	cmp	r3, #96	; 0x60
 8002b42:	d050      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b44:	2b60      	cmp	r3, #96	; 0x60
 8002b46:	d877      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b48:	2b50      	cmp	r3, #80	; 0x50
 8002b4a:	d03c      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8002b4c:	2b50      	cmp	r3, #80	; 0x50
 8002b4e:	d873      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d058      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x13a>
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d86f      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b58:	2b30      	cmp	r3, #48	; 0x30
 8002b5a:	d064      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b5c:	2b30      	cmp	r3, #48	; 0x30
 8002b5e:	d86b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d060      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d867      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d05c      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d05a      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b70:	e062      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b82:	f000 f970 	bl	8002e66 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	609a      	str	r2, [r3, #8]
      break;
 8002b9e:	e04f      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb0:	f000 f959 	bl	8002e66 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc2:	609a      	str	r2, [r3, #8]
      break;
 8002bc4:	e03c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 f8d0 	bl	8002d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2150      	movs	r1, #80	; 0x50
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f927 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002be4:	e02c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 f8ee 	bl	8002dd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2160      	movs	r1, #96	; 0x60
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f917 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c04:	e01c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	461a      	mov	r2, r3
 8002c14:	f000 f8b0 	bl	8002d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2140      	movs	r1, #64	; 0x40
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f907 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c24:	e00c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f000 f8fe 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c36:	e003      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e000      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_Base_SetConfig+0x30>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd2:	d007      	beq.n	8002ce4 <TIM_Base_SetConfig+0x30>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <TIM_Base_SetConfig+0xbc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0x30>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d108      	bne.n	8002cf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00b      	beq.n	8002d16 <TIM_Base_SetConfig+0x62>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d007      	beq.n	8002d16 <TIM_Base_SetConfig+0x62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <TIM_Base_SetConfig+0xbc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_Base_SetConfig+0x62>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d108      	bne.n	8002d28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d103      	bne.n	8002d5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	615a      	str	r2, [r3, #20]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800

08002d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 0201 	bic.w	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 030a 	bic.w	r3, r3, #10
 8002db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0210 	bic.w	r2, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	031b      	lsls	r3, r3, #12
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f043 0307 	orr.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b087      	sub	sp, #28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	609a      	str	r2, [r3, #8]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e046      	b.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d009      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10c      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800

08002f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e042      	b.n	800301c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fc78 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fdc5 	bl	8003b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b20      	cmp	r3, #32
 8003042:	d16d      	bne.n	8003120 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_UART_Transmit+0x2c>
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e066      	b.n	8003122 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2221      	movs	r2, #33	; 0x21
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003062:	f7fd fd19 	bl	8000a98 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307c:	d108      	bne.n	8003090 <HAL_UART_Transmit+0x6c>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	e003      	b.n	8003098 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003098:	e02a      	b.n	80030f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2180      	movs	r1, #128	; 0x80
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fb14 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e036      	b.n	8003122 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	3302      	adds	r3, #2
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	e007      	b.n	80030e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	3301      	adds	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1cf      	bne.n	800309a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fae4 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e006      	b.n	8003122 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	e000      	b.n	8003122 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003120:	2302      	movs	r3, #2
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	4613      	mov	r3, r2
 8003136:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b20      	cmp	r3, #32
 8003142:	d112      	bne.n	800316a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_UART_Receive_IT+0x26>
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e00b      	b.n	800316c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	461a      	mov	r2, r3
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fb24 	bl	80037ae <UART_Start_Receive_IT>
 8003166:	4603      	mov	r3, r0
 8003168:	e000      	b.n	800316c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b0ba      	sub	sp, #232	; 0xe8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_UART_IRQHandler+0x66>
 80031c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fc01 	bl	80039da <UART_Receive_IT>
      return;
 80031d8:	e25b      	b.n	8003692 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80de 	beq.w	80033a0 <HAL_UART_IRQHandler+0x22c>
 80031e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80d1 	beq.w	80033a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <HAL_UART_IRQHandler+0xae>
 800320a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_UART_IRQHandler+0xd2>
 800322e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f043 0202 	orr.w	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xf6>
 8003252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f043 0204 	orr.w	r2, r3, #4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d011      	beq.n	800329a <HAL_UART_IRQHandler+0x126>
 8003276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f043 0208 	orr.w	r2, r3, #8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 81f2 	beq.w	8003688 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_UART_IRQHandler+0x14e>
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fb8c 	bl	80039da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_UART_IRQHandler+0x17a>
 80032e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d04f      	beq.n	800338e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa96 	bl	8003820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d041      	beq.n	8003386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3314      	adds	r3, #20
 8003308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800331c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3314      	adds	r3, #20
 800332a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800332e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800333a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1d9      	bne.n	8003302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d013      	beq.n	800337e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_UART_IRQHandler+0x3e0>)
 800335c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe f972 	bl	800164c <HAL_DMA_Abort_IT>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003378:	4610      	mov	r0, r2
 800337a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	e00e      	b.n	800339c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f993 	bl	80036aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003384:	e00a      	b.n	800339c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f98f 	bl	80036aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338c:	e006      	b.n	800339c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f98b 	bl	80036aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800339a:	e175      	b.n	8003688 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	bf00      	nop
    return;
 800339e:	e173      	b.n	8003688 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	f040 814f 	bne.w	8003648 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8148 	beq.w	8003648 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8141 	beq.w	8003648 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80b6 	beq.w	8003558 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8145 	beq.w	800368c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800340a:	429a      	cmp	r2, r3
 800340c:	f080 813e 	bcs.w	800368c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003416:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b20      	cmp	r3, #32
 8003420:	f000 8088 	beq.w	8003534 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800343a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800343e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003450:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800345c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1d9      	bne.n	8003424 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3314      	adds	r3, #20
 8003476:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3314      	adds	r3, #20
 8003490:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003494:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003498:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800349c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e1      	bne.n	8003470 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e3      	bne.n	80034ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003504:	f023 0310 	bic.w	r3, r3, #16
 8003508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003516:	65ba      	str	r2, [r7, #88]	; 0x58
 8003518:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800351c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e3      	bne.n	80034f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe f850 	bl	80015d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003542:	b29b      	uxth	r3, r3
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	b29b      	uxth	r3, r3
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8b6 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003550:	e09c      	b.n	800368c <HAL_UART_IRQHandler+0x518>
 8003552:	bf00      	nop
 8003554:	080038e5 	.word	0x080038e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003560:	b29b      	uxth	r3, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 808e 	beq.w	8003690 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8089 	beq.w	8003690 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	330c      	adds	r3, #12
 800359e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035a2:	647a      	str	r2, [r7, #68]	; 0x44
 80035a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e3      	bne.n	800357e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3314      	adds	r3, #20
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	623b      	str	r3, [r7, #32]
   return(result);
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035da:	633a      	str	r2, [r7, #48]	; 0x30
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e3      	bne.n	80035b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	e853 3f00 	ldrex	r3, [r3]
 800360a:	60fb      	str	r3, [r7, #12]
   return(result);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0310 	bic.w	r3, r3, #16
 8003612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003620:	61fa      	str	r2, [r7, #28]
 8003622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	617b      	str	r3, [r7, #20]
   return(result);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e3      	bne.n	80035fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800363a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f83b 	bl	80036bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003646:	e023      	b.n	8003690 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_UART_IRQHandler+0x4f4>
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f953 	bl	800390c <UART_Transmit_IT>
    return;
 8003666:	e014      	b.n	8003692 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00e      	beq.n	8003692 <HAL_UART_IRQHandler+0x51e>
 8003674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f992 	bl	80039aa <UART_EndTransmit_IT>
    return;
 8003686:	e004      	b.n	8003692 <HAL_UART_IRQHandler+0x51e>
    return;
 8003688:	bf00      	nop
 800368a:	e002      	b.n	8003692 <HAL_UART_IRQHandler+0x51e>
      return;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_UART_IRQHandler+0x51e>
      return;
 8003690:	bf00      	nop
  }
}
 8003692:	37e8      	adds	r7, #232	; 0xe8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b090      	sub	sp, #64	; 0x40
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e2:	e050      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d04c      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f2:	f7fd f9d1 	bl	8000a98 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036fe:	429a      	cmp	r2, r3
 8003700:	d241      	bcs.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003722:	637a      	str	r2, [r7, #52]	; 0x34
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e5      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3314      	adds	r3, #20
 800373c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	613b      	str	r3, [r7, #16]
   return(result);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3314      	adds	r3, #20
 8003754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003756:	623a      	str	r2, [r7, #32]
 8003758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	69f9      	ldr	r1, [r7, #28]
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	61bb      	str	r3, [r7, #24]
   return(result);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e5      	bne.n	8003736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e00f      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d09f      	beq.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3740      	adds	r7, #64	; 0x40
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	4613      	mov	r3, r2
 80037ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2222      	movs	r2, #34	; 0x22
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b095      	sub	sp, #84	; 0x54
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003848:	643a      	str	r2, [r7, #64]	; 0x40
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800384e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3314      	adds	r3, #20
 8003862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	61fb      	str	r3, [r7, #28]
   return(result);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3314      	adds	r3, #20
 800387a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800387c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b01      	cmp	r3, #1
 8003896:	d119      	bne.n	80038cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0310 	bic.w	r3, r3, #16
 80038ae:	647b      	str	r3, [r7, #68]	; 0x44
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b8:	61ba      	str	r2, [r7, #24]
 80038ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	613b      	str	r3, [r7, #16]
   return(result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038da:	bf00      	nop
 80038dc:	3754      	adds	r7, #84	; 0x54
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff fed3 	bl	80036aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b21      	cmp	r3, #33	; 0x21
 800391e:	d13e      	bne.n	800399e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d114      	bne.n	8003954 <UART_Transmit_IT+0x48>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d110      	bne.n	8003954 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003946:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	1c9a      	adds	r2, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	621a      	str	r2, [r3, #32]
 8003952:	e008      	b.n	8003966 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	1c59      	adds	r1, r3, #1
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6211      	str	r1, [r2, #32]
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29b      	uxth	r3, r3
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4619      	mov	r1, r3
 8003974:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fe64 	bl	8003698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08c      	sub	sp, #48	; 0x30
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b22      	cmp	r3, #34	; 0x22
 80039ec:	f040 80ae 	bne.w	8003b4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d117      	bne.n	8003a2a <UART_Receive_IT+0x50>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d113      	bne.n	8003a2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	1c9a      	adds	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
 8003a28:	e026      	b.n	8003a78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d007      	beq.n	8003a4e <UART_Receive_IT+0x74>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <UART_Receive_IT+0x82>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e008      	b.n	8003a6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4619      	mov	r1, r3
 8003a86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d15d      	bne.n	8003b48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0220 	bic.w	r2, r2, #32
 8003a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d135      	bne.n	8003b3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f023 0310 	bic.w	r3, r3, #16
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af8:	623a      	str	r2, [r7, #32]
 8003afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	69f9      	ldr	r1, [r7, #28]
 8003afe:	6a3a      	ldr	r2, [r7, #32]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d10a      	bne.n	8003b30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fdc0 	bl	80036bc <HAL_UARTEx_RxEventCallback>
 8003b3c:	e002      	b.n	8003b44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fc fc20 	bl	8000384 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e002      	b.n	8003b4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3730      	adds	r7, #48	; 0x30
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b92:	f023 030c 	bic.w	r3, r3, #12
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <UART_SetConfig+0x114>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d103      	bne.n	8003bc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bc0:	f7fe fc3c 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	e002      	b.n	8003bce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7fe fc24 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009a      	lsls	r2, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <UART_SetConfig+0x118>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	0119      	lsls	r1, r3, #4
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009a      	lsls	r2, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <UART_SetConfig+0x118>)
 8003c06:	fba3 0302 	umull	r0, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	2064      	movs	r0, #100	; 0x64
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	3332      	adds	r3, #50	; 0x32
 8003c18:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <UART_SetConfig+0x118>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c24:	4419      	add	r1, r3
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009a      	lsls	r2, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <UART_SetConfig+0x118>)
 8003c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2064      	movs	r0, #100	; 0x64
 8003c46:	fb00 f303 	mul.w	r3, r0, r3
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	3332      	adds	r3, #50	; 0x32
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <UART_SetConfig+0x118>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	f003 020f 	and.w	r2, r3, #15
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	440a      	add	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40013800 	.word	0x40013800
 8003c70:	51eb851f 	.word	0x51eb851f

08003c74 <memset>:
 8003c74:	4603      	mov	r3, r0
 8003c76:	4402      	add	r2, r0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <memset+0xa>
 8003c7c:	4770      	bx	lr
 8003c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c82:	e7f9      	b.n	8003c78 <memset+0x4>

08003c84 <__libc_init_array>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	2600      	movs	r6, #0
 8003c88:	4d0c      	ldr	r5, [pc, #48]	; (8003cbc <__libc_init_array+0x38>)
 8003c8a:	4c0d      	ldr	r4, [pc, #52]	; (8003cc0 <__libc_init_array+0x3c>)
 8003c8c:	1b64      	subs	r4, r4, r5
 8003c8e:	10a4      	asrs	r4, r4, #2
 8003c90:	42a6      	cmp	r6, r4
 8003c92:	d109      	bne.n	8003ca8 <__libc_init_array+0x24>
 8003c94:	f000 f81a 	bl	8003ccc <_init>
 8003c98:	2600      	movs	r6, #0
 8003c9a:	4d0a      	ldr	r5, [pc, #40]	; (8003cc4 <__libc_init_array+0x40>)
 8003c9c:	4c0a      	ldr	r4, [pc, #40]	; (8003cc8 <__libc_init_array+0x44>)
 8003c9e:	1b64      	subs	r4, r4, r5
 8003ca0:	10a4      	asrs	r4, r4, #2
 8003ca2:	42a6      	cmp	r6, r4
 8003ca4:	d105      	bne.n	8003cb2 <__libc_init_array+0x2e>
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cac:	4798      	blx	r3
 8003cae:	3601      	adds	r6, #1
 8003cb0:	e7ee      	b.n	8003c90 <__libc_init_array+0xc>
 8003cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb6:	4798      	blx	r3
 8003cb8:	3601      	adds	r6, #1
 8003cba:	e7f2      	b.n	8003ca2 <__libc_init_array+0x1e>
 8003cbc:	08003d24 	.word	0x08003d24
 8003cc0:	08003d24 	.word	0x08003d24
 8003cc4:	08003d24 	.word	0x08003d24
 8003cc8:	08003d28 	.word	0x08003d28

08003ccc <_init>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr

08003cd8 <_fini>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr
