
5_ADCInicial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003374  08003374  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003374  08003374  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003374  08003374  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800337c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000068  080033e4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080033e4  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bfe  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dcc  00000000  00000000  00028cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000643  00000000  00000000  0002b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018938  00000000  00000000  0002b943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bde9  00000000  00000000  0004427b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088b0e  00000000  00000000  00050064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026e0  00000000  00000000  000d8b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000db254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080032cc 	.word	0x080032cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080032cc 	.word	0x080032cc

0800014c <ADC_Read>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;

uint16_t ADC_Read()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&adc1);               // Inicio el ADC   
 8000150:	4806      	ldr	r0, [pc, #24]	; (800016c <ADC_Read+0x20>)
 8000152:	f000 fc5b 	bl	8000a0c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&adc1,1); // Conversi√≥n por interrup
 8000156:	2101      	movs	r1, #1
 8000158:	4804      	ldr	r0, [pc, #16]	; (800016c <ADC_Read+0x20>)
 800015a:	f000 fd05 	bl	8000b68 <HAL_ADC_PollForConversion>
    return (HAL_ADC_GetValue(&adc1));   // obtengo el valor del adc
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <ADC_Read+0x20>)
 8000160:	f000 fe08 	bl	8000d74 <HAL_ADC_GetValue>
 8000164:	4603      	mov	r3, r0
 8000166:	b29b      	uxth	r3, r3
}
 8000168:	4618      	mov	r0, r3
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000084 	.word	0x20000084

08000170 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000182:	4a19      	ldr	r2, [pc, #100]	; (80001e8 <MX_ADC1_Init+0x78>)
 8000184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000188:	2200      	movs	r2, #0
 800018a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800018c:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000192:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000194:	2200      	movs	r2, #0
 8000196:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <MX_ADC1_Init+0x74>)
 800019a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800019e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ae:	f000 fb55 	bl	800085c <HAL_ADC_Init>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001b8:	f000 f92b 	bl	8000412 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001bc:	2300      	movs	r3, #0
 80001be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001c0:	2301      	movs	r3, #1
 80001c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ce:	f000 fddd 	bl	8000d8c <HAL_ADC_ConfigChannel>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001d8:	f000 f91b 	bl	8000412 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001dc:	bf00      	nop
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000084 	.word	0x20000084
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a14      	ldr	r2, [pc, #80]	; (8000258 <HAL_ADC_MspInit+0x6c>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d121      	bne.n	8000250 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <HAL_ADC_MspInit+0x70>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a0c      	ldr	r2, [pc, #48]	; (800025c <HAL_ADC_MspInit+0x70>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800023c:	2301      	movs	r3, #1
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000240:	2303      	movs	r3, #3
 8000242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4619      	mov	r1, r3
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <HAL_ADC_MspInit+0x74>)
 800024c:	f001 f816 	bl	800127c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40012400 	.word	0x40012400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000278:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <MX_GPIO_Init+0x90>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a1d      	ldr	r2, [pc, #116]	; (80002f4 <MX_GPIO_Init+0x90>)
 800027e:	f043 0310 	orr.w	r3, r3, #16
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <MX_GPIO_Init+0x90>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0310 	and.w	r3, r3, #16
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000290:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <MX_GPIO_Init+0x90>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a17      	ldr	r2, [pc, #92]	; (80002f4 <MX_GPIO_Init+0x90>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <MX_GPIO_Init+0x90>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0320 	and.w	r3, r3, #32
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <MX_GPIO_Init+0x90>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <MX_GPIO_Init+0x90>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <MX_GPIO_Init+0x90>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0304 	and.w	r3, r3, #4
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c6:	480c      	ldr	r0, [pc, #48]	; (80002f8 <MX_GPIO_Init+0x94>)
 80002c8:	f001 f95c 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2302      	movs	r3, #2
 80002dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	4619      	mov	r1, r3
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_GPIO_Init+0x94>)
 80002e6:	f000 ffc9 	bl	800127c <HAL_GPIO_Init>

}
 80002ea:	bf00      	nop
 80002ec:	3720      	adds	r7, #32
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40011000 	.word	0x40011000

080002fc <__io_putchar>:
#define uartx huart1   //   colocar el puerto serial a usar

extern UART_HandleTypeDef uartx;


int __io_putchar(int ch) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 //ITM_SendChar(ch);//  si se quiere usar por debbuger
HAL_UART_Transmit(&uartx, (uint8_t *)&ch, 1, 0xFFFF);// printf al puerto serial sefinico
 8000304:	1d39      	adds	r1, r7, #4
 8000306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800030a:	2201      	movs	r2, #1
 800030c:	4803      	ldr	r0, [pc, #12]	; (800031c <__io_putchar+0x20>)
 800030e:	f001 ff1d 	bl	800214c <HAL_UART_Transmit>
return(ch);
 8000312:	687b      	ldr	r3, [r7, #4]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200000b8 	.word	0x200000b8

08000320 <main>:
#include "printf_out.h" //Libreria para integrar el printf()


void SystemClock_Config(void);

int main(void){
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0

	// -- Init Modules --
	HAL_Init();
 8000326:	f000 fa13 	bl	8000750 <HAL_Init>
	SystemClock_Config();
 800032a:	f000 f817 	bl	800035c <SystemClock_Config>
	MX_GPIO_Init();
 800032e:	f7ff ff99 	bl	8000264 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000332:	f7ff ff1d 	bl	8000170 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000336:	f000 f96f 	bl	8000618 <MX_USART1_UART_Init>
	uint16_t readADC;	// Variable read ADC


	while (1){

	  readADC = ADC_Read();
 800033a:	f7ff ff07 	bl	800014c <ADC_Read>
 800033e:	4603      	mov	r3, r0
 8000340:	80fb      	strh	r3, [r7, #6]
	  printf("Valor de Lectura ( %u )\r\n",readADC);
 8000342:	88fb      	ldrh	r3, [r7, #6]
 8000344:	4619      	mov	r1, r3
 8000346:	4804      	ldr	r0, [pc, #16]	; (8000358 <main+0x38>)
 8000348:	f002 f942 	bl	80025d0 <iprintf>
	  HAL_Delay(500);
 800034c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000350:	f000 fa60 	bl	8000814 <HAL_Delay>
	  readADC = ADC_Read();
 8000354:	e7f1      	b.n	800033a <main+0x1a>
 8000356:	bf00      	nop
 8000358:	080032e4 	.word	0x080032e4

0800035c <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b094      	sub	sp, #80	; 0x50
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000366:	2228      	movs	r2, #40	; 0x28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f002 f985 	bl	800267a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038c:	2301      	movs	r3, #1
 800038e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000394:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039a:	2301      	movs	r3, #1
 800039c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 f8fe 	bl	80015b4 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003be:	f000 f828 	bl	8000412 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fb6a 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ea:	f000 f812 	bl	8000412 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ee:	2302      	movs	r3, #2
 80003f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fcea 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000406:	f000 f804 	bl	8000412 <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3750      	adds	r7, #80	; 0x50
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <Error_Handler>:


void Error_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000416:	b672      	cpsid	i
}
 8000418:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041a:	e7fe      	b.n	800041a <Error_Handler+0x8>

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a14      	ldr	r2, [pc, #80]	; (8000478 <HAL_MspInit+0x5c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x5c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_MspInit+0x60>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <HAL_MspInit+0x60>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <NMI_Handler+0x4>

08000486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <HardFault_Handler+0x4>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <MemManage_Handler+0x4>

08000492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <UsageFault_Handler+0x4>

0800049e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c6:	f000 f989 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	e00a      	b.n	80004f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004e0:	f3af 8000 	nop.w
 80004e4:	4601      	mov	r1, r0
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	60ba      	str	r2, [r7, #8]
 80004ec:	b2ca      	uxtb	r2, r1
 80004ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697a      	ldr	r2, [r7, #20]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dbf0      	blt.n	80004e0 <_read+0x12>
  }

  return len;
 80004fe:	687b      	ldr	r3, [r7, #4]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e009      	b.n	800052e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	60ba      	str	r2, [r7, #8]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff feea 	bl	80002fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	3301      	adds	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	dbf1      	blt.n	800051a <_write+0x12>
  }
  return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <_close>:

int _close(int file)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000566:	605a      	str	r2, [r3, #4]
  return 0;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <_isatty>:

int _isatty(int file)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057c:	2301      	movs	r3, #1
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f002 f8a2 	bl	8002718 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	200000b4 	.word	0x200000b4
 8000608:	20000250 	.word	0x20000250

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART1_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000624:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000650:	f001 fd2c 	bl	80020ac <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f7ff feda 	bl	8000412 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000b8 	.word	0x200000b8
 8000668:	40013800 	.word	0x40013800

0800066c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <HAL_UART_MspInit+0x8c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d131      	bne.n	80006f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_UART_MspInit+0x90>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <HAL_UART_MspInit+0x90>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_UART_MspInit+0x90>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_UART_MspInit+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <HAL_UART_MspInit+0x94>)
 80006d2:	f000 fdd3 	bl	800127c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_UART_MspInit+0x94>)
 80006ec:	f000 fdc6 	bl	800127c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800

08000704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000704:	f7ff ff82 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800070a:	490c      	ldr	r1, [pc, #48]	; (800073c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <LoopFillZerobss+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a09      	ldr	r2, [pc, #36]	; (8000744 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000720:	4c09      	ldr	r4, [pc, #36]	; (8000748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072e:	f001 fff9 	bl	8002724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fdf5 	bl	8000320 <main>
  bx lr
 8000736:	4770      	bx	lr
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000740:	0800337c 	.word	0x0800337c
  ldr r2, =_sbss
 8000744:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000748:	20000250 	.word	0x20000250

0800074c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_2_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_Init+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_Init+0x28>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 fd57 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	200f      	movs	r0, #15
 8000768:	f000 f808 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff fe56 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fd61 	bl	8001262 <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 fd37 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_InitTick+0x5c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000100 	.word	0x20000100

08000800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000100 	.word	0x20000100

08000814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff fff0 	bl	8000800 <HAL_GetTick>
 8000820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082c:	d005      	beq.n	800083a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_Delay+0x44>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083a:	bf00      	nop
 800083c:	f7ff ffe0 	bl	8000800 <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f7      	bhi.n	800083c <HAL_Delay+0x28>
  {
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000008 	.word	0x20000008

0800085c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000864:	2300      	movs	r3, #0
 8000866:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e0be      	b.n	80009fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000888:	2b00      	cmp	r3, #0
 800088a:	d109      	bne.n	80008a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fca6 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 fbc5 	bl	8001030 <ADC_ConversionStop_Disable>
 80008a6:	4603      	mov	r3, r0
 80008a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8099 	bne.w	80009ea <HAL_ADC_Init+0x18e>
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f040 8095 	bne.w	80009ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008c8:	f023 0302 	bic.w	r3, r3, #2
 80008cc:	f043 0202 	orr.w	r2, r3, #2
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7b1b      	ldrb	r3, [r3, #12]
 80008e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	d003      	beq.n	80008fe <HAL_ADC_Init+0xa2>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d102      	bne.n	8000904 <HAL_ADC_Init+0xa8>
 80008fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000902:	e000      	b.n	8000906 <HAL_ADC_Init+0xaa>
 8000904:	2300      	movs	r3, #0
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7d1b      	ldrb	r3, [r3, #20]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d119      	bne.n	8000948 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7b1b      	ldrb	r3, [r3, #12]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d109      	bne.n	8000930 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	3b01      	subs	r3, #1
 8000922:	035a      	lsls	r2, r3, #13
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	e00b      	b.n	8000948 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000934:	f043 0220 	orr.w	r2, r3, #32
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000940:	f043 0201 	orr.w	r2, r3, #1
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	430a      	orrs	r2, r1
 800095a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <HAL_ADC_Init+0x1a8>)
 8000964:	4013      	ands	r3, r2
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	68b9      	ldr	r1, [r7, #8]
 800096c:	430b      	orrs	r3, r1
 800096e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000978:	d003      	beq.n	8000982 <HAL_ADC_Init+0x126>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d104      	bne.n	800098c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	3b01      	subs	r3, #1
 8000988:	051b      	lsls	r3, r3, #20
 800098a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	430a      	orrs	r2, r1
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_ADC_Init+0x1ac>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d10b      	bne.n	80009c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ba:	f023 0303 	bic.w	r3, r3, #3
 80009be:	f043 0201 	orr.w	r2, r3, #1
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c6:	e018      	b.n	80009fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	f023 0312 	bic.w	r3, r3, #18
 80009d0:	f043 0210 	orr.w	r2, r3, #16
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009dc:	f043 0201 	orr.w	r2, r3, #1
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009e8:	e007      	b.n	80009fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ee:	f043 0210 	orr.w	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	ffe1f7fd 	.word	0xffe1f7fd
 8000a08:	ff1f0efe 	.word	0xff1f0efe

08000a0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d101      	bne.n	8000a26 <HAL_ADC_Start+0x1a>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e098      	b.n	8000b58 <HAL_ADC_Start+0x14c>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 faa4 	bl	8000f7c <ADC_Enable>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f040 8087 	bne.w	8000b4e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a48:	f023 0301 	bic.w	r3, r3, #1
 8000a4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a41      	ldr	r2, [pc, #260]	; (8000b60 <HAL_ADC_Start+0x154>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d105      	bne.n	8000a6a <HAL_ADC_Start+0x5e>
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <HAL_ADC_Start+0x158>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d115      	bne.n	8000a96 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d026      	beq.n	8000ad2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a94:	e01d      	b.n	8000ad2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <HAL_ADC_Start+0x158>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d004      	beq.n	8000ab6 <HAL_ADC_Start+0xaa>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <HAL_ADC_Start+0x154>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10d      	bne.n	8000ad2 <HAL_ADC_Start+0xc6>
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <HAL_ADC_Start+0x158>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae2:	f023 0206 	bic.w	r2, r3, #6
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aea:	e002      	b.n	8000af2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f06f 0202 	mvn.w	r2, #2
 8000b02:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b12:	d113      	bne.n	8000b3c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b18:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <HAL_ADC_Start+0x154>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d105      	bne.n	8000b2a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_ADC_Start+0x158>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d108      	bne.n	8000b3c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	e00c      	b.n	8000b56 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	e003      	b.n	8000b56 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40012800 	.word	0x40012800
 8000b64:	40012400 	.word	0x40012400

08000b68 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b7e:	f7ff fe3f 	bl	8000800 <HAL_GetTick>
 8000b82:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00b      	beq.n	8000baa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b96:	f043 0220 	orr.w	r2, r3, #32
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e0d3      	b.n	8000d52 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d131      	bne.n	8000c1c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d12a      	bne.n	8000c1c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bc6:	e021      	b.n	8000c0c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bce:	d01d      	beq.n	8000c0c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <HAL_ADC_PollForConversion+0x7e>
 8000bd6:	f7ff fe13 	bl	8000800 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d212      	bcs.n	8000c0c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10b      	bne.n	8000c0c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	f043 0204 	orr.w	r2, r3, #4
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e0a2      	b.n	8000d52 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0d6      	beq.n	8000bc8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c1a:	e070      	b.n	8000cfe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c1c:	4b4f      	ldr	r3, [pc, #316]	; (8000d5c <HAL_ADC_PollForConversion+0x1f4>)
 8000c1e:	681c      	ldr	r4, [r3, #0]
 8000c20:	2002      	movs	r0, #2
 8000c22:	f001 f98d 	bl	8001f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c26:	4603      	mov	r3, r0
 8000c28:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6919      	ldr	r1, [r3, #16]
 8000c32:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <HAL_ADC_PollForConversion+0x1f8>)
 8000c34:	400b      	ands	r3, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d118      	bne.n	8000c6c <HAL_ADC_PollForConversion+0x104>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68d9      	ldr	r1, [r3, #12]
 8000c40:	4b48      	ldr	r3, [pc, #288]	; (8000d64 <HAL_ADC_PollForConversion+0x1fc>)
 8000c42:	400b      	ands	r3, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <HAL_ADC_PollForConversion+0x104>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6919      	ldr	r1, [r3, #16]
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <HAL_ADC_PollForConversion+0x200>)
 8000c50:	400b      	ands	r3, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d108      	bne.n	8000c68 <HAL_ADC_PollForConversion+0x100>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68d9      	ldr	r1, [r3, #12]
 8000c5c:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <HAL_ADC_PollForConversion+0x204>)
 8000c5e:	400b      	ands	r3, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_ADC_PollForConversion+0x100>
 8000c64:	2314      	movs	r3, #20
 8000c66:	e020      	b.n	8000caa <HAL_ADC_PollForConversion+0x142>
 8000c68:	2329      	movs	r3, #41	; 0x29
 8000c6a:	e01e      	b.n	8000caa <HAL_ADC_PollForConversion+0x142>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6919      	ldr	r1, [r3, #16]
 8000c72:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <HAL_ADC_PollForConversion+0x200>)
 8000c74:	400b      	ands	r3, r1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d106      	bne.n	8000c88 <HAL_ADC_PollForConversion+0x120>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68d9      	ldr	r1, [r3, #12]
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <HAL_ADC_PollForConversion+0x204>)
 8000c82:	400b      	ands	r3, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00d      	beq.n	8000ca4 <HAL_ADC_PollForConversion+0x13c>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6919      	ldr	r1, [r3, #16]
 8000c8e:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <HAL_ADC_PollForConversion+0x208>)
 8000c90:	400b      	ands	r3, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d108      	bne.n	8000ca8 <HAL_ADC_PollForConversion+0x140>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68d9      	ldr	r1, [r3, #12]
 8000c9c:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <HAL_ADC_PollForConversion+0x208>)
 8000c9e:	400b      	ands	r3, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <HAL_ADC_PollForConversion+0x140>
 8000ca4:	2354      	movs	r3, #84	; 0x54
 8000ca6:	e000      	b.n	8000caa <HAL_ADC_PollForConversion+0x142>
 8000ca8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cb0:	e021      	b.n	8000cf6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d01a      	beq.n	8000cf0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d007      	beq.n	8000cd0 <HAL_ADC_PollForConversion+0x168>
 8000cc0:	f7ff fd9e 	bl	8000800 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d20f      	bcs.n	8000cf0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d90b      	bls.n	8000cf0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	f043 0204 	orr.w	r2, r3, #4
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e030      	b.n	8000d52 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d8d9      	bhi.n	8000cb2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f06f 0212 	mvn.w	r2, #18
 8000d06:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d22:	d115      	bne.n	8000d50 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d111      	bne.n	8000d50 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d105      	bne.n	8000d50 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	f043 0201 	orr.w	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	371c      	adds	r7, #28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	24924924 	.word	0x24924924
 8000d64:	00924924 	.word	0x00924924
 8000d68:	12492492 	.word	0x12492492
 8000d6c:	00492492 	.word	0x00492492
 8000d70:	00249249 	.word	0x00249249

08000d74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <HAL_ADC_ConfigChannel+0x20>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e0dc      	b.n	8000f66 <HAL_ADC_ConfigChannel+0x1da>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d81c      	bhi.n	8000df6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	3b05      	subs	r3, #5
 8000dce:	221f      	movs	r2, #31
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	3b05      	subs	r3, #5
 8000de8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
 8000df4:	e03c      	b.n	8000e70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b0c      	cmp	r3, #12
 8000dfc:	d81c      	bhi.n	8000e38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3b23      	subs	r3, #35	; 0x23
 8000e10:	221f      	movs	r2, #31
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4019      	ands	r1, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	3b23      	subs	r3, #35	; 0x23
 8000e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
 8000e36:	e01b      	b.n	8000e70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	3b41      	subs	r3, #65	; 0x41
 8000e4a:	221f      	movs	r2, #31
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4019      	ands	r1, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	3b41      	subs	r3, #65	; 0x41
 8000e64:	fa00 f203 	lsl.w	r2, r0, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b09      	cmp	r3, #9
 8000e76:	d91c      	bls.n	8000eb2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68d9      	ldr	r1, [r3, #12]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	3b1e      	subs	r3, #30
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4019      	ands	r1, r3
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	6898      	ldr	r0, [r3, #8]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3b1e      	subs	r3, #30
 8000ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	e019      	b.n	8000ee6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6919      	ldr	r1, [r3, #16]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4019      	ands	r1, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6898      	ldr	r0, [r3, #8]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	fa00 f203 	lsl.w	r2, r0, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d003      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ef2:	2b11      	cmp	r3, #17
 8000ef4:	d132      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <HAL_ADC_ConfigChannel+0x1e4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d125      	bne.n	8000f4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d126      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b10      	cmp	r3, #16
 8000f24:	d11a      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	0c9a      	lsrs	r2, r3, #18
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f3c:	e002      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f9      	bne.n	8000f3e <HAL_ADC_ConfigChannel+0x1b2>
 8000f4a:	e007      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f50:	f043 0220 	orr.w	r2, r3, #32
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40012400 	.word	0x40012400
 8000f74:	20000000 	.word	0x20000000
 8000f78:	431bde83 	.word	0x431bde83

08000f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d040      	beq.n	800101c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0201 	orr.w	r2, r2, #1
 8000fa8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <ADC_Enable+0xac>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <ADC_Enable+0xb0>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	0c9b      	lsrs	r3, r3, #18
 8000fb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fb8:	e002      	b.n	8000fc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f9      	bne.n	8000fba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fc6:	f7ff fc1b 	bl	8000800 <HAL_GetTick>
 8000fca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fcc:	e01f      	b.n	800100e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fce:	f7ff fc17 	bl	8000800 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d918      	bls.n	800100e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d011      	beq.n	800100e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e007      	b.n	800101e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b01      	cmp	r3, #1
 800101a:	d1d8      	bne.n	8000fce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000000 	.word	0x20000000
 800102c:	431bde83 	.word	0x431bde83

08001030 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d12e      	bne.n	80010a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800105a:	f7ff fbd1 	bl	8000800 <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001060:	e01b      	b.n	800109a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001062:	f7ff fbcd 	bl	8000800 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d914      	bls.n	800109a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b01      	cmp	r3, #1
 800107c:	d10d      	bne.n	800109a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	f043 0210 	orr.w	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e007      	b.n	80010aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d0dc      	beq.n	8001062 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff90 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff49 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff5e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff90 	bl	800116c <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5f 	bl	8001118 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffb0 	bl	80011d0 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b08b      	sub	sp, #44	; 0x2c
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e169      	b.n	8001564 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001290:	2201      	movs	r2, #1
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f040 8158 	bne.w	800155e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a9a      	ldr	r2, [pc, #616]	; (800151c <HAL_GPIO_Init+0x2a0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d05e      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012b8:	4a98      	ldr	r2, [pc, #608]	; (800151c <HAL_GPIO_Init+0x2a0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d875      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012be:	4a98      	ldr	r2, [pc, #608]	; (8001520 <HAL_GPIO_Init+0x2a4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d058      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012c4:	4a96      	ldr	r2, [pc, #600]	; (8001520 <HAL_GPIO_Init+0x2a4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d86f      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ca:	4a96      	ldr	r2, [pc, #600]	; (8001524 <HAL_GPIO_Init+0x2a8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d052      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012d0:	4a94      	ldr	r2, [pc, #592]	; (8001524 <HAL_GPIO_Init+0x2a8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d869      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012d6:	4a94      	ldr	r2, [pc, #592]	; (8001528 <HAL_GPIO_Init+0x2ac>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d04c      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012dc:	4a92      	ldr	r2, [pc, #584]	; (8001528 <HAL_GPIO_Init+0x2ac>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d863      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012e2:	4a92      	ldr	r2, [pc, #584]	; (800152c <HAL_GPIO_Init+0x2b0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d046      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012e8:	4a90      	ldr	r2, [pc, #576]	; (800152c <HAL_GPIO_Init+0x2b0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d85d      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d82a      	bhi.n	8001348 <HAL_GPIO_Init+0xcc>
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d859      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <HAL_GPIO_Init+0x80>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001377 	.word	0x08001377
 8001300:	08001351 	.word	0x08001351
 8001304:	08001363 	.word	0x08001363
 8001308:	080013a5 	.word	0x080013a5
 800130c:	080013ab 	.word	0x080013ab
 8001310:	080013ab 	.word	0x080013ab
 8001314:	080013ab 	.word	0x080013ab
 8001318:	080013ab 	.word	0x080013ab
 800131c:	080013ab 	.word	0x080013ab
 8001320:	080013ab 	.word	0x080013ab
 8001324:	080013ab 	.word	0x080013ab
 8001328:	080013ab 	.word	0x080013ab
 800132c:	080013ab 	.word	0x080013ab
 8001330:	080013ab 	.word	0x080013ab
 8001334:	080013ab 	.word	0x080013ab
 8001338:	080013ab 	.word	0x080013ab
 800133c:	080013ab 	.word	0x080013ab
 8001340:	08001359 	.word	0x08001359
 8001344:	0800136d 	.word	0x0800136d
 8001348:	4a79      	ldr	r2, [pc, #484]	; (8001530 <HAL_GPIO_Init+0x2b4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134e:	e02c      	b.n	80013aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e029      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	3304      	adds	r3, #4
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e024      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	3308      	adds	r3, #8
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e01f      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	330c      	adds	r3, #12
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e01a      	b.n	80013ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137e:	2304      	movs	r3, #4
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e013      	b.n	80013ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	611a      	str	r2, [r3, #16]
          break;
 8001396:	e009      	b.n	80013ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	615a      	str	r2, [r3, #20]
          break;
 80013a2:	e003      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
          break;
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x130>
          break;
 80013aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2bff      	cmp	r3, #255	; 0xff
 80013b0:	d801      	bhi.n	80013b6 <HAL_GPIO_Init+0x13a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_Init+0x13e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d802      	bhi.n	80013c8 <HAL_GPIO_Init+0x14c>
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	e002      	b.n	80013ce <HAL_GPIO_Init+0x152>
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	3b08      	subs	r3, #8
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	210f      	movs	r1, #15
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	6a39      	ldr	r1, [r7, #32]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80b1 	beq.w	800155e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fc:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <HAL_GPIO_Init+0x2b8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a4c      	ldr	r2, [pc, #304]	; (8001534 <HAL_GPIO_Init+0x2b8>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <HAL_GPIO_Init+0x2b8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001414:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x2bc>)
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a40      	ldr	r2, [pc, #256]	; (800153c <HAL_GPIO_Init+0x2c0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1ec>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a3f      	ldr	r2, [pc, #252]	; (8001540 <HAL_GPIO_Init+0x2c4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1e8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a3e      	ldr	r2, [pc, #248]	; (8001544 <HAL_GPIO_Init+0x2c8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1e4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a3d      	ldr	r2, [pc, #244]	; (8001548 <HAL_GPIO_Init+0x2cc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1e0>
 8001458:	2303      	movs	r3, #3
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 800145c:	2304      	movs	r3, #4
 800145e:	e004      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001460:	2302      	movs	r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001468:	2300      	movs	r3, #0
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4093      	lsls	r3, r2
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147a:	492f      	ldr	r1, [pc, #188]	; (8001538 <HAL_GPIO_Init+0x2bc>)
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_GPIO_Init+0x2d0>)
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	492c      	ldr	r1, [pc, #176]	; (800154c <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4928      	ldr	r1, [pc, #160]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	4922      	ldr	r1, [pc, #136]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	491e      	ldr	r1, [pc, #120]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4918      	ldr	r1, [pc, #96]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4914      	ldr	r1, [pc, #80]	; (800154c <HAL_GPIO_Init+0x2d0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d021      	beq.n	8001550 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_GPIO_Init+0x2d0>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	490e      	ldr	r1, [pc, #56]	; (800154c <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e021      	b.n	800155e <HAL_GPIO_Init+0x2e2>
 800151a:	bf00      	nop
 800151c:	10320000 	.word	0x10320000
 8001520:	10310000 	.word	0x10310000
 8001524:	10220000 	.word	0x10220000
 8001528:	10210000 	.word	0x10210000
 800152c:	10120000 	.word	0x10120000
 8001530:	10110000 	.word	0x10110000
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40011000 	.word	0x40011000
 8001548:	40011400 	.word	0x40011400
 800154c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_GPIO_Init+0x304>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	43db      	mvns	r3, r3
 8001558:	4909      	ldr	r1, [pc, #36]	; (8001580 <HAL_GPIO_Init+0x304>)
 800155a:	4013      	ands	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	3301      	adds	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	f47f ae8e 	bne.w	8001290 <HAL_GPIO_Init+0x14>
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	372c      	adds	r7, #44	; 0x2c
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	611a      	str	r2, [r3, #16]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e272      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8087 	beq.w	80016e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d4:	4b92      	ldr	r3, [pc, #584]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d00c      	beq.n	80015fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e0:	4b8f      	ldr	r3, [pc, #572]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d112      	bne.n	8001612 <HAL_RCC_OscConfig+0x5e>
 80015ec:	4b8c      	ldr	r3, [pc, #560]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d10b      	bne.n	8001612 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fa:	4b89      	ldr	r3, [pc, #548]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d06c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x12c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d168      	bne.n	80016e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e24c      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x76>
 800161c:	4b80      	ldr	r3, [pc, #512]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a7f      	ldr	r2, [pc, #508]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e02e      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x98>
 8001632:	4b7b      	ldr	r3, [pc, #492]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a7a      	ldr	r2, [pc, #488]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b78      	ldr	r3, [pc, #480]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a77      	ldr	r2, [pc, #476]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0xbc>
 8001656:	4b72      	ldr	r3, [pc, #456]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a71      	ldr	r2, [pc, #452]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6e      	ldr	r2, [pc, #440]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 8001670:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a6a      	ldr	r2, [pc, #424]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a67      	ldr	r2, [pc, #412]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff f8b6 	bl	8000800 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff f8b2 	bl	8000800 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e200      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xe4>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff f8a2 	bl	8000800 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff f89e 	bl	8000800 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1ec      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x10c>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ee:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016fa:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x18c>
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x176>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1c0      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4939      	ldr	r1, [pc, #228]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_RCC_OscConfig+0x270>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff f857 	bl	8000800 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff f853 	bl	8000800 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1a1      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4927      	ldr	r1, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_RCC_OscConfig+0x270>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff f836 	bl	8000800 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff f832 	bl	8000800 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e180      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d03a      	beq.n	8001838 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d019      	beq.n	80017fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_RCC_OscConfig+0x274>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff f816 	bl	8000800 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff f812 	bl	8000800 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e160      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f000 face 	bl	8001d98 <RCC_Delay>
 80017fc:	e01c      	b.n	8001838 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_RCC_OscConfig+0x274>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7fe fffc 	bl	8000800 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180a:	e00f      	b.n	800182c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7fe fff8 	bl	8000800 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d908      	bls.n	800182c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e146      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	42420000 	.word	0x42420000
 8001828:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b92      	ldr	r3, [pc, #584]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1e9      	bne.n	800180c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a6 	beq.w	8001992 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10d      	bne.n	8001872 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b82      	ldr	r3, [pc, #520]	; (8001a7c <HAL_RCC_OscConfig+0x4c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b7f      	ldr	r3, [pc, #508]	; (8001a7c <HAL_RCC_OscConfig+0x4c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7e      	ldr	r2, [pc, #504]	; (8001a7c <HAL_RCC_OscConfig+0x4c8>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7fe ffb9 	bl	8000800 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7fe ffb5 	bl	8000800 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b64      	cmp	r3, #100	; 0x64
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e103      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x4c8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x312>
 80018b8:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	e02d      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x334>
 80018ce:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a69      	ldr	r2, [pc, #420]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a66      	ldr	r2, [pc, #408]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f023 0304 	bic.w	r3, r3, #4
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	e01c      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_OscConfig+0x356>
 80018f0:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a60      	ldr	r2, [pc, #384]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a5d      	ldr	r2, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e00b      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a5a      	ldr	r2, [pc, #360]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a57      	ldr	r2, [pc, #348]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d015      	beq.n	8001956 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7fe ff69 	bl	8000800 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7fe ff65 	bl	8000800 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0b1      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0ee      	beq.n	8001932 <HAL_RCC_OscConfig+0x37e>
 8001954:	e014      	b.n	8001980 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7fe ff53 	bl	8000800 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7fe ff4f 	bl	8000800 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e09b      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ee      	bne.n	800195e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d105      	bne.n	8001992 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001986:	4b3c      	ldr	r3, [pc, #240]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a3b      	ldr	r2, [pc, #236]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8087 	beq.w	8001aaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d061      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d146      	bne.n	8001a3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <HAL_RCC_OscConfig+0x4cc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7fe ff23 	bl	8000800 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7fe ff1f 	bl	8000800 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e06d      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d108      	bne.n	80019f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4921      	ldr	r1, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a19      	ldr	r1, [r3, #32]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	491b      	ldr	r1, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x4cc>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7fe fef3 	bl	8000800 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7fe feef 	bl	8000800 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e03d      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x46a>
 8001a3c:	e035      	b.n	8001aaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_RCC_OscConfig+0x4cc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe fedc 	bl	8000800 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7fe fed8 	bl	8000800 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e026      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x498>
 8001a6a:	e01e      	b.n	8001aaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e019      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x500>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0d0      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001acc:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d910      	bls.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0207 	bic.w	r2, r3, #7
 8001ae2:	4965      	ldr	r1, [pc, #404]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0b8      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d020      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b14:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b2c:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	494d      	ldr	r1, [pc, #308]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d040      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d115      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e07f      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e073      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06b      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b96:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f023 0203 	bic.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4936      	ldr	r1, [pc, #216]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7fe fe2a 	bl	8000800 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7fe fe26 	bl	8000800 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e053      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 020c 	and.w	r2, r3, #12
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1eb      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d210      	bcs.n	8001c08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 0207 	bic.w	r2, r3, #7
 8001bee:	4922      	ldr	r1, [pc, #136]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e032      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4916      	ldr	r1, [pc, #88]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	490e      	ldr	r1, [pc, #56]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c46:	f000 f821 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	490a      	ldr	r1, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	5ccb      	ldrb	r3, [r1, r3]
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1cc>)
 8001c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1d0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fd88 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08003300 	.word	0x08003300
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x30>
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001cba:	e027      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cbe:	613b      	str	r3, [r7, #16]
      break;
 8001cc0:	e027      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	0c9b      	lsrs	r3, r3, #18
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d010      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0c5b      	lsrs	r3, r3, #17
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ce6:	5cd3      	ldrb	r3, [r2, r3]
 8001ce8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cee:	fb03 f202 	mul.w	r2, r3, r2
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e004      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	613b      	str	r3, [r7, #16]
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d0e:	613b      	str	r3, [r7, #16]
      break;
 8001d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d12:	693b      	ldr	r3, [r7, #16]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	007a1200 	.word	0x007a1200
 8001d28:	08003318 	.word	0x08003318
 8001d2c:	08003328 	.word	0x08003328
 8001d30:	003d0900 	.word	0x003d0900

08001d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d4c:	f7ff fff2 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4903      	ldr	r1, [pc, #12]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08003310 	.word	0x08003310

08001d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0adb      	lsrs	r3, r3, #11
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08003310 	.word	0x08003310

08001d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <RCC_Delay+0x34>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <RCC_Delay+0x38>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0a5b      	lsrs	r3, r3, #9
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db4:	bf00      	nop
  }
  while (Delay --);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e5a      	subs	r2, r3, #1
 8001dba:	60fa      	str	r2, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f9      	bne.n	8001db4 <RCC_Delay+0x1c>
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	10624dd3 	.word	0x10624dd3

08001dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d07d      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10d      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	61d3      	str	r3, [r2, #28]
 8001e0c:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d118      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e28:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a42      	ldr	r2, [pc, #264]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e34:	f7fe fce4 	bl	8000800 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	e008      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3c:	f7fe fce0 	bl	8000800 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e06d      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e5a:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d02e      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d027      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e8e:	4a29      	ldr	r2, [pc, #164]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d014      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7fe fcaf 	bl	8000800 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe fcab 	bl	8000800 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e036      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ee      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4917      	ldr	r1, [pc, #92]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	490b      	ldr	r1, [pc, #44]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	4904      	ldr	r1, [pc, #16]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	42420440 	.word	0x42420440

08001f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	f200 808a 	bhi.w	800207e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d045      	beq.n	8001ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d075      	beq.n	8002062 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f76:	e082      	b.n	800207e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001f78:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f7e:	4b45      	ldr	r3, [pc, #276]	; (8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d07b      	beq.n	8002082 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0c9b      	lsrs	r3, r3, #18
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	4a41      	ldr	r2, [pc, #260]	; (8002098 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0c5b      	lsrs	r3, r3, #17
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	4a3b      	ldr	r2, [pc, #236]	; (800209c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001fbc:	4a38      	ldr	r2, [pc, #224]	; (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	e004      	b.n	8001fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe4:	d102      	bne.n	8001fec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	61bb      	str	r3, [r7, #24]
      break;
 8001fea:	e04a      	b.n	8002082 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
      break;
 8001ffa:	e042      	b.n	8002082 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800200c:	d108      	bne.n	8002020 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	e01f      	b.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202a:	d109      	bne.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002038:	f649 4340 	movw	r3, #40000	; 0x9c40
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	e00f      	b.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800204a:	d11c      	bne.n	8002086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d016      	beq.n	8002086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002058:	f24f 4324 	movw	r3, #62500	; 0xf424
 800205c:	61bb      	str	r3, [r7, #24]
      break;
 800205e:	e012      	b.n	8002086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002060:	e011      	b.n	8002086 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002062:	f7ff fe85 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0b9b      	lsrs	r3, r3, #14
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	61bb      	str	r3, [r7, #24]
      break;
 800207c:	e004      	b.n	8002088 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800207e:	bf00      	nop
 8002080:	e002      	b.n	8002088 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002082:	bf00      	nop
 8002084:	e000      	b.n	8002088 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002086:	bf00      	nop
    }
  }
  return (frequency);
 8002088:	69bb      	ldr	r3, [r7, #24]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	0800332c 	.word	0x0800332c
 800209c:	0800333c 	.word	0x0800333c
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	003d0900 	.word	0x003d0900
 80020a8:	aaaaaaab 	.word	0xaaaaaaab

080020ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e042      	b.n	8002144 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe faca 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2224      	movs	r2, #36	; 0x24
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f91d 	bl	8002330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b20      	cmp	r3, #32
 800216a:	d16d      	bne.n	8002248 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_UART_Transmit+0x2c>
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e066      	b.n	800224a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2221      	movs	r2, #33	; 0x21
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800218a:	f7fe fb39 	bl	8000800 <HAL_GetTick>
 800218e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	88fa      	ldrh	r2, [r7, #6]
 8002194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a4:	d108      	bne.n	80021b8 <HAL_UART_Transmit+0x6c>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	e003      	b.n	80021c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021c0:	e02a      	b.n	8002218 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f840 	bl	8002252 <UART_WaitOnFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e036      	b.n	800224a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	3302      	adds	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e007      	b.n	800220a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1cf      	bne.n	80021c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f810 	bl	8002252 <UART_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e006      	b.n	800224a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b090      	sub	sp, #64	; 0x40
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002262:	e050      	b.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d04c      	beq.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800226c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <UART_WaitOnFlagUntilTimeout+0x30>
 8002272:	f7fe fac5 	bl	8000800 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800227e:	429a      	cmp	r2, r3
 8002280:	d241      	bcs.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	e853 3f00 	ldrex	r3, [r3]
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	330c      	adds	r3, #12
 80022a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022a2:	637a      	str	r2, [r7, #52]	; 0x34
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022aa:	e841 2300 	strex	r3, r2, [r1]
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1e5      	bne.n	8002282 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3314      	adds	r3, #20
 80022bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	e853 3f00 	ldrex	r3, [r3]
 80022c4:	613b      	str	r3, [r7, #16]
   return(result);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3314      	adds	r3, #20
 80022d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022d6:	623a      	str	r2, [r7, #32]
 80022d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022da:	69f9      	ldr	r1, [r7, #28]
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	e841 2300 	strex	r3, r2, [r1]
 80022e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e5      	bne.n	80022b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e00f      	b.n	8002326 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4013      	ands	r3, r2
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	429a      	cmp	r2, r3
 8002322:	d09f      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3740      	adds	r7, #64	; 0x40
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800236a:	f023 030c 	bic.w	r3, r3, #12
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	430b      	orrs	r3, r1
 8002376:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <UART_SetConfig+0x114>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d103      	bne.n	80023a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002398:	f7ff fcea 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	e002      	b.n	80023a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023a0:	f7ff fcd2 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 80023a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009a      	lsls	r2, r3, #2
 80023b0:	441a      	add	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	4a22      	ldr	r2, [pc, #136]	; (8002448 <UART_SetConfig+0x118>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	0119      	lsls	r1, r3, #4
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <UART_SetConfig+0x118>)
 80023de:	fba3 0302 	umull	r0, r3, r3, r2
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2064      	movs	r0, #100	; 0x64
 80023e6:	fb00 f303 	mul.w	r3, r0, r3
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	3332      	adds	r3, #50	; 0x32
 80023f0:	4a15      	ldr	r2, [pc, #84]	; (8002448 <UART_SetConfig+0x118>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fc:	4419      	add	r1, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	009a      	lsls	r2, r3, #2
 8002408:	441a      	add	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fbb2 f2f3 	udiv	r2, r2, r3
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <UART_SetConfig+0x118>)
 8002416:	fba3 0302 	umull	r0, r3, r3, r2
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	fb00 f303 	mul.w	r3, r0, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	3332      	adds	r3, #50	; 0x32
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <UART_SetConfig+0x118>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	f003 020f 	and.w	r2, r3, #15
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	440a      	add	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40013800 	.word	0x40013800
 8002448:	51eb851f 	.word	0x51eb851f

0800244c <std>:
 800244c:	2300      	movs	r3, #0
 800244e:	b510      	push	{r4, lr}
 8002450:	4604      	mov	r4, r0
 8002452:	e9c0 3300 	strd	r3, r3, [r0]
 8002456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800245a:	6083      	str	r3, [r0, #8]
 800245c:	8181      	strh	r1, [r0, #12]
 800245e:	6643      	str	r3, [r0, #100]	; 0x64
 8002460:	81c2      	strh	r2, [r0, #14]
 8002462:	6183      	str	r3, [r0, #24]
 8002464:	4619      	mov	r1, r3
 8002466:	2208      	movs	r2, #8
 8002468:	305c      	adds	r0, #92	; 0x5c
 800246a:	f000 f906 	bl	800267a <memset>
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <std+0x58>)
 8002470:	6224      	str	r4, [r4, #32]
 8002472:	6263      	str	r3, [r4, #36]	; 0x24
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <std+0x5c>)
 8002476:	62a3      	str	r3, [r4, #40]	; 0x28
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <std+0x60>)
 800247a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <std+0x64>)
 800247e:	6323      	str	r3, [r4, #48]	; 0x30
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <std+0x68>)
 8002482:	429c      	cmp	r4, r3
 8002484:	d006      	beq.n	8002494 <std+0x48>
 8002486:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800248a:	4294      	cmp	r4, r2
 800248c:	d002      	beq.n	8002494 <std+0x48>
 800248e:	33d0      	adds	r3, #208	; 0xd0
 8002490:	429c      	cmp	r4, r3
 8002492:	d105      	bne.n	80024a0 <std+0x54>
 8002494:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800249c:	f000 b966 	b.w	800276c <__retarget_lock_init_recursive>
 80024a0:	bd10      	pop	{r4, pc}
 80024a2:	bf00      	nop
 80024a4:	080025f5 	.word	0x080025f5
 80024a8:	08002617 	.word	0x08002617
 80024ac:	0800264f 	.word	0x0800264f
 80024b0:	08002673 	.word	0x08002673
 80024b4:	20000104 	.word	0x20000104

080024b8 <stdio_exit_handler>:
 80024b8:	4a02      	ldr	r2, [pc, #8]	; (80024c4 <stdio_exit_handler+0xc>)
 80024ba:	4903      	ldr	r1, [pc, #12]	; (80024c8 <stdio_exit_handler+0x10>)
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <stdio_exit_handler+0x14>)
 80024be:	f000 b869 	b.w	8002594 <_fwalk_sglue>
 80024c2:	bf00      	nop
 80024c4:	2000000c 	.word	0x2000000c
 80024c8:	0800300d 	.word	0x0800300d
 80024cc:	20000018 	.word	0x20000018

080024d0 <cleanup_stdio>:
 80024d0:	6841      	ldr	r1, [r0, #4]
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <cleanup_stdio+0x34>)
 80024d4:	b510      	push	{r4, lr}
 80024d6:	4299      	cmp	r1, r3
 80024d8:	4604      	mov	r4, r0
 80024da:	d001      	beq.n	80024e0 <cleanup_stdio+0x10>
 80024dc:	f000 fd96 	bl	800300c <_fflush_r>
 80024e0:	68a1      	ldr	r1, [r4, #8]
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <cleanup_stdio+0x38>)
 80024e4:	4299      	cmp	r1, r3
 80024e6:	d002      	beq.n	80024ee <cleanup_stdio+0x1e>
 80024e8:	4620      	mov	r0, r4
 80024ea:	f000 fd8f 	bl	800300c <_fflush_r>
 80024ee:	68e1      	ldr	r1, [r4, #12]
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <cleanup_stdio+0x3c>)
 80024f2:	4299      	cmp	r1, r3
 80024f4:	d004      	beq.n	8002500 <cleanup_stdio+0x30>
 80024f6:	4620      	mov	r0, r4
 80024f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024fc:	f000 bd86 	b.w	800300c <_fflush_r>
 8002500:	bd10      	pop	{r4, pc}
 8002502:	bf00      	nop
 8002504:	20000104 	.word	0x20000104
 8002508:	2000016c 	.word	0x2000016c
 800250c:	200001d4 	.word	0x200001d4

08002510 <global_stdio_init.part.0>:
 8002510:	b510      	push	{r4, lr}
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <global_stdio_init.part.0+0x30>)
 8002514:	4c0b      	ldr	r4, [pc, #44]	; (8002544 <global_stdio_init.part.0+0x34>)
 8002516:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <global_stdio_init.part.0+0x38>)
 8002518:	4620      	mov	r0, r4
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	2104      	movs	r1, #4
 800251e:	2200      	movs	r2, #0
 8002520:	f7ff ff94 	bl	800244c <std>
 8002524:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002528:	2201      	movs	r2, #1
 800252a:	2109      	movs	r1, #9
 800252c:	f7ff ff8e 	bl	800244c <std>
 8002530:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002534:	2202      	movs	r2, #2
 8002536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800253a:	2112      	movs	r1, #18
 800253c:	f7ff bf86 	b.w	800244c <std>
 8002540:	2000023c 	.word	0x2000023c
 8002544:	20000104 	.word	0x20000104
 8002548:	080024b9 	.word	0x080024b9

0800254c <__sfp_lock_acquire>:
 800254c:	4801      	ldr	r0, [pc, #4]	; (8002554 <__sfp_lock_acquire+0x8>)
 800254e:	f000 b90e 	b.w	800276e <__retarget_lock_acquire_recursive>
 8002552:	bf00      	nop
 8002554:	20000245 	.word	0x20000245

08002558 <__sfp_lock_release>:
 8002558:	4801      	ldr	r0, [pc, #4]	; (8002560 <__sfp_lock_release+0x8>)
 800255a:	f000 b909 	b.w	8002770 <__retarget_lock_release_recursive>
 800255e:	bf00      	nop
 8002560:	20000245 	.word	0x20000245

08002564 <__sinit>:
 8002564:	b510      	push	{r4, lr}
 8002566:	4604      	mov	r4, r0
 8002568:	f7ff fff0 	bl	800254c <__sfp_lock_acquire>
 800256c:	6a23      	ldr	r3, [r4, #32]
 800256e:	b11b      	cbz	r3, 8002578 <__sinit+0x14>
 8002570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002574:	f7ff bff0 	b.w	8002558 <__sfp_lock_release>
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__sinit+0x28>)
 800257a:	6223      	str	r3, [r4, #32]
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__sinit+0x2c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f5      	bne.n	8002570 <__sinit+0xc>
 8002584:	f7ff ffc4 	bl	8002510 <global_stdio_init.part.0>
 8002588:	e7f2      	b.n	8002570 <__sinit+0xc>
 800258a:	bf00      	nop
 800258c:	080024d1 	.word	0x080024d1
 8002590:	2000023c 	.word	0x2000023c

08002594 <_fwalk_sglue>:
 8002594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002598:	4607      	mov	r7, r0
 800259a:	4688      	mov	r8, r1
 800259c:	4614      	mov	r4, r2
 800259e:	2600      	movs	r6, #0
 80025a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80025a4:	f1b9 0901 	subs.w	r9, r9, #1
 80025a8:	d505      	bpl.n	80025b6 <_fwalk_sglue+0x22>
 80025aa:	6824      	ldr	r4, [r4, #0]
 80025ac:	2c00      	cmp	r4, #0
 80025ae:	d1f7      	bne.n	80025a0 <_fwalk_sglue+0xc>
 80025b0:	4630      	mov	r0, r6
 80025b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025b6:	89ab      	ldrh	r3, [r5, #12]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d907      	bls.n	80025cc <_fwalk_sglue+0x38>
 80025bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025c0:	3301      	adds	r3, #1
 80025c2:	d003      	beq.n	80025cc <_fwalk_sglue+0x38>
 80025c4:	4629      	mov	r1, r5
 80025c6:	4638      	mov	r0, r7
 80025c8:	47c0      	blx	r8
 80025ca:	4306      	orrs	r6, r0
 80025cc:	3568      	adds	r5, #104	; 0x68
 80025ce:	e7e9      	b.n	80025a4 <_fwalk_sglue+0x10>

080025d0 <iprintf>:
 80025d0:	b40f      	push	{r0, r1, r2, r3}
 80025d2:	b507      	push	{r0, r1, r2, lr}
 80025d4:	4906      	ldr	r1, [pc, #24]	; (80025f0 <iprintf+0x20>)
 80025d6:	ab04      	add	r3, sp, #16
 80025d8:	6808      	ldr	r0, [r1, #0]
 80025da:	f853 2b04 	ldr.w	r2, [r3], #4
 80025de:	6881      	ldr	r1, [r0, #8]
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	f000 f9e3 	bl	80029ac <_vfiprintf_r>
 80025e6:	b003      	add	sp, #12
 80025e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80025ec:	b004      	add	sp, #16
 80025ee:	4770      	bx	lr
 80025f0:	20000064 	.word	0x20000064

080025f4 <__sread>:
 80025f4:	b510      	push	{r4, lr}
 80025f6:	460c      	mov	r4, r1
 80025f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025fc:	f000 f868 	bl	80026d0 <_read_r>
 8002600:	2800      	cmp	r0, #0
 8002602:	bfab      	itete	ge
 8002604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002606:	89a3      	ldrhlt	r3, [r4, #12]
 8002608:	181b      	addge	r3, r3, r0
 800260a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800260e:	bfac      	ite	ge
 8002610:	6563      	strge	r3, [r4, #84]	; 0x54
 8002612:	81a3      	strhlt	r3, [r4, #12]
 8002614:	bd10      	pop	{r4, pc}

08002616 <__swrite>:
 8002616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800261a:	461f      	mov	r7, r3
 800261c:	898b      	ldrh	r3, [r1, #12]
 800261e:	4605      	mov	r5, r0
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	460c      	mov	r4, r1
 8002624:	4616      	mov	r6, r2
 8002626:	d505      	bpl.n	8002634 <__swrite+0x1e>
 8002628:	2302      	movs	r3, #2
 800262a:	2200      	movs	r2, #0
 800262c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002630:	f000 f83c 	bl	80026ac <_lseek_r>
 8002634:	89a3      	ldrh	r3, [r4, #12]
 8002636:	4632      	mov	r2, r6
 8002638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800263c:	81a3      	strh	r3, [r4, #12]
 800263e:	4628      	mov	r0, r5
 8002640:	463b      	mov	r3, r7
 8002642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800264a:	f000 b853 	b.w	80026f4 <_write_r>

0800264e <__sseek>:
 800264e:	b510      	push	{r4, lr}
 8002650:	460c      	mov	r4, r1
 8002652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002656:	f000 f829 	bl	80026ac <_lseek_r>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	bf15      	itete	ne
 8002660:	6560      	strne	r0, [r4, #84]	; 0x54
 8002662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800266a:	81a3      	strheq	r3, [r4, #12]
 800266c:	bf18      	it	ne
 800266e:	81a3      	strhne	r3, [r4, #12]
 8002670:	bd10      	pop	{r4, pc}

08002672 <__sclose>:
 8002672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002676:	f000 b809 	b.w	800268c <_close_r>

0800267a <memset>:
 800267a:	4603      	mov	r3, r0
 800267c:	4402      	add	r2, r0
 800267e:	4293      	cmp	r3, r2
 8002680:	d100      	bne.n	8002684 <memset+0xa>
 8002682:	4770      	bx	lr
 8002684:	f803 1b01 	strb.w	r1, [r3], #1
 8002688:	e7f9      	b.n	800267e <memset+0x4>
	...

0800268c <_close_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	2300      	movs	r3, #0
 8002690:	4d05      	ldr	r5, [pc, #20]	; (80026a8 <_close_r+0x1c>)
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	602b      	str	r3, [r5, #0]
 8002698:	f7fd ff52 	bl	8000540 <_close>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_close_r+0x1a>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_close_r+0x1a>
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	20000240 	.word	0x20000240

080026ac <_lseek_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	4611      	mov	r1, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	4d05      	ldr	r5, [pc, #20]	; (80026cc <_lseek_r+0x20>)
 80026b8:	602a      	str	r2, [r5, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f7fd ff64 	bl	8000588 <_lseek>
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	d102      	bne.n	80026ca <_lseek_r+0x1e>
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	b103      	cbz	r3, 80026ca <_lseek_r+0x1e>
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	20000240 	.word	0x20000240

080026d0 <_read_r>:
 80026d0:	b538      	push	{r3, r4, r5, lr}
 80026d2:	4604      	mov	r4, r0
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	4d05      	ldr	r5, [pc, #20]	; (80026f0 <_read_r+0x20>)
 80026dc:	602a      	str	r2, [r5, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	f7fd fef5 	bl	80004ce <_read>
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d102      	bne.n	80026ee <_read_r+0x1e>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	b103      	cbz	r3, 80026ee <_read_r+0x1e>
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
 80026f0:	20000240 	.word	0x20000240

080026f4 <_write_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	2200      	movs	r2, #0
 80026fe:	4d05      	ldr	r5, [pc, #20]	; (8002714 <_write_r+0x20>)
 8002700:	602a      	str	r2, [r5, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	f7fd ff00 	bl	8000508 <_write>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_write_r+0x1e>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	b103      	cbz	r3, 8002712 <_write_r+0x1e>
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	20000240 	.word	0x20000240

08002718 <__errno>:
 8002718:	4b01      	ldr	r3, [pc, #4]	; (8002720 <__errno+0x8>)
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000064 	.word	0x20000064

08002724 <__libc_init_array>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	2600      	movs	r6, #0
 8002728:	4d0c      	ldr	r5, [pc, #48]	; (800275c <__libc_init_array+0x38>)
 800272a:	4c0d      	ldr	r4, [pc, #52]	; (8002760 <__libc_init_array+0x3c>)
 800272c:	1b64      	subs	r4, r4, r5
 800272e:	10a4      	asrs	r4, r4, #2
 8002730:	42a6      	cmp	r6, r4
 8002732:	d109      	bne.n	8002748 <__libc_init_array+0x24>
 8002734:	f000 fdca 	bl	80032cc <_init>
 8002738:	2600      	movs	r6, #0
 800273a:	4d0a      	ldr	r5, [pc, #40]	; (8002764 <__libc_init_array+0x40>)
 800273c:	4c0a      	ldr	r4, [pc, #40]	; (8002768 <__libc_init_array+0x44>)
 800273e:	1b64      	subs	r4, r4, r5
 8002740:	10a4      	asrs	r4, r4, #2
 8002742:	42a6      	cmp	r6, r4
 8002744:	d105      	bne.n	8002752 <__libc_init_array+0x2e>
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	f855 3b04 	ldr.w	r3, [r5], #4
 800274c:	4798      	blx	r3
 800274e:	3601      	adds	r6, #1
 8002750:	e7ee      	b.n	8002730 <__libc_init_array+0xc>
 8002752:	f855 3b04 	ldr.w	r3, [r5], #4
 8002756:	4798      	blx	r3
 8002758:	3601      	adds	r6, #1
 800275a:	e7f2      	b.n	8002742 <__libc_init_array+0x1e>
 800275c:	08003374 	.word	0x08003374
 8002760:	08003374 	.word	0x08003374
 8002764:	08003374 	.word	0x08003374
 8002768:	08003378 	.word	0x08003378

0800276c <__retarget_lock_init_recursive>:
 800276c:	4770      	bx	lr

0800276e <__retarget_lock_acquire_recursive>:
 800276e:	4770      	bx	lr

08002770 <__retarget_lock_release_recursive>:
 8002770:	4770      	bx	lr
	...

08002774 <_free_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4605      	mov	r5, r0
 8002778:	2900      	cmp	r1, #0
 800277a:	d040      	beq.n	80027fe <_free_r+0x8a>
 800277c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002780:	1f0c      	subs	r4, r1, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	bfb8      	it	lt
 8002786:	18e4      	addlt	r4, r4, r3
 8002788:	f000 f8dc 	bl	8002944 <__malloc_lock>
 800278c:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <_free_r+0x8c>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	b933      	cbnz	r3, 80027a0 <_free_r+0x2c>
 8002792:	6063      	str	r3, [r4, #4]
 8002794:	6014      	str	r4, [r2, #0]
 8002796:	4628      	mov	r0, r5
 8002798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800279c:	f000 b8d8 	b.w	8002950 <__malloc_unlock>
 80027a0:	42a3      	cmp	r3, r4
 80027a2:	d908      	bls.n	80027b6 <_free_r+0x42>
 80027a4:	6820      	ldr	r0, [r4, #0]
 80027a6:	1821      	adds	r1, r4, r0
 80027a8:	428b      	cmp	r3, r1
 80027aa:	bf01      	itttt	eq
 80027ac:	6819      	ldreq	r1, [r3, #0]
 80027ae:	685b      	ldreq	r3, [r3, #4]
 80027b0:	1809      	addeq	r1, r1, r0
 80027b2:	6021      	streq	r1, [r4, #0]
 80027b4:	e7ed      	b.n	8002792 <_free_r+0x1e>
 80027b6:	461a      	mov	r2, r3
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	b10b      	cbz	r3, 80027c0 <_free_r+0x4c>
 80027bc:	42a3      	cmp	r3, r4
 80027be:	d9fa      	bls.n	80027b6 <_free_r+0x42>
 80027c0:	6811      	ldr	r1, [r2, #0]
 80027c2:	1850      	adds	r0, r2, r1
 80027c4:	42a0      	cmp	r0, r4
 80027c6:	d10b      	bne.n	80027e0 <_free_r+0x6c>
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	4401      	add	r1, r0
 80027cc:	1850      	adds	r0, r2, r1
 80027ce:	4283      	cmp	r3, r0
 80027d0:	6011      	str	r1, [r2, #0]
 80027d2:	d1e0      	bne.n	8002796 <_free_r+0x22>
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4408      	add	r0, r1
 80027da:	6010      	str	r0, [r2, #0]
 80027dc:	6053      	str	r3, [r2, #4]
 80027de:	e7da      	b.n	8002796 <_free_r+0x22>
 80027e0:	d902      	bls.n	80027e8 <_free_r+0x74>
 80027e2:	230c      	movs	r3, #12
 80027e4:	602b      	str	r3, [r5, #0]
 80027e6:	e7d6      	b.n	8002796 <_free_r+0x22>
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	1821      	adds	r1, r4, r0
 80027ec:	428b      	cmp	r3, r1
 80027ee:	bf01      	itttt	eq
 80027f0:	6819      	ldreq	r1, [r3, #0]
 80027f2:	685b      	ldreq	r3, [r3, #4]
 80027f4:	1809      	addeq	r1, r1, r0
 80027f6:	6021      	streq	r1, [r4, #0]
 80027f8:	6063      	str	r3, [r4, #4]
 80027fa:	6054      	str	r4, [r2, #4]
 80027fc:	e7cb      	b.n	8002796 <_free_r+0x22>
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	20000248 	.word	0x20000248

08002804 <sbrk_aligned>:
 8002804:	b570      	push	{r4, r5, r6, lr}
 8002806:	4e0e      	ldr	r6, [pc, #56]	; (8002840 <sbrk_aligned+0x3c>)
 8002808:	460c      	mov	r4, r1
 800280a:	6831      	ldr	r1, [r6, #0]
 800280c:	4605      	mov	r5, r0
 800280e:	b911      	cbnz	r1, 8002816 <sbrk_aligned+0x12>
 8002810:	f000 fcba 	bl	8003188 <_sbrk_r>
 8002814:	6030      	str	r0, [r6, #0]
 8002816:	4621      	mov	r1, r4
 8002818:	4628      	mov	r0, r5
 800281a:	f000 fcb5 	bl	8003188 <_sbrk_r>
 800281e:	1c43      	adds	r3, r0, #1
 8002820:	d00a      	beq.n	8002838 <sbrk_aligned+0x34>
 8002822:	1cc4      	adds	r4, r0, #3
 8002824:	f024 0403 	bic.w	r4, r4, #3
 8002828:	42a0      	cmp	r0, r4
 800282a:	d007      	beq.n	800283c <sbrk_aligned+0x38>
 800282c:	1a21      	subs	r1, r4, r0
 800282e:	4628      	mov	r0, r5
 8002830:	f000 fcaa 	bl	8003188 <_sbrk_r>
 8002834:	3001      	adds	r0, #1
 8002836:	d101      	bne.n	800283c <sbrk_aligned+0x38>
 8002838:	f04f 34ff 	mov.w	r4, #4294967295
 800283c:	4620      	mov	r0, r4
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	2000024c 	.word	0x2000024c

08002844 <_malloc_r>:
 8002844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002848:	1ccd      	adds	r5, r1, #3
 800284a:	f025 0503 	bic.w	r5, r5, #3
 800284e:	3508      	adds	r5, #8
 8002850:	2d0c      	cmp	r5, #12
 8002852:	bf38      	it	cc
 8002854:	250c      	movcc	r5, #12
 8002856:	2d00      	cmp	r5, #0
 8002858:	4607      	mov	r7, r0
 800285a:	db01      	blt.n	8002860 <_malloc_r+0x1c>
 800285c:	42a9      	cmp	r1, r5
 800285e:	d905      	bls.n	800286c <_malloc_r+0x28>
 8002860:	230c      	movs	r3, #12
 8002862:	2600      	movs	r6, #0
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4630      	mov	r0, r6
 8002868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800286c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002940 <_malloc_r+0xfc>
 8002870:	f000 f868 	bl	8002944 <__malloc_lock>
 8002874:	f8d8 3000 	ldr.w	r3, [r8]
 8002878:	461c      	mov	r4, r3
 800287a:	bb5c      	cbnz	r4, 80028d4 <_malloc_r+0x90>
 800287c:	4629      	mov	r1, r5
 800287e:	4638      	mov	r0, r7
 8002880:	f7ff ffc0 	bl	8002804 <sbrk_aligned>
 8002884:	1c43      	adds	r3, r0, #1
 8002886:	4604      	mov	r4, r0
 8002888:	d155      	bne.n	8002936 <_malloc_r+0xf2>
 800288a:	f8d8 4000 	ldr.w	r4, [r8]
 800288e:	4626      	mov	r6, r4
 8002890:	2e00      	cmp	r6, #0
 8002892:	d145      	bne.n	8002920 <_malloc_r+0xdc>
 8002894:	2c00      	cmp	r4, #0
 8002896:	d048      	beq.n	800292a <_malloc_r+0xe6>
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	4631      	mov	r1, r6
 800289c:	4638      	mov	r0, r7
 800289e:	eb04 0903 	add.w	r9, r4, r3
 80028a2:	f000 fc71 	bl	8003188 <_sbrk_r>
 80028a6:	4581      	cmp	r9, r0
 80028a8:	d13f      	bne.n	800292a <_malloc_r+0xe6>
 80028aa:	6821      	ldr	r1, [r4, #0]
 80028ac:	4638      	mov	r0, r7
 80028ae:	1a6d      	subs	r5, r5, r1
 80028b0:	4629      	mov	r1, r5
 80028b2:	f7ff ffa7 	bl	8002804 <sbrk_aligned>
 80028b6:	3001      	adds	r0, #1
 80028b8:	d037      	beq.n	800292a <_malloc_r+0xe6>
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	442b      	add	r3, r5
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	f8d8 3000 	ldr.w	r3, [r8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d038      	beq.n	800293a <_malloc_r+0xf6>
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	42a2      	cmp	r2, r4
 80028cc:	d12b      	bne.n	8002926 <_malloc_r+0xe2>
 80028ce:	2200      	movs	r2, #0
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e00f      	b.n	80028f4 <_malloc_r+0xb0>
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	1b52      	subs	r2, r2, r5
 80028d8:	d41f      	bmi.n	800291a <_malloc_r+0xd6>
 80028da:	2a0b      	cmp	r2, #11
 80028dc:	d917      	bls.n	800290e <_malloc_r+0xca>
 80028de:	1961      	adds	r1, r4, r5
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	6025      	str	r5, [r4, #0]
 80028e4:	bf18      	it	ne
 80028e6:	6059      	strne	r1, [r3, #4]
 80028e8:	6863      	ldr	r3, [r4, #4]
 80028ea:	bf08      	it	eq
 80028ec:	f8c8 1000 	streq.w	r1, [r8]
 80028f0:	5162      	str	r2, [r4, r5]
 80028f2:	604b      	str	r3, [r1, #4]
 80028f4:	4638      	mov	r0, r7
 80028f6:	f104 060b 	add.w	r6, r4, #11
 80028fa:	f000 f829 	bl	8002950 <__malloc_unlock>
 80028fe:	f026 0607 	bic.w	r6, r6, #7
 8002902:	1d23      	adds	r3, r4, #4
 8002904:	1af2      	subs	r2, r6, r3
 8002906:	d0ae      	beq.n	8002866 <_malloc_r+0x22>
 8002908:	1b9b      	subs	r3, r3, r6
 800290a:	50a3      	str	r3, [r4, r2]
 800290c:	e7ab      	b.n	8002866 <_malloc_r+0x22>
 800290e:	42a3      	cmp	r3, r4
 8002910:	6862      	ldr	r2, [r4, #4]
 8002912:	d1dd      	bne.n	80028d0 <_malloc_r+0x8c>
 8002914:	f8c8 2000 	str.w	r2, [r8]
 8002918:	e7ec      	b.n	80028f4 <_malloc_r+0xb0>
 800291a:	4623      	mov	r3, r4
 800291c:	6864      	ldr	r4, [r4, #4]
 800291e:	e7ac      	b.n	800287a <_malloc_r+0x36>
 8002920:	4634      	mov	r4, r6
 8002922:	6876      	ldr	r6, [r6, #4]
 8002924:	e7b4      	b.n	8002890 <_malloc_r+0x4c>
 8002926:	4613      	mov	r3, r2
 8002928:	e7cc      	b.n	80028c4 <_malloc_r+0x80>
 800292a:	230c      	movs	r3, #12
 800292c:	4638      	mov	r0, r7
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	f000 f80e 	bl	8002950 <__malloc_unlock>
 8002934:	e797      	b.n	8002866 <_malloc_r+0x22>
 8002936:	6025      	str	r5, [r4, #0]
 8002938:	e7dc      	b.n	80028f4 <_malloc_r+0xb0>
 800293a:	605b      	str	r3, [r3, #4]
 800293c:	deff      	udf	#255	; 0xff
 800293e:	bf00      	nop
 8002940:	20000248 	.word	0x20000248

08002944 <__malloc_lock>:
 8002944:	4801      	ldr	r0, [pc, #4]	; (800294c <__malloc_lock+0x8>)
 8002946:	f7ff bf12 	b.w	800276e <__retarget_lock_acquire_recursive>
 800294a:	bf00      	nop
 800294c:	20000244 	.word	0x20000244

08002950 <__malloc_unlock>:
 8002950:	4801      	ldr	r0, [pc, #4]	; (8002958 <__malloc_unlock+0x8>)
 8002952:	f7ff bf0d 	b.w	8002770 <__retarget_lock_release_recursive>
 8002956:	bf00      	nop
 8002958:	20000244 	.word	0x20000244

0800295c <__sfputc_r>:
 800295c:	6893      	ldr	r3, [r2, #8]
 800295e:	b410      	push	{r4}
 8002960:	3b01      	subs	r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	6093      	str	r3, [r2, #8]
 8002966:	da07      	bge.n	8002978 <__sfputc_r+0x1c>
 8002968:	6994      	ldr	r4, [r2, #24]
 800296a:	42a3      	cmp	r3, r4
 800296c:	db01      	blt.n	8002972 <__sfputc_r+0x16>
 800296e:	290a      	cmp	r1, #10
 8002970:	d102      	bne.n	8002978 <__sfputc_r+0x1c>
 8002972:	bc10      	pop	{r4}
 8002974:	f000 bb72 	b.w	800305c <__swbuf_r>
 8002978:	6813      	ldr	r3, [r2, #0]
 800297a:	1c58      	adds	r0, r3, #1
 800297c:	6010      	str	r0, [r2, #0]
 800297e:	7019      	strb	r1, [r3, #0]
 8002980:	4608      	mov	r0, r1
 8002982:	bc10      	pop	{r4}
 8002984:	4770      	bx	lr

08002986 <__sfputs_r>:
 8002986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002988:	4606      	mov	r6, r0
 800298a:	460f      	mov	r7, r1
 800298c:	4614      	mov	r4, r2
 800298e:	18d5      	adds	r5, r2, r3
 8002990:	42ac      	cmp	r4, r5
 8002992:	d101      	bne.n	8002998 <__sfputs_r+0x12>
 8002994:	2000      	movs	r0, #0
 8002996:	e007      	b.n	80029a8 <__sfputs_r+0x22>
 8002998:	463a      	mov	r2, r7
 800299a:	4630      	mov	r0, r6
 800299c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029a0:	f7ff ffdc 	bl	800295c <__sfputc_r>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	d1f3      	bne.n	8002990 <__sfputs_r+0xa>
 80029a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029ac <_vfiprintf_r>:
 80029ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b0:	460d      	mov	r5, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	4698      	mov	r8, r3
 80029b6:	4606      	mov	r6, r0
 80029b8:	b09d      	sub	sp, #116	; 0x74
 80029ba:	b118      	cbz	r0, 80029c4 <_vfiprintf_r+0x18>
 80029bc:	6a03      	ldr	r3, [r0, #32]
 80029be:	b90b      	cbnz	r3, 80029c4 <_vfiprintf_r+0x18>
 80029c0:	f7ff fdd0 	bl	8002564 <__sinit>
 80029c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029c6:	07d9      	lsls	r1, r3, #31
 80029c8:	d405      	bmi.n	80029d6 <_vfiprintf_r+0x2a>
 80029ca:	89ab      	ldrh	r3, [r5, #12]
 80029cc:	059a      	lsls	r2, r3, #22
 80029ce:	d402      	bmi.n	80029d6 <_vfiprintf_r+0x2a>
 80029d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029d2:	f7ff fecc 	bl	800276e <__retarget_lock_acquire_recursive>
 80029d6:	89ab      	ldrh	r3, [r5, #12]
 80029d8:	071b      	lsls	r3, r3, #28
 80029da:	d501      	bpl.n	80029e0 <_vfiprintf_r+0x34>
 80029dc:	692b      	ldr	r3, [r5, #16]
 80029de:	b99b      	cbnz	r3, 8002a08 <_vfiprintf_r+0x5c>
 80029e0:	4629      	mov	r1, r5
 80029e2:	4630      	mov	r0, r6
 80029e4:	f000 fb78 	bl	80030d8 <__swsetup_r>
 80029e8:	b170      	cbz	r0, 8002a08 <_vfiprintf_r+0x5c>
 80029ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029ec:	07dc      	lsls	r4, r3, #31
 80029ee:	d504      	bpl.n	80029fa <_vfiprintf_r+0x4e>
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	b01d      	add	sp, #116	; 0x74
 80029f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029fa:	89ab      	ldrh	r3, [r5, #12]
 80029fc:	0598      	lsls	r0, r3, #22
 80029fe:	d4f7      	bmi.n	80029f0 <_vfiprintf_r+0x44>
 8002a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a02:	f7ff feb5 	bl	8002770 <__retarget_lock_release_recursive>
 8002a06:	e7f3      	b.n	80029f0 <_vfiprintf_r+0x44>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a12:	2330      	movs	r3, #48	; 0x30
 8002a14:	f04f 0901 	mov.w	r9, #1
 8002a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002bcc <_vfiprintf_r+0x220>
 8002a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a24:	4623      	mov	r3, r4
 8002a26:	469a      	mov	sl, r3
 8002a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a2c:	b10a      	cbz	r2, 8002a32 <_vfiprintf_r+0x86>
 8002a2e:	2a25      	cmp	r2, #37	; 0x25
 8002a30:	d1f9      	bne.n	8002a26 <_vfiprintf_r+0x7a>
 8002a32:	ebba 0b04 	subs.w	fp, sl, r4
 8002a36:	d00b      	beq.n	8002a50 <_vfiprintf_r+0xa4>
 8002a38:	465b      	mov	r3, fp
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	4630      	mov	r0, r6
 8002a40:	f7ff ffa1 	bl	8002986 <__sfputs_r>
 8002a44:	3001      	adds	r0, #1
 8002a46:	f000 80a9 	beq.w	8002b9c <_vfiprintf_r+0x1f0>
 8002a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a4c:	445a      	add	r2, fp
 8002a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8002a50:	f89a 3000 	ldrb.w	r3, [sl]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80a1 	beq.w	8002b9c <_vfiprintf_r+0x1f0>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a64:	f10a 0a01 	add.w	sl, sl, #1
 8002a68:	9304      	str	r3, [sp, #16]
 8002a6a:	9307      	str	r3, [sp, #28]
 8002a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a70:	931a      	str	r3, [sp, #104]	; 0x68
 8002a72:	4654      	mov	r4, sl
 8002a74:	2205      	movs	r2, #5
 8002a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a7a:	4854      	ldr	r0, [pc, #336]	; (8002bcc <_vfiprintf_r+0x220>)
 8002a7c:	f000 fb94 	bl	80031a8 <memchr>
 8002a80:	9a04      	ldr	r2, [sp, #16]
 8002a82:	b9d8      	cbnz	r0, 8002abc <_vfiprintf_r+0x110>
 8002a84:	06d1      	lsls	r1, r2, #27
 8002a86:	bf44      	itt	mi
 8002a88:	2320      	movmi	r3, #32
 8002a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a8e:	0713      	lsls	r3, r2, #28
 8002a90:	bf44      	itt	mi
 8002a92:	232b      	movmi	r3, #43	; 0x2b
 8002a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a98:	f89a 3000 	ldrb.w	r3, [sl]
 8002a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a9e:	d015      	beq.n	8002acc <_vfiprintf_r+0x120>
 8002aa0:	4654      	mov	r4, sl
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f04f 0c0a 	mov.w	ip, #10
 8002aa8:	9a07      	ldr	r2, [sp, #28]
 8002aaa:	4621      	mov	r1, r4
 8002aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ab0:	3b30      	subs	r3, #48	; 0x30
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	d94d      	bls.n	8002b52 <_vfiprintf_r+0x1a6>
 8002ab6:	b1b0      	cbz	r0, 8002ae6 <_vfiprintf_r+0x13a>
 8002ab8:	9207      	str	r2, [sp, #28]
 8002aba:	e014      	b.n	8002ae6 <_vfiprintf_r+0x13a>
 8002abc:	eba0 0308 	sub.w	r3, r0, r8
 8002ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	46a2      	mov	sl, r4
 8002ac8:	9304      	str	r3, [sp, #16]
 8002aca:	e7d2      	b.n	8002a72 <_vfiprintf_r+0xc6>
 8002acc:	9b03      	ldr	r3, [sp, #12]
 8002ace:	1d19      	adds	r1, r3, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	9103      	str	r1, [sp, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bfbb      	ittet	lt
 8002ad8:	425b      	neglt	r3, r3
 8002ada:	f042 0202 	orrlt.w	r2, r2, #2
 8002ade:	9307      	strge	r3, [sp, #28]
 8002ae0:	9307      	strlt	r3, [sp, #28]
 8002ae2:	bfb8      	it	lt
 8002ae4:	9204      	strlt	r2, [sp, #16]
 8002ae6:	7823      	ldrb	r3, [r4, #0]
 8002ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8002aea:	d10c      	bne.n	8002b06 <_vfiprintf_r+0x15a>
 8002aec:	7863      	ldrb	r3, [r4, #1]
 8002aee:	2b2a      	cmp	r3, #42	; 0x2a
 8002af0:	d134      	bne.n	8002b5c <_vfiprintf_r+0x1b0>
 8002af2:	9b03      	ldr	r3, [sp, #12]
 8002af4:	3402      	adds	r4, #2
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	9203      	str	r2, [sp, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bfb8      	it	lt
 8002b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b04:	9305      	str	r3, [sp, #20]
 8002b06:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002bd0 <_vfiprintf_r+0x224>
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	4650      	mov	r0, sl
 8002b0e:	7821      	ldrb	r1, [r4, #0]
 8002b10:	f000 fb4a 	bl	80031a8 <memchr>
 8002b14:	b138      	cbz	r0, 8002b26 <_vfiprintf_r+0x17a>
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	9b04      	ldr	r3, [sp, #16]
 8002b1a:	eba0 000a 	sub.w	r0, r0, sl
 8002b1e:	4082      	lsls	r2, r0
 8002b20:	4313      	orrs	r3, r2
 8002b22:	3401      	adds	r4, #1
 8002b24:	9304      	str	r3, [sp, #16]
 8002b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b2a:	2206      	movs	r2, #6
 8002b2c:	4829      	ldr	r0, [pc, #164]	; (8002bd4 <_vfiprintf_r+0x228>)
 8002b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b32:	f000 fb39 	bl	80031a8 <memchr>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d03f      	beq.n	8002bba <_vfiprintf_r+0x20e>
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <_vfiprintf_r+0x22c>)
 8002b3c:	bb1b      	cbnz	r3, 8002b86 <_vfiprintf_r+0x1da>
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	3307      	adds	r3, #7
 8002b42:	f023 0307 	bic.w	r3, r3, #7
 8002b46:	3308      	adds	r3, #8
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b4c:	443b      	add	r3, r7
 8002b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b50:	e768      	b.n	8002a24 <_vfiprintf_r+0x78>
 8002b52:	460c      	mov	r4, r1
 8002b54:	2001      	movs	r0, #1
 8002b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b5a:	e7a6      	b.n	8002aaa <_vfiprintf_r+0xfe>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f04f 0c0a 	mov.w	ip, #10
 8002b62:	4619      	mov	r1, r3
 8002b64:	3401      	adds	r4, #1
 8002b66:	9305      	str	r3, [sp, #20]
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b6e:	3a30      	subs	r2, #48	; 0x30
 8002b70:	2a09      	cmp	r2, #9
 8002b72:	d903      	bls.n	8002b7c <_vfiprintf_r+0x1d0>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0c6      	beq.n	8002b06 <_vfiprintf_r+0x15a>
 8002b78:	9105      	str	r1, [sp, #20]
 8002b7a:	e7c4      	b.n	8002b06 <_vfiprintf_r+0x15a>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	2301      	movs	r3, #1
 8002b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b84:	e7f0      	b.n	8002b68 <_vfiprintf_r+0x1bc>
 8002b86:	ab03      	add	r3, sp, #12
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	462a      	mov	r2, r5
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <_vfiprintf_r+0x230>)
 8002b90:	a904      	add	r1, sp, #16
 8002b92:	f3af 8000 	nop.w
 8002b96:	4607      	mov	r7, r0
 8002b98:	1c78      	adds	r0, r7, #1
 8002b9a:	d1d6      	bne.n	8002b4a <_vfiprintf_r+0x19e>
 8002b9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b9e:	07d9      	lsls	r1, r3, #31
 8002ba0:	d405      	bmi.n	8002bae <_vfiprintf_r+0x202>
 8002ba2:	89ab      	ldrh	r3, [r5, #12]
 8002ba4:	059a      	lsls	r2, r3, #22
 8002ba6:	d402      	bmi.n	8002bae <_vfiprintf_r+0x202>
 8002ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002baa:	f7ff fde1 	bl	8002770 <__retarget_lock_release_recursive>
 8002bae:	89ab      	ldrh	r3, [r5, #12]
 8002bb0:	065b      	lsls	r3, r3, #25
 8002bb2:	f53f af1d 	bmi.w	80029f0 <_vfiprintf_r+0x44>
 8002bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bb8:	e71c      	b.n	80029f4 <_vfiprintf_r+0x48>
 8002bba:	ab03      	add	r3, sp, #12
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	462a      	mov	r2, r5
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <_vfiprintf_r+0x230>)
 8002bc4:	a904      	add	r1, sp, #16
 8002bc6:	f000 f87d 	bl	8002cc4 <_printf_i>
 8002bca:	e7e4      	b.n	8002b96 <_vfiprintf_r+0x1ea>
 8002bcc:	0800333e 	.word	0x0800333e
 8002bd0:	08003344 	.word	0x08003344
 8002bd4:	08003348 	.word	0x08003348
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	08002987 	.word	0x08002987

08002be0 <_printf_common>:
 8002be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be4:	4616      	mov	r6, r2
 8002be6:	4699      	mov	r9, r3
 8002be8:	688a      	ldr	r2, [r1, #8]
 8002bea:	690b      	ldr	r3, [r1, #16]
 8002bec:	4607      	mov	r7, r0
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	bfb8      	it	lt
 8002bf2:	4613      	movlt	r3, r2
 8002bf4:	6033      	str	r3, [r6, #0]
 8002bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c00:	b10a      	cbz	r2, 8002c06 <_printf_common+0x26>
 8002c02:	3301      	adds	r3, #1
 8002c04:	6033      	str	r3, [r6, #0]
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	0699      	lsls	r1, r3, #26
 8002c0a:	bf42      	ittt	mi
 8002c0c:	6833      	ldrmi	r3, [r6, #0]
 8002c0e:	3302      	addmi	r3, #2
 8002c10:	6033      	strmi	r3, [r6, #0]
 8002c12:	6825      	ldr	r5, [r4, #0]
 8002c14:	f015 0506 	ands.w	r5, r5, #6
 8002c18:	d106      	bne.n	8002c28 <_printf_common+0x48>
 8002c1a:	f104 0a19 	add.w	sl, r4, #25
 8002c1e:	68e3      	ldr	r3, [r4, #12]
 8002c20:	6832      	ldr	r2, [r6, #0]
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	42ab      	cmp	r3, r5
 8002c26:	dc2b      	bgt.n	8002c80 <_printf_common+0xa0>
 8002c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c2c:	1e13      	subs	r3, r2, #0
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	bf18      	it	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	0692      	lsls	r2, r2, #26
 8002c36:	d430      	bmi.n	8002c9a <_printf_common+0xba>
 8002c38:	4649      	mov	r1, r9
 8002c3a:	4638      	mov	r0, r7
 8002c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c40:	47c0      	blx	r8
 8002c42:	3001      	adds	r0, #1
 8002c44:	d023      	beq.n	8002c8e <_printf_common+0xae>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	6922      	ldr	r2, [r4, #16]
 8002c4a:	f003 0306 	and.w	r3, r3, #6
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	bf14      	ite	ne
 8002c52:	2500      	movne	r5, #0
 8002c54:	6833      	ldreq	r3, [r6, #0]
 8002c56:	f04f 0600 	mov.w	r6, #0
 8002c5a:	bf08      	it	eq
 8002c5c:	68e5      	ldreq	r5, [r4, #12]
 8002c5e:	f104 041a 	add.w	r4, r4, #26
 8002c62:	bf08      	it	eq
 8002c64:	1aed      	subeq	r5, r5, r3
 8002c66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c6a:	bf08      	it	eq
 8002c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bfc4      	itt	gt
 8002c74:	1a9b      	subgt	r3, r3, r2
 8002c76:	18ed      	addgt	r5, r5, r3
 8002c78:	42b5      	cmp	r5, r6
 8002c7a:	d11a      	bne.n	8002cb2 <_printf_common+0xd2>
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	e008      	b.n	8002c92 <_printf_common+0xb2>
 8002c80:	2301      	movs	r3, #1
 8002c82:	4652      	mov	r2, sl
 8002c84:	4649      	mov	r1, r9
 8002c86:	4638      	mov	r0, r7
 8002c88:	47c0      	blx	r8
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d103      	bne.n	8002c96 <_printf_common+0xb6>
 8002c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c96:	3501      	adds	r5, #1
 8002c98:	e7c1      	b.n	8002c1e <_printf_common+0x3e>
 8002c9a:	2030      	movs	r0, #48	; 0x30
 8002c9c:	18e1      	adds	r1, r4, r3
 8002c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ca8:	4422      	add	r2, r4
 8002caa:	3302      	adds	r3, #2
 8002cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cb0:	e7c2      	b.n	8002c38 <_printf_common+0x58>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	4638      	mov	r0, r7
 8002cba:	47c0      	blx	r8
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	d0e6      	beq.n	8002c8e <_printf_common+0xae>
 8002cc0:	3601      	adds	r6, #1
 8002cc2:	e7d9      	b.n	8002c78 <_printf_common+0x98>

08002cc4 <_printf_i>:
 8002cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc8:	7e0f      	ldrb	r7, [r1, #24]
 8002cca:	4691      	mov	r9, r2
 8002ccc:	2f78      	cmp	r7, #120	; 0x78
 8002cce:	4680      	mov	r8, r0
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	469a      	mov	sl, r3
 8002cd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cda:	d807      	bhi.n	8002cec <_printf_i+0x28>
 8002cdc:	2f62      	cmp	r7, #98	; 0x62
 8002cde:	d80a      	bhi.n	8002cf6 <_printf_i+0x32>
 8002ce0:	2f00      	cmp	r7, #0
 8002ce2:	f000 80d5 	beq.w	8002e90 <_printf_i+0x1cc>
 8002ce6:	2f58      	cmp	r7, #88	; 0x58
 8002ce8:	f000 80c1 	beq.w	8002e6e <_printf_i+0x1aa>
 8002cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cf4:	e03a      	b.n	8002d6c <_printf_i+0xa8>
 8002cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cfa:	2b15      	cmp	r3, #21
 8002cfc:	d8f6      	bhi.n	8002cec <_printf_i+0x28>
 8002cfe:	a101      	add	r1, pc, #4	; (adr r1, 8002d04 <_printf_i+0x40>)
 8002d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d04:	08002d5d 	.word	0x08002d5d
 8002d08:	08002d71 	.word	0x08002d71
 8002d0c:	08002ced 	.word	0x08002ced
 8002d10:	08002ced 	.word	0x08002ced
 8002d14:	08002ced 	.word	0x08002ced
 8002d18:	08002ced 	.word	0x08002ced
 8002d1c:	08002d71 	.word	0x08002d71
 8002d20:	08002ced 	.word	0x08002ced
 8002d24:	08002ced 	.word	0x08002ced
 8002d28:	08002ced 	.word	0x08002ced
 8002d2c:	08002ced 	.word	0x08002ced
 8002d30:	08002e77 	.word	0x08002e77
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002e31 	.word	0x08002e31
 8002d3c:	08002ced 	.word	0x08002ced
 8002d40:	08002ced 	.word	0x08002ced
 8002d44:	08002e99 	.word	0x08002e99
 8002d48:	08002ced 	.word	0x08002ced
 8002d4c:	08002d9d 	.word	0x08002d9d
 8002d50:	08002ced 	.word	0x08002ced
 8002d54:	08002ced 	.word	0x08002ced
 8002d58:	08002e39 	.word	0x08002e39
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	1d1a      	adds	r2, r3, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	602a      	str	r2, [r5, #0]
 8002d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0a0      	b.n	8002eb2 <_printf_i+0x1ee>
 8002d70:	6820      	ldr	r0, [r4, #0]
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	0607      	lsls	r7, r0, #24
 8002d76:	f103 0104 	add.w	r1, r3, #4
 8002d7a:	6029      	str	r1, [r5, #0]
 8002d7c:	d501      	bpl.n	8002d82 <_printf_i+0xbe>
 8002d7e:	681e      	ldr	r6, [r3, #0]
 8002d80:	e003      	b.n	8002d8a <_printf_i+0xc6>
 8002d82:	0646      	lsls	r6, r0, #25
 8002d84:	d5fb      	bpl.n	8002d7e <_printf_i+0xba>
 8002d86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d8a:	2e00      	cmp	r6, #0
 8002d8c:	da03      	bge.n	8002d96 <_printf_i+0xd2>
 8002d8e:	232d      	movs	r3, #45	; 0x2d
 8002d90:	4276      	negs	r6, r6
 8002d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d96:	230a      	movs	r3, #10
 8002d98:	4859      	ldr	r0, [pc, #356]	; (8002f00 <_printf_i+0x23c>)
 8002d9a:	e012      	b.n	8002dc2 <_printf_i+0xfe>
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	6820      	ldr	r0, [r4, #0]
 8002da0:	1d19      	adds	r1, r3, #4
 8002da2:	6029      	str	r1, [r5, #0]
 8002da4:	0605      	lsls	r5, r0, #24
 8002da6:	d501      	bpl.n	8002dac <_printf_i+0xe8>
 8002da8:	681e      	ldr	r6, [r3, #0]
 8002daa:	e002      	b.n	8002db2 <_printf_i+0xee>
 8002dac:	0641      	lsls	r1, r0, #25
 8002dae:	d5fb      	bpl.n	8002da8 <_printf_i+0xe4>
 8002db0:	881e      	ldrh	r6, [r3, #0]
 8002db2:	2f6f      	cmp	r7, #111	; 0x6f
 8002db4:	bf0c      	ite	eq
 8002db6:	2308      	moveq	r3, #8
 8002db8:	230a      	movne	r3, #10
 8002dba:	4851      	ldr	r0, [pc, #324]	; (8002f00 <_printf_i+0x23c>)
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dc2:	6865      	ldr	r5, [r4, #4]
 8002dc4:	2d00      	cmp	r5, #0
 8002dc6:	bfa8      	it	ge
 8002dc8:	6821      	ldrge	r1, [r4, #0]
 8002dca:	60a5      	str	r5, [r4, #8]
 8002dcc:	bfa4      	itt	ge
 8002dce:	f021 0104 	bicge.w	r1, r1, #4
 8002dd2:	6021      	strge	r1, [r4, #0]
 8002dd4:	b90e      	cbnz	r6, 8002dda <_printf_i+0x116>
 8002dd6:	2d00      	cmp	r5, #0
 8002dd8:	d04b      	beq.n	8002e72 <_printf_i+0x1ae>
 8002dda:	4615      	mov	r5, r2
 8002ddc:	fbb6 f1f3 	udiv	r1, r6, r3
 8002de0:	fb03 6711 	mls	r7, r3, r1, r6
 8002de4:	5dc7      	ldrb	r7, [r0, r7]
 8002de6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002dea:	4637      	mov	r7, r6
 8002dec:	42bb      	cmp	r3, r7
 8002dee:	460e      	mov	r6, r1
 8002df0:	d9f4      	bls.n	8002ddc <_printf_i+0x118>
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d10b      	bne.n	8002e0e <_printf_i+0x14a>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	07de      	lsls	r6, r3, #31
 8002dfa:	d508      	bpl.n	8002e0e <_printf_i+0x14a>
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	6861      	ldr	r1, [r4, #4]
 8002e00:	4299      	cmp	r1, r3
 8002e02:	bfde      	ittt	le
 8002e04:	2330      	movle	r3, #48	; 0x30
 8002e06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e0e:	1b52      	subs	r2, r2, r5
 8002e10:	6122      	str	r2, [r4, #16]
 8002e12:	464b      	mov	r3, r9
 8002e14:	4621      	mov	r1, r4
 8002e16:	4640      	mov	r0, r8
 8002e18:	f8cd a000 	str.w	sl, [sp]
 8002e1c:	aa03      	add	r2, sp, #12
 8002e1e:	f7ff fedf 	bl	8002be0 <_printf_common>
 8002e22:	3001      	adds	r0, #1
 8002e24:	d14a      	bne.n	8002ebc <_printf_i+0x1f8>
 8002e26:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2a:	b004      	add	sp, #16
 8002e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	f043 0320 	orr.w	r3, r3, #32
 8002e36:	6023      	str	r3, [r4, #0]
 8002e38:	2778      	movs	r7, #120	; 0x78
 8002e3a:	4832      	ldr	r0, [pc, #200]	; (8002f04 <_printf_i+0x240>)
 8002e3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	6829      	ldr	r1, [r5, #0]
 8002e44:	061f      	lsls	r7, r3, #24
 8002e46:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e4a:	d402      	bmi.n	8002e52 <_printf_i+0x18e>
 8002e4c:	065f      	lsls	r7, r3, #25
 8002e4e:	bf48      	it	mi
 8002e50:	b2b6      	uxthmi	r6, r6
 8002e52:	07df      	lsls	r7, r3, #31
 8002e54:	bf48      	it	mi
 8002e56:	f043 0320 	orrmi.w	r3, r3, #32
 8002e5a:	6029      	str	r1, [r5, #0]
 8002e5c:	bf48      	it	mi
 8002e5e:	6023      	strmi	r3, [r4, #0]
 8002e60:	b91e      	cbnz	r6, 8002e6a <_printf_i+0x1a6>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	f023 0320 	bic.w	r3, r3, #32
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	e7a6      	b.n	8002dbc <_printf_i+0xf8>
 8002e6e:	4824      	ldr	r0, [pc, #144]	; (8002f00 <_printf_i+0x23c>)
 8002e70:	e7e4      	b.n	8002e3c <_printf_i+0x178>
 8002e72:	4615      	mov	r5, r2
 8002e74:	e7bd      	b.n	8002df2 <_printf_i+0x12e>
 8002e76:	682b      	ldr	r3, [r5, #0]
 8002e78:	6826      	ldr	r6, [r4, #0]
 8002e7a:	1d18      	adds	r0, r3, #4
 8002e7c:	6961      	ldr	r1, [r4, #20]
 8002e7e:	6028      	str	r0, [r5, #0]
 8002e80:	0635      	lsls	r5, r6, #24
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	d501      	bpl.n	8002e8a <_printf_i+0x1c6>
 8002e86:	6019      	str	r1, [r3, #0]
 8002e88:	e002      	b.n	8002e90 <_printf_i+0x1cc>
 8002e8a:	0670      	lsls	r0, r6, #25
 8002e8c:	d5fb      	bpl.n	8002e86 <_printf_i+0x1c2>
 8002e8e:	8019      	strh	r1, [r3, #0]
 8002e90:	2300      	movs	r3, #0
 8002e92:	4615      	mov	r5, r2
 8002e94:	6123      	str	r3, [r4, #16]
 8002e96:	e7bc      	b.n	8002e12 <_printf_i+0x14e>
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	1d1a      	adds	r2, r3, #4
 8002e9e:	602a      	str	r2, [r5, #0]
 8002ea0:	681d      	ldr	r5, [r3, #0]
 8002ea2:	6862      	ldr	r2, [r4, #4]
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f000 f97f 	bl	80031a8 <memchr>
 8002eaa:	b108      	cbz	r0, 8002eb0 <_printf_i+0x1ec>
 8002eac:	1b40      	subs	r0, r0, r5
 8002eae:	6060      	str	r0, [r4, #4]
 8002eb0:	6863      	ldr	r3, [r4, #4]
 8002eb2:	6123      	str	r3, [r4, #16]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eba:	e7aa      	b.n	8002e12 <_printf_i+0x14e>
 8002ebc:	462a      	mov	r2, r5
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	6923      	ldr	r3, [r4, #16]
 8002ec4:	47d0      	blx	sl
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d0ad      	beq.n	8002e26 <_printf_i+0x162>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	079b      	lsls	r3, r3, #30
 8002ece:	d413      	bmi.n	8002ef8 <_printf_i+0x234>
 8002ed0:	68e0      	ldr	r0, [r4, #12]
 8002ed2:	9b03      	ldr	r3, [sp, #12]
 8002ed4:	4298      	cmp	r0, r3
 8002ed6:	bfb8      	it	lt
 8002ed8:	4618      	movlt	r0, r3
 8002eda:	e7a6      	b.n	8002e2a <_printf_i+0x166>
 8002edc:	2301      	movs	r3, #1
 8002ede:	4632      	mov	r2, r6
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	4640      	mov	r0, r8
 8002ee4:	47d0      	blx	sl
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d09d      	beq.n	8002e26 <_printf_i+0x162>
 8002eea:	3501      	adds	r5, #1
 8002eec:	68e3      	ldr	r3, [r4, #12]
 8002eee:	9903      	ldr	r1, [sp, #12]
 8002ef0:	1a5b      	subs	r3, r3, r1
 8002ef2:	42ab      	cmp	r3, r5
 8002ef4:	dcf2      	bgt.n	8002edc <_printf_i+0x218>
 8002ef6:	e7eb      	b.n	8002ed0 <_printf_i+0x20c>
 8002ef8:	2500      	movs	r5, #0
 8002efa:	f104 0619 	add.w	r6, r4, #25
 8002efe:	e7f5      	b.n	8002eec <_printf_i+0x228>
 8002f00:	0800334f 	.word	0x0800334f
 8002f04:	08003360 	.word	0x08003360

08002f08 <__sflush_r>:
 8002f08:	898a      	ldrh	r2, [r1, #12]
 8002f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0c:	4605      	mov	r5, r0
 8002f0e:	0710      	lsls	r0, r2, #28
 8002f10:	460c      	mov	r4, r1
 8002f12:	d457      	bmi.n	8002fc4 <__sflush_r+0xbc>
 8002f14:	684b      	ldr	r3, [r1, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	dc04      	bgt.n	8002f24 <__sflush_r+0x1c>
 8002f1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	dc01      	bgt.n	8002f24 <__sflush_r+0x1c>
 8002f20:	2000      	movs	r0, #0
 8002f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f26:	2e00      	cmp	r6, #0
 8002f28:	d0fa      	beq.n	8002f20 <__sflush_r+0x18>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f30:	682f      	ldr	r7, [r5, #0]
 8002f32:	6a21      	ldr	r1, [r4, #32]
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	d032      	beq.n	8002f9e <__sflush_r+0x96>
 8002f38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	075a      	lsls	r2, r3, #29
 8002f3e:	d505      	bpl.n	8002f4c <__sflush_r+0x44>
 8002f40:	6863      	ldr	r3, [r4, #4]
 8002f42:	1ac0      	subs	r0, r0, r3
 8002f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f46:	b10b      	cbz	r3, 8002f4c <__sflush_r+0x44>
 8002f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f4a:	1ac0      	subs	r0, r0, r3
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f52:	4628      	mov	r0, r5
 8002f54:	6a21      	ldr	r1, [r4, #32]
 8002f56:	47b0      	blx	r6
 8002f58:	1c43      	adds	r3, r0, #1
 8002f5a:	89a3      	ldrh	r3, [r4, #12]
 8002f5c:	d106      	bne.n	8002f6c <__sflush_r+0x64>
 8002f5e:	6829      	ldr	r1, [r5, #0]
 8002f60:	291d      	cmp	r1, #29
 8002f62:	d82b      	bhi.n	8002fbc <__sflush_r+0xb4>
 8002f64:	4a28      	ldr	r2, [pc, #160]	; (8003008 <__sflush_r+0x100>)
 8002f66:	410a      	asrs	r2, r1
 8002f68:	07d6      	lsls	r6, r2, #31
 8002f6a:	d427      	bmi.n	8002fbc <__sflush_r+0xb4>
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6062      	str	r2, [r4, #4]
 8002f70:	6922      	ldr	r2, [r4, #16]
 8002f72:	04d9      	lsls	r1, r3, #19
 8002f74:	6022      	str	r2, [r4, #0]
 8002f76:	d504      	bpl.n	8002f82 <__sflush_r+0x7a>
 8002f78:	1c42      	adds	r2, r0, #1
 8002f7a:	d101      	bne.n	8002f80 <__sflush_r+0x78>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	b903      	cbnz	r3, 8002f82 <__sflush_r+0x7a>
 8002f80:	6560      	str	r0, [r4, #84]	; 0x54
 8002f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f84:	602f      	str	r7, [r5, #0]
 8002f86:	2900      	cmp	r1, #0
 8002f88:	d0ca      	beq.n	8002f20 <__sflush_r+0x18>
 8002f8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f8e:	4299      	cmp	r1, r3
 8002f90:	d002      	beq.n	8002f98 <__sflush_r+0x90>
 8002f92:	4628      	mov	r0, r5
 8002f94:	f7ff fbee 	bl	8002774 <_free_r>
 8002f98:	2000      	movs	r0, #0
 8002f9a:	6360      	str	r0, [r4, #52]	; 0x34
 8002f9c:	e7c1      	b.n	8002f22 <__sflush_r+0x1a>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	47b0      	blx	r6
 8002fa4:	1c41      	adds	r1, r0, #1
 8002fa6:	d1c8      	bne.n	8002f3a <__sflush_r+0x32>
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0c5      	beq.n	8002f3a <__sflush_r+0x32>
 8002fae:	2b1d      	cmp	r3, #29
 8002fb0:	d001      	beq.n	8002fb6 <__sflush_r+0xae>
 8002fb2:	2b16      	cmp	r3, #22
 8002fb4:	d101      	bne.n	8002fba <__sflush_r+0xb2>
 8002fb6:	602f      	str	r7, [r5, #0]
 8002fb8:	e7b2      	b.n	8002f20 <__sflush_r+0x18>
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc0:	81a3      	strh	r3, [r4, #12]
 8002fc2:	e7ae      	b.n	8002f22 <__sflush_r+0x1a>
 8002fc4:	690f      	ldr	r7, [r1, #16]
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d0aa      	beq.n	8002f20 <__sflush_r+0x18>
 8002fca:	0793      	lsls	r3, r2, #30
 8002fcc:	bf18      	it	ne
 8002fce:	2300      	movne	r3, #0
 8002fd0:	680e      	ldr	r6, [r1, #0]
 8002fd2:	bf08      	it	eq
 8002fd4:	694b      	ldreq	r3, [r1, #20]
 8002fd6:	1bf6      	subs	r6, r6, r7
 8002fd8:	600f      	str	r7, [r1, #0]
 8002fda:	608b      	str	r3, [r1, #8]
 8002fdc:	2e00      	cmp	r6, #0
 8002fde:	dd9f      	ble.n	8002f20 <__sflush_r+0x18>
 8002fe0:	4633      	mov	r3, r6
 8002fe2:	463a      	mov	r2, r7
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	6a21      	ldr	r1, [r4, #32]
 8002fe8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002fec:	47e0      	blx	ip
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	dc06      	bgt.n	8003000 <__sflush_r+0xf8>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	e790      	b.n	8002f22 <__sflush_r+0x1a>
 8003000:	4407      	add	r7, r0
 8003002:	1a36      	subs	r6, r6, r0
 8003004:	e7ea      	b.n	8002fdc <__sflush_r+0xd4>
 8003006:	bf00      	nop
 8003008:	dfbffffe 	.word	0xdfbffffe

0800300c <_fflush_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	690b      	ldr	r3, [r1, #16]
 8003010:	4605      	mov	r5, r0
 8003012:	460c      	mov	r4, r1
 8003014:	b913      	cbnz	r3, 800301c <_fflush_r+0x10>
 8003016:	2500      	movs	r5, #0
 8003018:	4628      	mov	r0, r5
 800301a:	bd38      	pop	{r3, r4, r5, pc}
 800301c:	b118      	cbz	r0, 8003026 <_fflush_r+0x1a>
 800301e:	6a03      	ldr	r3, [r0, #32]
 8003020:	b90b      	cbnz	r3, 8003026 <_fflush_r+0x1a>
 8003022:	f7ff fa9f 	bl	8002564 <__sinit>
 8003026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f3      	beq.n	8003016 <_fflush_r+0xa>
 800302e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003030:	07d0      	lsls	r0, r2, #31
 8003032:	d404      	bmi.n	800303e <_fflush_r+0x32>
 8003034:	0599      	lsls	r1, r3, #22
 8003036:	d402      	bmi.n	800303e <_fflush_r+0x32>
 8003038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800303a:	f7ff fb98 	bl	800276e <__retarget_lock_acquire_recursive>
 800303e:	4628      	mov	r0, r5
 8003040:	4621      	mov	r1, r4
 8003042:	f7ff ff61 	bl	8002f08 <__sflush_r>
 8003046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003048:	4605      	mov	r5, r0
 800304a:	07da      	lsls	r2, r3, #31
 800304c:	d4e4      	bmi.n	8003018 <_fflush_r+0xc>
 800304e:	89a3      	ldrh	r3, [r4, #12]
 8003050:	059b      	lsls	r3, r3, #22
 8003052:	d4e1      	bmi.n	8003018 <_fflush_r+0xc>
 8003054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003056:	f7ff fb8b 	bl	8002770 <__retarget_lock_release_recursive>
 800305a:	e7dd      	b.n	8003018 <_fflush_r+0xc>

0800305c <__swbuf_r>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	460e      	mov	r6, r1
 8003060:	4614      	mov	r4, r2
 8003062:	4605      	mov	r5, r0
 8003064:	b118      	cbz	r0, 800306e <__swbuf_r+0x12>
 8003066:	6a03      	ldr	r3, [r0, #32]
 8003068:	b90b      	cbnz	r3, 800306e <__swbuf_r+0x12>
 800306a:	f7ff fa7b 	bl	8002564 <__sinit>
 800306e:	69a3      	ldr	r3, [r4, #24]
 8003070:	60a3      	str	r3, [r4, #8]
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	071a      	lsls	r2, r3, #28
 8003076:	d525      	bpl.n	80030c4 <__swbuf_r+0x68>
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	b31b      	cbz	r3, 80030c4 <__swbuf_r+0x68>
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	6922      	ldr	r2, [r4, #16]
 8003080:	b2f6      	uxtb	r6, r6
 8003082:	1a98      	subs	r0, r3, r2
 8003084:	6963      	ldr	r3, [r4, #20]
 8003086:	4637      	mov	r7, r6
 8003088:	4283      	cmp	r3, r0
 800308a:	dc04      	bgt.n	8003096 <__swbuf_r+0x3a>
 800308c:	4621      	mov	r1, r4
 800308e:	4628      	mov	r0, r5
 8003090:	f7ff ffbc 	bl	800300c <_fflush_r>
 8003094:	b9e0      	cbnz	r0, 80030d0 <__swbuf_r+0x74>
 8003096:	68a3      	ldr	r3, [r4, #8]
 8003098:	3b01      	subs	r3, #1
 800309a:	60a3      	str	r3, [r4, #8]
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	6022      	str	r2, [r4, #0]
 80030a2:	701e      	strb	r6, [r3, #0]
 80030a4:	6962      	ldr	r2, [r4, #20]
 80030a6:	1c43      	adds	r3, r0, #1
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d004      	beq.n	80030b6 <__swbuf_r+0x5a>
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	07db      	lsls	r3, r3, #31
 80030b0:	d506      	bpl.n	80030c0 <__swbuf_r+0x64>
 80030b2:	2e0a      	cmp	r6, #10
 80030b4:	d104      	bne.n	80030c0 <__swbuf_r+0x64>
 80030b6:	4621      	mov	r1, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	f7ff ffa7 	bl	800300c <_fflush_r>
 80030be:	b938      	cbnz	r0, 80030d0 <__swbuf_r+0x74>
 80030c0:	4638      	mov	r0, r7
 80030c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 f806 	bl	80030d8 <__swsetup_r>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d0d5      	beq.n	800307c <__swbuf_r+0x20>
 80030d0:	f04f 37ff 	mov.w	r7, #4294967295
 80030d4:	e7f4      	b.n	80030c0 <__swbuf_r+0x64>
	...

080030d8 <__swsetup_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <__swsetup_r+0xac>)
 80030dc:	4605      	mov	r5, r0
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	460c      	mov	r4, r1
 80030e2:	b118      	cbz	r0, 80030ec <__swsetup_r+0x14>
 80030e4:	6a03      	ldr	r3, [r0, #32]
 80030e6:	b90b      	cbnz	r3, 80030ec <__swsetup_r+0x14>
 80030e8:	f7ff fa3c 	bl	8002564 <__sinit>
 80030ec:	89a3      	ldrh	r3, [r4, #12]
 80030ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030f2:	0718      	lsls	r0, r3, #28
 80030f4:	d422      	bmi.n	800313c <__swsetup_r+0x64>
 80030f6:	06d9      	lsls	r1, r3, #27
 80030f8:	d407      	bmi.n	800310a <__swsetup_r+0x32>
 80030fa:	2309      	movs	r3, #9
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003102:	f04f 30ff 	mov.w	r0, #4294967295
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	e034      	b.n	8003174 <__swsetup_r+0x9c>
 800310a:	0758      	lsls	r0, r3, #29
 800310c:	d512      	bpl.n	8003134 <__swsetup_r+0x5c>
 800310e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003110:	b141      	cbz	r1, 8003124 <__swsetup_r+0x4c>
 8003112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003116:	4299      	cmp	r1, r3
 8003118:	d002      	beq.n	8003120 <__swsetup_r+0x48>
 800311a:	4628      	mov	r0, r5
 800311c:	f7ff fb2a 	bl	8002774 <_free_r>
 8003120:	2300      	movs	r3, #0
 8003122:	6363      	str	r3, [r4, #52]	; 0x34
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800312a:	81a3      	strh	r3, [r4, #12]
 800312c:	2300      	movs	r3, #0
 800312e:	6063      	str	r3, [r4, #4]
 8003130:	6923      	ldr	r3, [r4, #16]
 8003132:	6023      	str	r3, [r4, #0]
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	f043 0308 	orr.w	r3, r3, #8
 800313a:	81a3      	strh	r3, [r4, #12]
 800313c:	6923      	ldr	r3, [r4, #16]
 800313e:	b94b      	cbnz	r3, 8003154 <__swsetup_r+0x7c>
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314a:	d003      	beq.n	8003154 <__swsetup_r+0x7c>
 800314c:	4621      	mov	r1, r4
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f85d 	bl	800320e <__smakebuf_r>
 8003154:	89a0      	ldrh	r0, [r4, #12]
 8003156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800315a:	f010 0301 	ands.w	r3, r0, #1
 800315e:	d00a      	beq.n	8003176 <__swsetup_r+0x9e>
 8003160:	2300      	movs	r3, #0
 8003162:	60a3      	str	r3, [r4, #8]
 8003164:	6963      	ldr	r3, [r4, #20]
 8003166:	425b      	negs	r3, r3
 8003168:	61a3      	str	r3, [r4, #24]
 800316a:	6923      	ldr	r3, [r4, #16]
 800316c:	b943      	cbnz	r3, 8003180 <__swsetup_r+0xa8>
 800316e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003172:	d1c4      	bne.n	80030fe <__swsetup_r+0x26>
 8003174:	bd38      	pop	{r3, r4, r5, pc}
 8003176:	0781      	lsls	r1, r0, #30
 8003178:	bf58      	it	pl
 800317a:	6963      	ldrpl	r3, [r4, #20]
 800317c:	60a3      	str	r3, [r4, #8]
 800317e:	e7f4      	b.n	800316a <__swsetup_r+0x92>
 8003180:	2000      	movs	r0, #0
 8003182:	e7f7      	b.n	8003174 <__swsetup_r+0x9c>
 8003184:	20000064 	.word	0x20000064

08003188 <_sbrk_r>:
 8003188:	b538      	push	{r3, r4, r5, lr}
 800318a:	2300      	movs	r3, #0
 800318c:	4d05      	ldr	r5, [pc, #20]	; (80031a4 <_sbrk_r+0x1c>)
 800318e:	4604      	mov	r4, r0
 8003190:	4608      	mov	r0, r1
 8003192:	602b      	str	r3, [r5, #0]
 8003194:	f7fd fa04 	bl	80005a0 <_sbrk>
 8003198:	1c43      	adds	r3, r0, #1
 800319a:	d102      	bne.n	80031a2 <_sbrk_r+0x1a>
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	b103      	cbz	r3, 80031a2 <_sbrk_r+0x1a>
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	bd38      	pop	{r3, r4, r5, pc}
 80031a4:	20000240 	.word	0x20000240

080031a8 <memchr>:
 80031a8:	4603      	mov	r3, r0
 80031aa:	b510      	push	{r4, lr}
 80031ac:	b2c9      	uxtb	r1, r1
 80031ae:	4402      	add	r2, r0
 80031b0:	4293      	cmp	r3, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	d101      	bne.n	80031ba <memchr+0x12>
 80031b6:	2000      	movs	r0, #0
 80031b8:	e003      	b.n	80031c2 <memchr+0x1a>
 80031ba:	7804      	ldrb	r4, [r0, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	428c      	cmp	r4, r1
 80031c0:	d1f6      	bne.n	80031b0 <memchr+0x8>
 80031c2:	bd10      	pop	{r4, pc}

080031c4 <__swhatbuf_r>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	460c      	mov	r4, r1
 80031c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031cc:	4615      	mov	r5, r2
 80031ce:	2900      	cmp	r1, #0
 80031d0:	461e      	mov	r6, r3
 80031d2:	b096      	sub	sp, #88	; 0x58
 80031d4:	da0c      	bge.n	80031f0 <__swhatbuf_r+0x2c>
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	2100      	movs	r1, #0
 80031da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031de:	bf0c      	ite	eq
 80031e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80031e4:	2340      	movne	r3, #64	; 0x40
 80031e6:	2000      	movs	r0, #0
 80031e8:	6031      	str	r1, [r6, #0]
 80031ea:	602b      	str	r3, [r5, #0]
 80031ec:	b016      	add	sp, #88	; 0x58
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	466a      	mov	r2, sp
 80031f2:	f000 f849 	bl	8003288 <_fstat_r>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	dbed      	blt.n	80031d6 <__swhatbuf_r+0x12>
 80031fa:	9901      	ldr	r1, [sp, #4]
 80031fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003200:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003204:	4259      	negs	r1, r3
 8003206:	4159      	adcs	r1, r3
 8003208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320c:	e7eb      	b.n	80031e6 <__swhatbuf_r+0x22>

0800320e <__smakebuf_r>:
 800320e:	898b      	ldrh	r3, [r1, #12]
 8003210:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003212:	079d      	lsls	r5, r3, #30
 8003214:	4606      	mov	r6, r0
 8003216:	460c      	mov	r4, r1
 8003218:	d507      	bpl.n	800322a <__smakebuf_r+0x1c>
 800321a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	6123      	str	r3, [r4, #16]
 8003222:	2301      	movs	r3, #1
 8003224:	6163      	str	r3, [r4, #20]
 8003226:	b002      	add	sp, #8
 8003228:	bd70      	pop	{r4, r5, r6, pc}
 800322a:	466a      	mov	r2, sp
 800322c:	ab01      	add	r3, sp, #4
 800322e:	f7ff ffc9 	bl	80031c4 <__swhatbuf_r>
 8003232:	9900      	ldr	r1, [sp, #0]
 8003234:	4605      	mov	r5, r0
 8003236:	4630      	mov	r0, r6
 8003238:	f7ff fb04 	bl	8002844 <_malloc_r>
 800323c:	b948      	cbnz	r0, 8003252 <__smakebuf_r+0x44>
 800323e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003242:	059a      	lsls	r2, r3, #22
 8003244:	d4ef      	bmi.n	8003226 <__smakebuf_r+0x18>
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	f043 0302 	orr.w	r3, r3, #2
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	e7e3      	b.n	800321a <__smakebuf_r+0xc>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	6020      	str	r0, [r4, #0]
 8003256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	9b00      	ldr	r3, [sp, #0]
 800325e:	6120      	str	r0, [r4, #16]
 8003260:	6163      	str	r3, [r4, #20]
 8003262:	9b01      	ldr	r3, [sp, #4]
 8003264:	b15b      	cbz	r3, 800327e <__smakebuf_r+0x70>
 8003266:	4630      	mov	r0, r6
 8003268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800326c:	f000 f81e 	bl	80032ac <_isatty_r>
 8003270:	b128      	cbz	r0, 800327e <__smakebuf_r+0x70>
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	f023 0303 	bic.w	r3, r3, #3
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	81a3      	strh	r3, [r4, #12]
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	431d      	orrs	r5, r3
 8003282:	81a5      	strh	r5, [r4, #12]
 8003284:	e7cf      	b.n	8003226 <__smakebuf_r+0x18>
	...

08003288 <_fstat_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	2300      	movs	r3, #0
 800328c:	4d06      	ldr	r5, [pc, #24]	; (80032a8 <_fstat_r+0x20>)
 800328e:	4604      	mov	r4, r0
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	f7fd f95e 	bl	8000556 <_fstat>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	d102      	bne.n	80032a4 <_fstat_r+0x1c>
 800329e:	682b      	ldr	r3, [r5, #0]
 80032a0:	b103      	cbz	r3, 80032a4 <_fstat_r+0x1c>
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	bd38      	pop	{r3, r4, r5, pc}
 80032a6:	bf00      	nop
 80032a8:	20000240 	.word	0x20000240

080032ac <_isatty_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	2300      	movs	r3, #0
 80032b0:	4d05      	ldr	r5, [pc, #20]	; (80032c8 <_isatty_r+0x1c>)
 80032b2:	4604      	mov	r4, r0
 80032b4:	4608      	mov	r0, r1
 80032b6:	602b      	str	r3, [r5, #0]
 80032b8:	f7fd f95c 	bl	8000574 <_isatty>
 80032bc:	1c43      	adds	r3, r0, #1
 80032be:	d102      	bne.n	80032c6 <_isatty_r+0x1a>
 80032c0:	682b      	ldr	r3, [r5, #0]
 80032c2:	b103      	cbz	r3, 80032c6 <_isatty_r+0x1a>
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	bd38      	pop	{r3, r4, r5, pc}
 80032c8:	20000240 	.word	0x20000240

080032cc <_init>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	bf00      	nop
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr

080032d8 <_fini>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr
