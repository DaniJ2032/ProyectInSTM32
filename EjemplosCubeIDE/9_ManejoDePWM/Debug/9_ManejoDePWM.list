
9_ManejoDePWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004750  08004750  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004750  08004750  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000068  080047c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080047c0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d88c  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f7  00000000  00000000  0002d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  0002fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aad  00000000  00000000  00030c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003af8  00000000  00000000  000316dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116fa  00000000  00000000  000351d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f2e  00000000  00000000  000468cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004138  00000000  00000000  000d7800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000db938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080046c8 	.word	0x080046c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080046c8 	.word	0x080046c8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_frsub>:
 8000a90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	e002      	b.n	8000a9c <__addsf3>
 8000a96:	bf00      	nop

08000a98 <__aeabi_fsub>:
 8000a98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a9c <__addsf3>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	bf1f      	itttt	ne
 8000aa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa4:	ea92 0f03 	teqne	r2, r3
 8000aa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab0:	d06a      	beq.n	8000b88 <__addsf3+0xec>
 8000ab2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aba:	bfc1      	itttt	gt
 8000abc:	18d2      	addgt	r2, r2, r3
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	4048      	eorgt	r0, r1
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	bf88      	it	hi
 8000acc:	4770      	bxhi	lr
 8000ace:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4249      	negne	r1, r1
 8000aee:	ea92 0f03 	teq	r2, r3
 8000af2:	d03f      	beq.n	8000b74 <__addsf3+0xd8>
 8000af4:	f1a2 0201 	sub.w	r2, r2, #1
 8000af8:	fa41 fc03 	asr.w	ip, r1, r3
 8000afc:	eb10 000c 	adds.w	r0, r0, ip
 8000b00:	f1c3 0320 	rsb	r3, r3, #32
 8000b04:	fa01 f103 	lsl.w	r1, r1, r3
 8000b08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__addsf3+0x78>
 8000b0e:	4249      	negs	r1, r1
 8000b10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b18:	d313      	bcc.n	8000b42 <__addsf3+0xa6>
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1e:	d306      	bcc.n	8000b2e <__addsf3+0x92>
 8000b20:	0840      	lsrs	r0, r0, #1
 8000b22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b26:	f102 0201 	add.w	r2, r2, #1
 8000b2a:	2afe      	cmp	r2, #254	; 0xfe
 8000b2c:	d251      	bcs.n	8000bd2 <__addsf3+0x136>
 8000b2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b36:	bf08      	it	eq
 8000b38:	f020 0001 	biceq.w	r0, r0, #1
 8000b3c:	ea40 0003 	orr.w	r0, r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	0049      	lsls	r1, r1, #1
 8000b44:	eb40 0000 	adc.w	r0, r0, r0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	bf28      	it	cs
 8000b4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b50:	d2ed      	bcs.n	8000b2e <__addsf3+0x92>
 8000b52:	fab0 fc80 	clz	ip, r0
 8000b56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b62:	bfaa      	itet	ge
 8000b64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b68:	4252      	neglt	r2, r2
 8000b6a:	4318      	orrge	r0, r3
 8000b6c:	bfbc      	itt	lt
 8000b6e:	40d0      	lsrlt	r0, r2
 8000b70:	4318      	orrlt	r0, r3
 8000b72:	4770      	bx	lr
 8000b74:	f092 0f00 	teq	r2, #0
 8000b78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b7c:	bf06      	itte	eq
 8000b7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b82:	3201      	addeq	r2, #1
 8000b84:	3b01      	subne	r3, #1
 8000b86:	e7b5      	b.n	8000af4 <__addsf3+0x58>
 8000b88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b96:	d021      	beq.n	8000bdc <__addsf3+0x140>
 8000b98:	ea92 0f03 	teq	r2, r3
 8000b9c:	d004      	beq.n	8000ba8 <__addsf3+0x10c>
 8000b9e:	f092 0f00 	teq	r2, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	4608      	moveq	r0, r1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea90 0f01 	teq	r0, r1
 8000bac:	bf1c      	itt	ne
 8000bae:	2000      	movne	r0, #0
 8000bb0:	4770      	bxne	lr
 8000bb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb6:	d104      	bne.n	8000bc2 <__addsf3+0x126>
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc6:	bf3c      	itt	cc
 8000bc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bxcc	lr
 8000bce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bda:	4770      	bx	lr
 8000bdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be0:	bf16      	itet	ne
 8000be2:	4608      	movne	r0, r1
 8000be4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be8:	4601      	movne	r1, r0
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	bf06      	itte	eq
 8000bee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf2:	ea90 0f01 	teqeq	r0, r1
 8000bf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ui2f>:
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e004      	b.n	8000c0c <__aeabi_i2f+0x8>
 8000c02:	bf00      	nop

08000c04 <__aeabi_i2f>:
 8000c04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c08:	bf48      	it	mi
 8000c0a:	4240      	negmi	r0, r0
 8000c0c:	ea5f 0c00 	movs.w	ip, r0
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	e01c      	b.n	8000c5a <__aeabi_l2f+0x2a>

08000c20 <__aeabi_ul2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <__aeabi_l2f+0x14>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_l2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c3c:	d502      	bpl.n	8000c44 <__aeabi_l2f+0x14>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	ea5f 0c01 	movs.w	ip, r1
 8000c48:	bf02      	ittt	eq
 8000c4a:	4684      	moveq	ip, r0
 8000c4c:	4601      	moveq	r1, r0
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c54:	bf08      	it	eq
 8000c56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5e:	fabc f28c 	clz	r2, ip
 8000c62:	3a08      	subs	r2, #8
 8000c64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c68:	db10      	blt.n	8000c8c <__aeabi_l2f+0x5c>
 8000c6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c74:	f1c2 0220 	rsb	r2, r2, #32
 8000c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	eb43 0002 	adc.w	r0, r3, r2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f102 0220 	add.w	r2, r2, #32
 8000c90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000caa:	4770      	bx	lr

08000cac <PWM_init>:

#include "PWM.h"


void  PWM_init(TIM_HandleTypeDef *PWM,uint16_t canal)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	807b      	strh	r3, [r7, #2]

HAL_TIM_PWM_Start(PWM, canal);
 8000cb8:	887b      	ldrh	r3, [r7, #2]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f001 fe75 	bl	80029ac <HAL_TIM_PWM_Start>

}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <pwm_valor>:

void pwm_valor(uint32_t *canal,float valor)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
	//PWMTIM1->ARR   =100
	 //    ?         =valor

*canal=valor*(float)PWMTIM1->ARR/100.0;  // lo escala de 0 a 100%
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <pwm_valor+0x4c>)
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff8e 	bl	8000bfc <__aeabi_ui2f>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	6839      	ldr	r1, [r7, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fa31 	bl	800014c <__aeabi_fmul>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc45 	bl	800057c <__aeabi_f2d>
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <pwm_valor+0x50>)
 8000cf8:	f7ff fdc2 	bl	8000880 <__aeabi_ddiv>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff fea4 	bl	8000a50 <__aeabi_d2uiz>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40012c00 	.word	0x40012c00
 8000d1c:	40590000 	.word	0x40590000

08000d20 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d32:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <MX_ADC1_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d5e:	f000 fc3d 	bl	80015dc <HAL_ADC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d68:	f000 f92b 	bl	8000fc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_ADC1_Init+0x74>)
 8000d7e:	f000 fd05 	bl	800178c <HAL_ADC_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d88:	f000 f91b 	bl	8000fc2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000084 	.word	0x20000084
 8000d98:	40012400 	.word	0x40012400

08000d9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_ADC_MspInit+0x6c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d121      	bne.n	8000e00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_ADC_MspInit+0x70>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_ADC_MspInit+0x70>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_ADC_MspInit+0x70>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_ADC_MspInit+0x70>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_ADC_MspInit+0x70>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_ADC_MspInit+0x70>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dec:	2301      	movs	r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df0:	2303      	movs	r3, #3
 8000df2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_ADC_MspInit+0x74>)
 8000dfc:	f000 fee4 	bl	8001bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40012400 	.word	0x40012400
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010800 	.word	0x40010800

08000e14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e20:	f043 0320 	orr.w	r3, r3, #32
 8000e24:	6193      	str	r3, [r2, #24]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f003 0320 	and.w	r3, r3, #32
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	6193      	str	r3, [r2, #24]
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <MX_GPIO_Init+0x58>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000

08000e70 <__io_putchar>:
#define uartx huart1   //   colocar el puerto serial a usar

extern UART_HandleTypeDef uartx;


int __io_putchar(int ch) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 //ITM_SendChar(ch);//  si se quiere usar por debbuger
HAL_UART_Transmit(&uartx, (uint8_t *)&ch, 1, 0xFFFF);// printf al puerto serial sefinico
 8000e78:	1d39      	adds	r1, r7, #4
 8000e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <__io_putchar+0x20>)
 8000e82:	f002 fb62 	bl	800354a <HAL_UART_Transmit>
return(ch);
 8000e86:	687b      	ldr	r3, [r7, #4]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000100 	.word	0x20000100

08000e94 <main>:
#include "printf_out.h"
#include "PWM.h"

void SystemClock_Config(void);

int main(void){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  HAL_Init();
 8000e98:	f000 fb3e 	bl	8001518 <HAL_Init>


  SystemClock_Config();
 8000e9c:	f000 f836 	bl	8000f0c <SystemClock_Config>


  MX_GPIO_Init();
 8000ea0:	f7ff ffb8 	bl	8000e14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ea4:	f7ff ff3c 	bl	8000d20 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ea8:	f000 fa8c 	bl	80013c4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000eac:	f000 f98c 	bl	80011c8 <MX_TIM1_Init>

  PWM_init(&PWMHAN, PWM1_CH);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <main+0x58>)
 8000eb4:	f7ff fefa 	bl	8000cac <PWM_init>
  PWM_init(&PWMHAN, PWM2_CH);	// Iniciamos PWM de TIM1 en CH2
 8000eb8:	2104      	movs	r1, #4
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <main+0x58>)
 8000ebc:	f7ff fef6 	bl	8000cac <PWM_init>

  pwm_valor(&PWM1, 10);
 8000ec0:	490b      	ldr	r1, [pc, #44]	; (8000ef0 <main+0x5c>)
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <main+0x60>)
 8000ec4:	f7ff ff02 	bl	8000ccc <pwm_valor>
  pwm_valor(&PWM2, 50);
 8000ec8:	490b      	ldr	r1, [pc, #44]	; (8000ef8 <main+0x64>)
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <main+0x68>)
 8000ecc:	f7ff fefe 	bl	8000ccc <pwm_valor>



  while (1){

	  printf("Valor: %ld\r\n", 90*PWMTIM1->ARR/100);
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <main+0x6c>)
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	225a      	movs	r2, #90	; 0x5a
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <main+0x70>)
 8000edc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee0:	095b      	lsrs	r3, r3, #5
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <main+0x74>)
 8000ee6:	f002 fd71 	bl	80039cc <iprintf>
 8000eea:	e7f1      	b.n	8000ed0 <main+0x3c>
 8000eec:	200000b8 	.word	0x200000b8
 8000ef0:	41200000 	.word	0x41200000
 8000ef4:	40012c34 	.word	0x40012c34
 8000ef8:	42480000 	.word	0x42480000
 8000efc:	40012c38 	.word	0x40012c38
 8000f00:	40012c00 	.word	0x40012c00
 8000f04:	51eb851f 	.word	0x51eb851f
 8000f08:	080046e0 	.word	0x080046e0

08000f0c <SystemClock_Config>:





void SystemClock_Config(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	2228      	movs	r2, #40	; 0x28
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fdab 	bl	8003a76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 ffb4 	bl	8001ed0 <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f6e:	f000 f828 	bl	8000fc2 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fa20 	bl	80023d4 <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f9a:	f000 f812 	bl	8000fc2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fba0 	bl	80026f0 <HAL_RCCEx_PeriphCLKConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fb6:	f000 f804 	bl	8000fc2 <Error_Handler>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3750      	adds	r7, #80	; 0x50
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <Error_Handler>:

void Error_Handler(void){
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc6:	b672      	cpsid	i
}
 8000fc8:	bf00      	nop

  __disable_irq();
  while (1){}
 8000fca:	e7fe      	b.n	8000fca <Error_Handler+0x8>

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <HAL_MspInit+0x5c>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_MspInit+0x5c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_MspInit+0x5c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x5c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_MspInit+0x60>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_MspInit+0x60>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <MemManage_Handler+0x4>

08001042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <UsageFault_Handler+0x4>

0800104e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001076:	f000 fa95 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e00a      	b.n	80010a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001090:	f3af 8000 	nop.w
 8001094:	4601      	mov	r1, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	60ba      	str	r2, [r7, #8]
 800109c:	b2ca      	uxtb	r2, r1
 800109e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dbf0      	blt.n	8001090 <_read+0x12>
  }

  return len;
 80010ae:	687b      	ldr	r3, [r7, #4]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e009      	b.n	80010de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	60ba      	str	r2, [r7, #8]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fecc 	bl	8000e70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	dbf1      	blt.n	80010ca <_write+0x12>
  }
  return len;
 80010e6:	687b      	ldr	r3, [r7, #4]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_close>:

int _close(int file)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001116:	605a      	str	r2, [r3, #4]
  return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <_isatty>:

int _isatty(int file)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f002 fcc8 	bl	8003b14 <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20005000 	.word	0x20005000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	200000b4 	.word	0x200000b4
 80011b8:	20000298 	.word	0x20000298

080011bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b096      	sub	sp, #88	; 0x58
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fc38 	bl	8003a76 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001206:	4b44      	ldr	r3, [pc, #272]	; (8001318 <MX_TIM1_Init+0x150>)
 8001208:	4a44      	ldr	r2, [pc, #272]	; (800131c <MX_TIM1_Init+0x154>)
 800120a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800120c:	4b42      	ldr	r3, [pc, #264]	; (8001318 <MX_TIM1_Init+0x150>)
 800120e:	2247      	movs	r2, #71	; 0x47
 8001210:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <MX_TIM1_Init+0x150>)
 8001214:	2210      	movs	r2, #16
 8001216:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001218:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <MX_TIM1_Init+0x150>)
 800121a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800121e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MX_TIM1_Init+0x150>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001226:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <MX_TIM1_Init+0x150>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <MX_TIM1_Init+0x150>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001232:	4839      	ldr	r0, [pc, #228]	; (8001318 <MX_TIM1_Init+0x150>)
 8001234:	f001 fb12 	bl	800285c <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800123e:	f7ff fec0 	bl	8000fc2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800124c:	4619      	mov	r1, r3
 800124e:	4832      	ldr	r0, [pc, #200]	; (8001318 <MX_TIM1_Init+0x150>)
 8001250:	f001 fd10 	bl	8002c74 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800125a:	f7ff feb2 	bl	8000fc2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800125e:	482e      	ldr	r0, [pc, #184]	; (8001318 <MX_TIM1_Init+0x150>)
 8001260:	f001 fb4b 	bl	80028fa <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800126a:	f7ff feaa 	bl	8000fc2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001276:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800127a:	4619      	mov	r1, r3
 800127c:	4826      	ldr	r0, [pc, #152]	; (8001318 <MX_TIM1_Init+0x150>)
 800127e:	f002 f865 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001288:	f7ff fe9b 	bl	8000fc2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128c:	2360      	movs	r3, #96	; 0x60
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <MX_TIM1_Init+0x150>)
 80012b2:	f001 fc1d 	bl	8002af0 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012bc:	f7ff fe81 	bl	8000fc2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	2204      	movs	r2, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_TIM1_Init+0x150>)
 80012ca:	f001 fc11 	bl	8002af0 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012d4:	f7ff fe75 	bl	8000fc2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <MX_TIM1_Init+0x150>)
 80012fc:	f002 f884 	bl	8003408 <HAL_TIMEx_ConfigBreakDeadTime>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001306:	f7ff fe5c 	bl	8000fc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <MX_TIM1_Init+0x150>)
 800130c:	f000 f826 	bl	800135c <HAL_TIM_MspPostInit>

}
 8001310:	bf00      	nop
 8001312:	3758      	adds	r7, #88	; 0x58
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200000b8 	.word	0x200000b8
 800131c:	40012c00 	.word	0x40012c00

08001320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_TIM_Base_MspInit+0x34>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d10b      	bne.n	800134a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_TIM_Base_MspInit+0x38>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_TIM_Base_MspInit+0x38>)
 8001338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_TIM_Base_MspInit+0x38>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40012c00 	.word	0x40012c00
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_TIM_MspPostInit+0x5c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d118      	bne.n	80013ae <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_TIM_MspPostInit+0x60>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_TIM_MspPostInit+0x60>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_TIM_MspPostInit+0x60>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001394:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001398:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2302      	movs	r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_TIM_MspPostInit+0x64>)
 80013aa:	f000 fc0d 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40012c00 	.word	0x40012c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010800 	.word	0x40010800

080013c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <MX_USART1_UART_Init+0x50>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_USART1_UART_Init+0x4c>)
 80013fc:	f002 f855 	bl	80034aa <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001406:	f7ff fddc 	bl	8000fc2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000100 	.word	0x20000100
 8001414:	40013800 	.word	0x40013800

08001418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HAL_UART_MspInit+0xa4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d13d      	bne.n	80014b4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_UART_MspInit+0xa8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <HAL_UART_MspInit+0xa8>)
 800143e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_UART_MspInit+0xa8>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_UART_MspInit+0xa8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <HAL_UART_MspInit+0xa8>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_UART_MspInit+0xa8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001468:	2340      	movs	r3, #64	; 0x40
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4812      	ldr	r0, [pc, #72]	; (80014c4 <HAL_UART_MspInit+0xac>)
 800147c:	f000 fba4 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	480c      	ldr	r0, [pc, #48]	; (80014c4 <HAL_UART_MspInit+0xac>)
 8001494:	f000 fb98 	bl	8001bc8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_UART_MspInit+0xb0>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_UART_MspInit+0xb0>)
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	; 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40013800 	.word	0x40013800
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40010000 	.word	0x40010000

080014cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff fe76 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014d2:	490c      	ldr	r1, [pc, #48]	; (8001504 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014e8:	4c09      	ldr	r4, [pc, #36]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f002 fb13 	bl	8003b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff fccb 	bl	8000e94 <main>
  bx lr
 80014fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001508:	08004758 	.word	0x08004758
  ldr r2, =_sbss
 800150c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001510:	20000298 	.word	0x20000298

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_Init+0x28>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_Init+0x28>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 fb19 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	200f      	movs	r0, #15
 8001530:	f000 f808 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fd4a 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fb23 	bl	8001bae <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 faf9 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000000 	.word	0x20000000
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_IncTick+0x20>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000148 	.word	0x20000148

080015c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000148 	.word	0x20000148

080015dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0be      	b.n	800177c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fbbe 	bl	8000d9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f9ab 	bl	800197c <ADC_ConversionStop_Disable>
 8001626:	4603      	mov	r3, r0
 8001628:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 8099 	bne.w	800176a <HAL_ADC_Init+0x18e>
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 8095 	bne.w	800176a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001648:	f023 0302 	bic.w	r3, r3, #2
 800164c:	f043 0202 	orr.w	r2, r3, #2
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800165c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7b1b      	ldrb	r3, [r3, #12]
 8001662:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001664:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4313      	orrs	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001674:	d003      	beq.n	800167e <HAL_ADC_Init+0xa2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_ADC_Init+0xa8>
 800167e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001682:	e000      	b.n	8001686 <HAL_ADC_Init+0xaa>
 8001684:	2300      	movs	r3, #0
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7d1b      	ldrb	r3, [r3, #20]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d119      	bne.n	80016c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	035a      	lsls	r2, r3, #13
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e00b      	b.n	80016c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f043 0220 	orr.w	r2, r3, #32
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <HAL_ADC_Init+0x1a8>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f8:	d003      	beq.n	8001702 <HAL_ADC_Init+0x126>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d104      	bne.n	800170c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	3b01      	subs	r3, #1
 8001708:	051b      	lsls	r3, r3, #20
 800170a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	430a      	orrs	r2, r1
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_ADC_Init+0x1ac>)
 8001728:	4013      	ands	r3, r2
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	429a      	cmp	r2, r3
 800172e:	d10b      	bne.n	8001748 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001746:	e018      	b.n	800177a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	f023 0312 	bic.w	r3, r3, #18
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001768:	e007      	b.n	800177a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	f043 0210 	orr.w	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	ffe1f7fd 	.word	0xffe1f7fd
 8001788:	ff1f0efe 	.word	0xff1f0efe

0800178c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x20>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e0dc      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1da>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	d81c      	bhi.n	80017f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b05      	subs	r3, #5
 80017ce:	221f      	movs	r2, #31
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4019      	ands	r1, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	3b05      	subs	r3, #5
 80017e8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
 80017f4:	e03c      	b.n	8001870 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	d81c      	bhi.n	8001838 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	3b23      	subs	r3, #35	; 0x23
 8001810:	221f      	movs	r2, #31
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	4019      	ands	r1, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b23      	subs	r3, #35	; 0x23
 800182a:	fa00 f203 	lsl.w	r2, r0, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
 8001836:	e01b      	b.n	8001870 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	3b41      	subs	r3, #65	; 0x41
 800184a:	221f      	movs	r2, #31
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b41      	subs	r3, #65	; 0x41
 8001864:	fa00 f203 	lsl.w	r2, r0, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b09      	cmp	r3, #9
 8001876:	d91c      	bls.n	80018b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68d9      	ldr	r1, [r3, #12]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	3b1e      	subs	r3, #30
 800188a:	2207      	movs	r2, #7
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	4019      	ands	r1, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6898      	ldr	r0, [r3, #8]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	3b1e      	subs	r3, #30
 80018a4:	fa00 f203 	lsl.w	r2, r0, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	e019      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6919      	ldr	r1, [r3, #16]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	2207      	movs	r2, #7
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4019      	ands	r1, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6898      	ldr	r0, [r3, #8]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	fa00 f203 	lsl.w	r2, r0, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d003      	beq.n	80018f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018f2:	2b11      	cmp	r3, #17
 80018f4:	d132      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_ADC_ConfigChannel+0x1e4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d125      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d126      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800191c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b10      	cmp	r3, #16
 8001924:	d11a      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_ADC_ConfigChannel+0x1e8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_ADC_ConfigChannel+0x1ec>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	0c9a      	lsrs	r2, r3, #18
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800193c:	e002      	b.n	8001944 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3b01      	subs	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f9      	bne.n	800193e <HAL_ADC_ConfigChannel+0x1b2>
 800194a:	e007      	b.n	800195c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	f043 0220 	orr.w	r2, r3, #32
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40012400 	.word	0x40012400
 8001974:	20000000 	.word	0x20000000
 8001978:	431bde83 	.word	0x431bde83

0800197c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d12e      	bne.n	80019f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019a6:	f7ff fe0f 	bl	80015c8 <HAL_GetTick>
 80019aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019ac:	e01b      	b.n	80019e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019ae:	f7ff fe0b 	bl	80015c8 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d914      	bls.n	80019e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10d      	bne.n	80019e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	f043 0210 	orr.w	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e007      	b.n	80019f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d0dc      	beq.n	80019ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff90 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff49 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff5e 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff90 	bl	8001ab8 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5f 	bl	8001a64 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffb0 	bl	8001b1c <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	; 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e169      	b.n	8001eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8158 	bne.w	8001eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a9a      	ldr	r2, [pc, #616]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c04:	4a98      	ldr	r2, [pc, #608]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d875      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a98      	ldr	r2, [pc, #608]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d058      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c10:	4a96      	ldr	r2, [pc, #600]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d86f      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c16:	4a96      	ldr	r2, [pc, #600]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d052      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a94      	ldr	r2, [pc, #592]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d869      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c22:	4a94      	ldr	r2, [pc, #592]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c28:	4a92      	ldr	r2, [pc, #584]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d863      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d046      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d85d      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_GPIO_Init+0xcc>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d859      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <HAL_GPIO_Init+0x80>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001cf1 	.word	0x08001cf1
 8001c58:	08001cf7 	.word	0x08001cf7
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <HAL_GPIO_Init+0x2b4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e029      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e024      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01f      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e01a      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e013      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e009      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          break;
 8001cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d801      	bhi.n	8001d02 <HAL_GPIO_Init+0x13a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_Init+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2bff      	cmp	r3, #255	; 0xff
 8001d0c:	d802      	bhi.n	8001d14 <HAL_GPIO_Init+0x14c>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x152>
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	3b08      	subs	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	210f      	movs	r1, #15
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80b1 	beq.w	8001eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d60:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a40      	ldr	r2, [pc, #256]	; (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_Init+0x1ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_Init+0x1e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3e      	ldr	r2, [pc, #248]	; (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x1e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3d      	ldr	r2, [pc, #244]	; (8001e94 <HAL_GPIO_Init+0x2cc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e006      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc6:	492f      	ldr	r1, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	492c      	ldr	r1, [pc, #176]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4928      	ldr	r1, [pc, #160]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	4922      	ldr	r1, [pc, #136]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	491e      	ldr	r1, [pc, #120]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4918      	ldr	r1, [pc, #96]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4914      	ldr	r1, [pc, #80]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d021      	beq.n	8001e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	490e      	ldr	r1, [pc, #56]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e021      	b.n	8001eaa <HAL_GPIO_Init+0x2e2>
 8001e66:	bf00      	nop
 8001e68:	10320000 	.word	0x10320000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10220000 	.word	0x10220000
 8001e74:	10210000 	.word	0x10210000
 8001e78:	10120000 	.word	0x10120000
 8001e7c:	10110000 	.word	0x10110000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400
 8001e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4909      	ldr	r1, [pc, #36]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f ae8e 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	372c      	adds	r7, #44	; 0x2c
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e272      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8087 	beq.w	8001ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef0:	4b92      	ldr	r3, [pc, #584]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d00c      	beq.n	8001f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001efc:	4b8f      	ldr	r3, [pc, #572]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d112      	bne.n	8001f2e <HAL_RCC_OscConfig+0x5e>
 8001f08:	4b8c      	ldr	r3, [pc, #560]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d10b      	bne.n	8001f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d06c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x12c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d168      	bne.n	8001ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e24c      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x76>
 8001f38:	4b80      	ldr	r3, [pc, #512]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a7f      	ldr	r2, [pc, #508]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e02e      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b7b      	ldr	r3, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7a      	ldr	r2, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b78      	ldr	r3, [pc, #480]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a77      	ldr	r2, [pc, #476]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0xbc>
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a71      	ldr	r2, [pc, #452]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b6f      	ldr	r3, [pc, #444]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6e      	ldr	r2, [pc, #440]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	4b6b      	ldr	r3, [pc, #428]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6a      	ldr	r2, [pc, #424]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a67      	ldr	r2, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fb0c 	bl	80015c8 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fb08 	bl	80015c8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e200      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xe4>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff faf8 	bl	80015c8 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff faf4 	bl	80015c8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1ec      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x10c>
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d063      	beq.n	80020d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200a:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b08      	cmp	r3, #8
 8002020:	d11c      	bne.n	800205c <HAL_RCC_OscConfig+0x18c>
 8002022:	4b46      	ldr	r3, [pc, #280]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x176>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e1c0      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4939      	ldr	r1, [pc, #228]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b36      	ldr	r3, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x270>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff faad 	bl	80015c8 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff faa9 	bl	80015c8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1a1      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_RCC_OscConfig+0x270>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fa8c 	bl	80015c8 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b4:	f7ff fa88 	bl	80015c8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e180      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d03a      	beq.n	8002154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d019      	beq.n	800211a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_RCC_OscConfig+0x274>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fa6c 	bl	80015c8 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff fa68 	bl	80015c8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e160      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_OscConfig+0x26c>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002112:	2001      	movs	r0, #1
 8002114:	f000 face 	bl	80026b4 <RCC_Delay>
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_OscConfig+0x274>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff fa52 	bl	80015c8 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002126:	e00f      	b.n	8002148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002128:	f7ff fa4e 	bl	80015c8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d908      	bls.n	8002148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e146      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	42420000 	.word	0x42420000
 8002144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e9      	bne.n	8002128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a6 	beq.w	80022ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b8b      	ldr	r3, [pc, #556]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b88      	ldr	r3, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a87      	ldr	r2, [pc, #540]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b85      	ldr	r3, [pc, #532]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218e:	4b82      	ldr	r3, [pc, #520]	; (8002398 <HAL_RCC_OscConfig+0x4c8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d118      	bne.n	80021cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219a:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x4c8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x4c8>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a6:	f7ff fa0f 	bl	80015c8 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7ff fa0b 	bl	80015c8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b64      	cmp	r3, #100	; 0x64
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e103      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b75      	ldr	r3, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x4c8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x312>
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6213      	str	r3, [r2, #32]
 80021e0:	e02d      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x334>
 80021ea:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a69      	ldr	r2, [pc, #420]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a66      	ldr	r2, [pc, #408]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	e01c      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0x356>
 800220c:	4b61      	ldr	r3, [pc, #388]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4a60      	ldr	r2, [pc, #384]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6213      	str	r3, [r2, #32]
 8002218:	4b5e      	ldr	r3, [pc, #376]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a5d      	ldr	r2, [pc, #372]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0x36e>
 8002226:	4b5b      	ldr	r3, [pc, #364]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a5a      	ldr	r2, [pc, #360]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	4b58      	ldr	r3, [pc, #352]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d015      	beq.n	8002272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7ff f9bf 	bl	80015c8 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7ff f9bb 	bl	80015c8 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0b1      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	4b4b      	ldr	r3, [pc, #300]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ee      	beq.n	800224e <HAL_RCC_OscConfig+0x37e>
 8002270:	e014      	b.n	800229c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7ff f9a9 	bl	80015c8 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff f9a5 	bl	80015c8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e09b      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	4b40      	ldr	r3, [pc, #256]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ee      	bne.n	800227a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4a3b      	ldr	r2, [pc, #236]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8087 	beq.w	80023c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b8:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d061      	beq.n	8002388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d146      	bne.n	800235a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b33      	ldr	r3, [pc, #204]	; (800239c <HAL_RCC_OscConfig+0x4cc>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff f979 	bl	80015c8 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7ff f975 	bl	80015c8 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e06d      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d108      	bne.n	8002314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	4921      	ldr	r1, [pc, #132]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a19      	ldr	r1, [r3, #32]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	430b      	orrs	r3, r1
 8002326:	491b      	ldr	r1, [pc, #108]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x4cc>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7ff f949 	bl	80015c8 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7ff f945 	bl	80015c8 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e03d      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x46a>
 8002358:	e035      	b.n	80023c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_RCC_OscConfig+0x4cc>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff f932 	bl	80015c8 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff f92e 	bl	80015c8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e026      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x498>
 8002386:	e01e      	b.n	80023c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e019      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
 8002394:	40021000 	.word	0x40021000
 8002398:	40007000 	.word	0x40007000
 800239c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x500>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0d0      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d910      	bls.n	8002418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	4965      	ldr	r1, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800243a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d040      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d115      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e073      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06b      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4936      	ldr	r1, [pc, #216]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c4:	f7ff f880 	bl	80015c8 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7ff f87c 	bl	80015c8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e053      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d210      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0207 	bic.w	r2, r3, #7
 800250a:	4922      	ldr	r1, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f821 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	490a      	ldr	r1, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1cc>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe ffde 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40022000 	.word	0x40022000
 8002598:	40021000 	.word	0x40021000
 800259c:	080046f0 	.word	0x080046f0
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_GetSysClockFreq+0x94>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d002      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x30>
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x36>
 80025d6:	e027      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_GetSysClockFreq+0x98>)
 80025da:	613b      	str	r3, [r7, #16]
      break;
 80025dc:	e027      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	0c9b      	lsrs	r3, r3, #18
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d010      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_RCC_GetSysClockFreq+0x94>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0c5b      	lsrs	r3, r3, #17
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_RCC_GetSysClockFreq+0x98>)
 800260a:	fb03 f202 	mul.w	r2, r3, r2
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e004      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <HAL_RCC_GetSysClockFreq+0xa4>)
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	613b      	str	r3, [r7, #16]
      break;
 8002626:	e002      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetSysClockFreq+0x98>)
 800262a:	613b      	str	r3, [r7, #16]
      break;
 800262c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262e:	693b      	ldr	r3, [r7, #16]
}
 8002630:	4618      	mov	r0, r3
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	007a1200 	.word	0x007a1200
 8002644:	08004708 	.word	0x08004708
 8002648:	08004718 	.word	0x08004718
 800264c:	003d0900 	.word	0x003d0900

08002650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b02      	ldr	r3, [pc, #8]	; (8002660 <HAL_RCC_GetHCLKFreq+0x10>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	20000000 	.word	0x20000000

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002668:	f7ff fff2 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	08004700 	.word	0x08004700

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002690:	f7ff ffde 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	0adb      	lsrs	r3, r3, #11
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4903      	ldr	r1, [pc, #12]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08004700 	.word	0x08004700

080026b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <RCC_Delay+0x34>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <RCC_Delay+0x38>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0a5b      	lsrs	r3, r3, #9
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026d0:	bf00      	nop
  }
  while (Delay --);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1e5a      	subs	r2, r3, #1
 80026d6:	60fa      	str	r2, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f9      	bne.n	80026d0 <RCC_Delay+0x1c>
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	20000000 	.word	0x20000000
 80026ec:	10624dd3 	.word	0x10624dd3

080026f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d07d      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800270c:	2300      	movs	r3, #0
 800270e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002710:	4b4f      	ldr	r3, [pc, #316]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	61d3      	str	r3, [r2, #28]
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002734:	2301      	movs	r3, #1
 8002736:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d118      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002744:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a42      	ldr	r2, [pc, #264]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002750:	f7fe ff3a 	bl	80015c8 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	e008      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7fe ff36 	bl	80015c8 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e06d      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d02e      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d027      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800279e:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027a4:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027aa:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fe ff05 	bl	80015c8 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7fe ff01 	bl	80015c8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e036      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ee      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4917      	ldr	r1, [pc, #92]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002806:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	490b      	ldr	r1, [pc, #44]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4904      	ldr	r1, [pc, #16]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	42420440 	.word	0x42420440

0800285c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e041      	b.n	80028f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fd4c 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f000 fab2 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e041      	b.n	8002990 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d106      	bne.n	8002926 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f839 	bl	8002998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f000 fa63 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start+0x24>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e022      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d109      	bne.n	80029ea <HAL_TIM_PWM_Start+0x3e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e015      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d109      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x58>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e008      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e05e      	b.n	8002adc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a2c:	e013      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x92>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a3c:	e00b      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0xa2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	e003      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	6839      	ldr	r1, [r7, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fc50 	bl	8003304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_TIM_PWM_Start+0x138>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_TIM_PWM_Start+0x138>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00e      	beq.n	8002aa6 <HAL_TIM_PWM_Start+0xfa>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a90:	d009      	beq.n	8002aa6 <HAL_TIM_PWM_Start+0xfa>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <HAL_TIM_PWM_Start+0x13c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_TIM_PWM_Start+0xfa>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a12      	ldr	r2, [pc, #72]	; (8002aec <HAL_TIM_PWM_Start+0x140>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d111      	bne.n	8002aca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d010      	beq.n	8002ada <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac8:	e007      	b.n	8002ada <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40000800 	.word	0x40000800

08002af0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0ae      	b.n	8002c6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0c      	cmp	r3, #12
 8002b1a:	f200 809f 	bhi.w	8002c5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b1e:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b59 	.word	0x08002b59
 8002b28:	08002c5d 	.word	0x08002c5d
 8002b2c:	08002c5d 	.word	0x08002c5d
 8002b30:	08002c5d 	.word	0x08002c5d
 8002b34:	08002b99 	.word	0x08002b99
 8002b38:	08002c5d 	.word	0x08002c5d
 8002b3c:	08002c5d 	.word	0x08002c5d
 8002b40:	08002c5d 	.word	0x08002c5d
 8002b44:	08002bdb 	.word	0x08002bdb
 8002b48:	08002c5d 	.word	0x08002c5d
 8002b4c:	08002c5d 	.word	0x08002c5d
 8002b50:	08002c5d 	.word	0x08002c5d
 8002b54:	08002c1b 	.word	0x08002c1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f9b2 	bl	8002ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0208 	orr.w	r2, r2, #8
 8002b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0204 	bic.w	r2, r2, #4
 8002b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6999      	ldr	r1, [r3, #24]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	619a      	str	r2, [r3, #24]
      break;
 8002b96:	e064      	b.n	8002c62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f9f8 	bl	8002f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6999      	ldr	r1, [r3, #24]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	021a      	lsls	r2, r3, #8
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	619a      	str	r2, [r3, #24]
      break;
 8002bd8:	e043      	b.n	8002c62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fa41 	bl	8003068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0208 	orr.w	r2, r2, #8
 8002bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0204 	bic.w	r2, r2, #4
 8002c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69d9      	ldr	r1, [r3, #28]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	61da      	str	r2, [r3, #28]
      break;
 8002c18:	e023      	b.n	8002c62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fa8b 	bl	800313c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69d9      	ldr	r1, [r3, #28]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	021a      	lsls	r2, r3, #8
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	61da      	str	r2, [r3, #28]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_TIM_ConfigClockSource+0x1c>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e0b4      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x186>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc8:	d03e      	beq.n	8002d48 <HAL_TIM_ConfigClockSource+0xd4>
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cce:	f200 8087 	bhi.w	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	f000 8086 	beq.w	8002de6 <HAL_TIM_ConfigClockSource+0x172>
 8002cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cde:	d87f      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b70      	cmp	r3, #112	; 0x70
 8002ce2:	d01a      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0xa6>
 8002ce4:	2b70      	cmp	r3, #112	; 0x70
 8002ce6:	d87b      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b60      	cmp	r3, #96	; 0x60
 8002cea:	d050      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x11a>
 8002cec:	2b60      	cmp	r3, #96	; 0x60
 8002cee:	d877      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf0:	2b50      	cmp	r3, #80	; 0x50
 8002cf2:	d03c      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0xfa>
 8002cf4:	2b50      	cmp	r3, #80	; 0x50
 8002cf6:	d873      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d058      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x13a>
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d86f      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002d00:	2b30      	cmp	r3, #48	; 0x30
 8002d02:	d064      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x15a>
 8002d04:	2b30      	cmp	r3, #48	; 0x30
 8002d06:	d86b      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d060      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x15a>
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d867      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d05c      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x15a>
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d05a      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x15a>
 8002d18:	e062      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d2a:	f000 facc 	bl	80032c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	609a      	str	r2, [r3, #8]
      break;
 8002d46:	e04f      	b.n	8002de8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d58:	f000 fab5 	bl	80032c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d6a:	609a      	str	r2, [r3, #8]
      break;
 8002d6c:	e03c      	b.n	8002de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f000 fa2c 	bl	80031d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2150      	movs	r1, #80	; 0x50
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fa83 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002d8c:	e02c      	b.n	8002de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f000 fa4a 	bl	8003234 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2160      	movs	r1, #96	; 0x60
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fa73 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002dac:	e01c      	b.n	8002de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f000 fa0c 	bl	80031d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2140      	movs	r1, #64	; 0x40
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fa63 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002dcc:	e00c      	b.n	8002de8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f000 fa5a 	bl	8003292 <TIM_ITRx_SetConfig>
      break;
 8002dde:	e003      	b.n	8002de8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      break;
 8002de4:	e000      	b.n	8002de8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002de6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0x30>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <TIM_Base_SetConfig+0xc0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d108      	bne.n	8002e46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d007      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <TIM_Base_SetConfig+0xbc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_Base_SetConfig+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <TIM_Base_SetConfig+0xc0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d108      	bne.n	8002e78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <TIM_Base_SetConfig+0xb8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d103      	bne.n	8002eac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	615a      	str	r2, [r3, #20]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800

08002ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 0201 	bic.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f023 0302 	bic.w	r3, r3, #2
 8002f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	; (8002f90 <TIM_OC1_SetConfig+0xc8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d10c      	bne.n	8002f3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0308 	bic.w	r3, r3, #8
 8002f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <TIM_OC1_SetConfig+0xc8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d111      	bne.n	8002f6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	621a      	str	r2, [r3, #32]
}
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40012c00 	.word	0x40012c00

08002f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f023 0210 	bic.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0320 	bic.w	r3, r3, #32
 8002fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <TIM_OC2_SetConfig+0xd0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10d      	bne.n	8003010 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a14      	ldr	r2, [pc, #80]	; (8003064 <TIM_OC2_SetConfig+0xd0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d113      	bne.n	8003040 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800301e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	621a      	str	r2, [r3, #32]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	40012c00 	.word	0x40012c00

08003068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <TIM_OC3_SetConfig+0xd0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10d      	bne.n	80030e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <TIM_OC3_SetConfig+0xd0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d113      	bne.n	8003112 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	621a      	str	r2, [r3, #32]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40012c00 	.word	0x40012c00

0800313c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	031b      	lsls	r3, r3, #12
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <TIM_OC4_SetConfig+0x98>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d109      	bne.n	80031b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40012c00 	.word	0x40012c00

080031d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 030a 	bic.w	r3, r3, #10
 8003214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f023 0210 	bic.w	r2, r3, #16
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800325e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	031b      	lsls	r3, r3, #12
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003270:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	621a      	str	r2, [r3, #32]
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f043 0307 	orr.w	r3, r3, #7
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b087      	sub	sp, #28
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	021a      	lsls	r2, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	609a      	str	r2, [r3, #8]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2201      	movs	r2, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1a      	ldr	r2, [r3, #32]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	43db      	mvns	r3, r3
 8003326:	401a      	ands	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e046      	b.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a16      	ldr	r2, [pc, #88]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d009      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a10      	ldr	r2, [pc, #64]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10c      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800

08003408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003420:	2302      	movs	r3, #2
 8003422:	e03d      	b.n	80034a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e042      	b.n	8003542 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fd ffa1 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2224      	movs	r2, #36	; 0x24
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f91c 	bl	800372c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003502:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003512:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003522:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b08a      	sub	sp, #40	; 0x28
 800354e:	af02      	add	r7, sp, #8
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	d16d      	bne.n	8003646 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_UART_Transmit+0x2c>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e066      	b.n	8003648 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2221      	movs	r2, #33	; 0x21
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003588:	f7fe f81e 	bl	80015c8 <HAL_GetTick>
 800358c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a2:	d108      	bne.n	80035b6 <HAL_UART_Transmit+0x6c>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	e003      	b.n	80035be <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035be:	e02a      	b.n	8003616 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f840 	bl	8003650 <UART_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e036      	b.n	8003648 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	3302      	adds	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e007      	b.n	8003608 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1cf      	bne.n	80035c0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2200      	movs	r2, #0
 8003628:	2140      	movs	r1, #64	; 0x40
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f810 	bl	8003650 <UART_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e006      	b.n	8003648 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b090      	sub	sp, #64	; 0x40
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003660:	e050      	b.n	8003704 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d04c      	beq.n	8003704 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <UART_WaitOnFlagUntilTimeout+0x30>
 8003670:	f7fd ffaa 	bl	80015c8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800367c:	429a      	cmp	r2, r3
 800367e:	d241      	bcs.n	8003704 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a0:	637a      	str	r2, [r7, #52]	; 0x34
 80036a2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e5      	bne.n	8003680 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3314      	adds	r3, #20
 80036ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	613b      	str	r3, [r7, #16]
   return(result);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3314      	adds	r3, #20
 80036d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036d4:	623a      	str	r2, [r7, #32]
 80036d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	69f9      	ldr	r1, [r7, #28]
 80036da:	6a3a      	ldr	r2, [r7, #32]
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e00f      	b.n	8003724 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4013      	ands	r3, r2
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	429a      	cmp	r2, r3
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	429a      	cmp	r2, r3
 8003720:	d09f      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3740      	adds	r7, #64	; 0x40
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003766:	f023 030c 	bic.w	r3, r3, #12
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	430b      	orrs	r3, r1
 8003772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2c      	ldr	r2, [pc, #176]	; (8003840 <UART_SetConfig+0x114>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003794:	f7fe ff7a 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	e002      	b.n	80037a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800379c:	f7fe ff62 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 80037a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	009a      	lsls	r2, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	4a22      	ldr	r2, [pc, #136]	; (8003844 <UART_SetConfig+0x118>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	0119      	lsls	r1, r3, #4
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009a      	lsls	r2, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <UART_SetConfig+0x118>)
 80037da:	fba3 0302 	umull	r0, r3, r3, r2
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2064      	movs	r0, #100	; 0x64
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	3332      	adds	r3, #50	; 0x32
 80037ec:	4a15      	ldr	r2, [pc, #84]	; (8003844 <UART_SetConfig+0x118>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f8:	4419      	add	r1, r3
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009a      	lsls	r2, r3, #2
 8003804:	441a      	add	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <UART_SetConfig+0x118>)
 8003812:	fba3 0302 	umull	r0, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2064      	movs	r0, #100	; 0x64
 800381a:	fb00 f303 	mul.w	r3, r0, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	3332      	adds	r3, #50	; 0x32
 8003824:	4a07      	ldr	r2, [pc, #28]	; (8003844 <UART_SetConfig+0x118>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	440a      	add	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40013800 	.word	0x40013800
 8003844:	51eb851f 	.word	0x51eb851f

08003848 <std>:
 8003848:	2300      	movs	r3, #0
 800384a:	b510      	push	{r4, lr}
 800384c:	4604      	mov	r4, r0
 800384e:	e9c0 3300 	strd	r3, r3, [r0]
 8003852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003856:	6083      	str	r3, [r0, #8]
 8003858:	8181      	strh	r1, [r0, #12]
 800385a:	6643      	str	r3, [r0, #100]	; 0x64
 800385c:	81c2      	strh	r2, [r0, #14]
 800385e:	6183      	str	r3, [r0, #24]
 8003860:	4619      	mov	r1, r3
 8003862:	2208      	movs	r2, #8
 8003864:	305c      	adds	r0, #92	; 0x5c
 8003866:	f000 f906 	bl	8003a76 <memset>
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <std+0x58>)
 800386c:	6224      	str	r4, [r4, #32]
 800386e:	6263      	str	r3, [r4, #36]	; 0x24
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <std+0x5c>)
 8003872:	62a3      	str	r3, [r4, #40]	; 0x28
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <std+0x60>)
 8003876:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <std+0x64>)
 800387a:	6323      	str	r3, [r4, #48]	; 0x30
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <std+0x68>)
 800387e:	429c      	cmp	r4, r3
 8003880:	d006      	beq.n	8003890 <std+0x48>
 8003882:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003886:	4294      	cmp	r4, r2
 8003888:	d002      	beq.n	8003890 <std+0x48>
 800388a:	33d0      	adds	r3, #208	; 0xd0
 800388c:	429c      	cmp	r4, r3
 800388e:	d105      	bne.n	800389c <std+0x54>
 8003890:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003898:	f000 b966 	b.w	8003b68 <__retarget_lock_init_recursive>
 800389c:	bd10      	pop	{r4, pc}
 800389e:	bf00      	nop
 80038a0:	080039f1 	.word	0x080039f1
 80038a4:	08003a13 	.word	0x08003a13
 80038a8:	08003a4b 	.word	0x08003a4b
 80038ac:	08003a6f 	.word	0x08003a6f
 80038b0:	2000014c 	.word	0x2000014c

080038b4 <stdio_exit_handler>:
 80038b4:	4a02      	ldr	r2, [pc, #8]	; (80038c0 <stdio_exit_handler+0xc>)
 80038b6:	4903      	ldr	r1, [pc, #12]	; (80038c4 <stdio_exit_handler+0x10>)
 80038b8:	4803      	ldr	r0, [pc, #12]	; (80038c8 <stdio_exit_handler+0x14>)
 80038ba:	f000 b869 	b.w	8003990 <_fwalk_sglue>
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	08004409 	.word	0x08004409
 80038c8:	20000018 	.word	0x20000018

080038cc <cleanup_stdio>:
 80038cc:	6841      	ldr	r1, [r0, #4]
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <cleanup_stdio+0x34>)
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4299      	cmp	r1, r3
 80038d4:	4604      	mov	r4, r0
 80038d6:	d001      	beq.n	80038dc <cleanup_stdio+0x10>
 80038d8:	f000 fd96 	bl	8004408 <_fflush_r>
 80038dc:	68a1      	ldr	r1, [r4, #8]
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <cleanup_stdio+0x38>)
 80038e0:	4299      	cmp	r1, r3
 80038e2:	d002      	beq.n	80038ea <cleanup_stdio+0x1e>
 80038e4:	4620      	mov	r0, r4
 80038e6:	f000 fd8f 	bl	8004408 <_fflush_r>
 80038ea:	68e1      	ldr	r1, [r4, #12]
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <cleanup_stdio+0x3c>)
 80038ee:	4299      	cmp	r1, r3
 80038f0:	d004      	beq.n	80038fc <cleanup_stdio+0x30>
 80038f2:	4620      	mov	r0, r4
 80038f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f8:	f000 bd86 	b.w	8004408 <_fflush_r>
 80038fc:	bd10      	pop	{r4, pc}
 80038fe:	bf00      	nop
 8003900:	2000014c 	.word	0x2000014c
 8003904:	200001b4 	.word	0x200001b4
 8003908:	2000021c 	.word	0x2000021c

0800390c <global_stdio_init.part.0>:
 800390c:	b510      	push	{r4, lr}
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <global_stdio_init.part.0+0x30>)
 8003910:	4c0b      	ldr	r4, [pc, #44]	; (8003940 <global_stdio_init.part.0+0x34>)
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <global_stdio_init.part.0+0x38>)
 8003914:	4620      	mov	r0, r4
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	2104      	movs	r1, #4
 800391a:	2200      	movs	r2, #0
 800391c:	f7ff ff94 	bl	8003848 <std>
 8003920:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003924:	2201      	movs	r2, #1
 8003926:	2109      	movs	r1, #9
 8003928:	f7ff ff8e 	bl	8003848 <std>
 800392c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003930:	2202      	movs	r2, #2
 8003932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003936:	2112      	movs	r1, #18
 8003938:	f7ff bf86 	b.w	8003848 <std>
 800393c:	20000284 	.word	0x20000284
 8003940:	2000014c 	.word	0x2000014c
 8003944:	080038b5 	.word	0x080038b5

08003948 <__sfp_lock_acquire>:
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <__sfp_lock_acquire+0x8>)
 800394a:	f000 b90e 	b.w	8003b6a <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	2000028d 	.word	0x2000028d

08003954 <__sfp_lock_release>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__sfp_lock_release+0x8>)
 8003956:	f000 b909 	b.w	8003b6c <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	2000028d 	.word	0x2000028d

08003960 <__sinit>:
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	f7ff fff0 	bl	8003948 <__sfp_lock_acquire>
 8003968:	6a23      	ldr	r3, [r4, #32]
 800396a:	b11b      	cbz	r3, 8003974 <__sinit+0x14>
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f7ff bff0 	b.w	8003954 <__sfp_lock_release>
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <__sinit+0x28>)
 8003976:	6223      	str	r3, [r4, #32]
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <__sinit+0x2c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f5      	bne.n	800396c <__sinit+0xc>
 8003980:	f7ff ffc4 	bl	800390c <global_stdio_init.part.0>
 8003984:	e7f2      	b.n	800396c <__sinit+0xc>
 8003986:	bf00      	nop
 8003988:	080038cd 	.word	0x080038cd
 800398c:	20000284 	.word	0x20000284

08003990 <_fwalk_sglue>:
 8003990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003994:	4607      	mov	r7, r0
 8003996:	4688      	mov	r8, r1
 8003998:	4614      	mov	r4, r2
 800399a:	2600      	movs	r6, #0
 800399c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a0:	f1b9 0901 	subs.w	r9, r9, #1
 80039a4:	d505      	bpl.n	80039b2 <_fwalk_sglue+0x22>
 80039a6:	6824      	ldr	r4, [r4, #0]
 80039a8:	2c00      	cmp	r4, #0
 80039aa:	d1f7      	bne.n	800399c <_fwalk_sglue+0xc>
 80039ac:	4630      	mov	r0, r6
 80039ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b2:	89ab      	ldrh	r3, [r5, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d907      	bls.n	80039c8 <_fwalk_sglue+0x38>
 80039b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039bc:	3301      	adds	r3, #1
 80039be:	d003      	beq.n	80039c8 <_fwalk_sglue+0x38>
 80039c0:	4629      	mov	r1, r5
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	4306      	orrs	r6, r0
 80039c8:	3568      	adds	r5, #104	; 0x68
 80039ca:	e7e9      	b.n	80039a0 <_fwalk_sglue+0x10>

080039cc <iprintf>:
 80039cc:	b40f      	push	{r0, r1, r2, r3}
 80039ce:	b507      	push	{r0, r1, r2, lr}
 80039d0:	4906      	ldr	r1, [pc, #24]	; (80039ec <iprintf+0x20>)
 80039d2:	ab04      	add	r3, sp, #16
 80039d4:	6808      	ldr	r0, [r1, #0]
 80039d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80039da:	6881      	ldr	r1, [r0, #8]
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	f000 f9e3 	bl	8003da8 <_vfiprintf_r>
 80039e2:	b003      	add	sp, #12
 80039e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e8:	b004      	add	sp, #16
 80039ea:	4770      	bx	lr
 80039ec:	20000064 	.word	0x20000064

080039f0 <__sread>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	460c      	mov	r4, r1
 80039f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f8:	f000 f868 	bl	8003acc <_read_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	bfab      	itete	ge
 8003a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a02:	89a3      	ldrhlt	r3, [r4, #12]
 8003a04:	181b      	addge	r3, r3, r0
 8003a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a0a:	bfac      	ite	ge
 8003a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a0e:	81a3      	strhlt	r3, [r4, #12]
 8003a10:	bd10      	pop	{r4, pc}

08003a12 <__swrite>:
 8003a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a16:	461f      	mov	r7, r3
 8003a18:	898b      	ldrh	r3, [r1, #12]
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	05db      	lsls	r3, r3, #23
 8003a1e:	460c      	mov	r4, r1
 8003a20:	4616      	mov	r6, r2
 8003a22:	d505      	bpl.n	8003a30 <__swrite+0x1e>
 8003a24:	2302      	movs	r3, #2
 8003a26:	2200      	movs	r2, #0
 8003a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a2c:	f000 f83c 	bl	8003aa8 <_lseek_r>
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	4632      	mov	r2, r6
 8003a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a46:	f000 b853 	b.w	8003af0 <_write_r>

08003a4a <__sseek>:
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a52:	f000 f829 	bl	8003aa8 <_lseek_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	bf15      	itete	ne
 8003a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a66:	81a3      	strheq	r3, [r4, #12]
 8003a68:	bf18      	it	ne
 8003a6a:	81a3      	strhne	r3, [r4, #12]
 8003a6c:	bd10      	pop	{r4, pc}

08003a6e <__sclose>:
 8003a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a72:	f000 b809 	b.w	8003a88 <_close_r>

08003a76 <memset>:
 8003a76:	4603      	mov	r3, r0
 8003a78:	4402      	add	r2, r0
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d100      	bne.n	8003a80 <memset+0xa>
 8003a7e:	4770      	bx	lr
 8003a80:	f803 1b01 	strb.w	r1, [r3], #1
 8003a84:	e7f9      	b.n	8003a7a <memset+0x4>
	...

08003a88 <_close_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4d05      	ldr	r5, [pc, #20]	; (8003aa4 <_close_r+0x1c>)
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	f7fd fb2c 	bl	80010f0 <_close>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_close_r+0x1a>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_close_r+0x1a>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	20000288 	.word	0x20000288

08003aa8 <_lseek_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4604      	mov	r4, r0
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4d05      	ldr	r5, [pc, #20]	; (8003ac8 <_lseek_r+0x20>)
 8003ab4:	602a      	str	r2, [r5, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f7fd fb3e 	bl	8001138 <_lseek>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_lseek_r+0x1e>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_lseek_r+0x1e>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	20000288 	.word	0x20000288

08003acc <_read_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4604      	mov	r4, r0
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4d05      	ldr	r5, [pc, #20]	; (8003aec <_read_r+0x20>)
 8003ad8:	602a      	str	r2, [r5, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7fd facf 	bl	800107e <_read>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d102      	bne.n	8003aea <_read_r+0x1e>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	b103      	cbz	r3, 8003aea <_read_r+0x1e>
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	20000288 	.word	0x20000288

08003af0 <_write_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4604      	mov	r4, r0
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	2200      	movs	r2, #0
 8003afa:	4d05      	ldr	r5, [pc, #20]	; (8003b10 <_write_r+0x20>)
 8003afc:	602a      	str	r2, [r5, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7fd fada 	bl	80010b8 <_write>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_write_r+0x1e>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_write_r+0x1e>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	20000288 	.word	0x20000288

08003b14 <__errno>:
 8003b14:	4b01      	ldr	r3, [pc, #4]	; (8003b1c <__errno+0x8>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000064 	.word	0x20000064

08003b20 <__libc_init_array>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	2600      	movs	r6, #0
 8003b24:	4d0c      	ldr	r5, [pc, #48]	; (8003b58 <__libc_init_array+0x38>)
 8003b26:	4c0d      	ldr	r4, [pc, #52]	; (8003b5c <__libc_init_array+0x3c>)
 8003b28:	1b64      	subs	r4, r4, r5
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	42a6      	cmp	r6, r4
 8003b2e:	d109      	bne.n	8003b44 <__libc_init_array+0x24>
 8003b30:	f000 fdca 	bl	80046c8 <_init>
 8003b34:	2600      	movs	r6, #0
 8003b36:	4d0a      	ldr	r5, [pc, #40]	; (8003b60 <__libc_init_array+0x40>)
 8003b38:	4c0a      	ldr	r4, [pc, #40]	; (8003b64 <__libc_init_array+0x44>)
 8003b3a:	1b64      	subs	r4, r4, r5
 8003b3c:	10a4      	asrs	r4, r4, #2
 8003b3e:	42a6      	cmp	r6, r4
 8003b40:	d105      	bne.n	8003b4e <__libc_init_array+0x2e>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b48:	4798      	blx	r3
 8003b4a:	3601      	adds	r6, #1
 8003b4c:	e7ee      	b.n	8003b2c <__libc_init_array+0xc>
 8003b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b52:	4798      	blx	r3
 8003b54:	3601      	adds	r6, #1
 8003b56:	e7f2      	b.n	8003b3e <__libc_init_array+0x1e>
 8003b58:	08004750 	.word	0x08004750
 8003b5c:	08004750 	.word	0x08004750
 8003b60:	08004750 	.word	0x08004750
 8003b64:	08004754 	.word	0x08004754

08003b68 <__retarget_lock_init_recursive>:
 8003b68:	4770      	bx	lr

08003b6a <__retarget_lock_acquire_recursive>:
 8003b6a:	4770      	bx	lr

08003b6c <__retarget_lock_release_recursive>:
 8003b6c:	4770      	bx	lr
	...

08003b70 <_free_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4605      	mov	r5, r0
 8003b74:	2900      	cmp	r1, #0
 8003b76:	d040      	beq.n	8003bfa <_free_r+0x8a>
 8003b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b7c:	1f0c      	subs	r4, r1, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bfb8      	it	lt
 8003b82:	18e4      	addlt	r4, r4, r3
 8003b84:	f000 f8dc 	bl	8003d40 <__malloc_lock>
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <_free_r+0x8c>)
 8003b8a:	6813      	ldr	r3, [r2, #0]
 8003b8c:	b933      	cbnz	r3, 8003b9c <_free_r+0x2c>
 8003b8e:	6063      	str	r3, [r4, #4]
 8003b90:	6014      	str	r4, [r2, #0]
 8003b92:	4628      	mov	r0, r5
 8003b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b98:	f000 b8d8 	b.w	8003d4c <__malloc_unlock>
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	d908      	bls.n	8003bb2 <_free_r+0x42>
 8003ba0:	6820      	ldr	r0, [r4, #0]
 8003ba2:	1821      	adds	r1, r4, r0
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	bf01      	itttt	eq
 8003ba8:	6819      	ldreq	r1, [r3, #0]
 8003baa:	685b      	ldreq	r3, [r3, #4]
 8003bac:	1809      	addeq	r1, r1, r0
 8003bae:	6021      	streq	r1, [r4, #0]
 8003bb0:	e7ed      	b.n	8003b8e <_free_r+0x1e>
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	b10b      	cbz	r3, 8003bbc <_free_r+0x4c>
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	d9fa      	bls.n	8003bb2 <_free_r+0x42>
 8003bbc:	6811      	ldr	r1, [r2, #0]
 8003bbe:	1850      	adds	r0, r2, r1
 8003bc0:	42a0      	cmp	r0, r4
 8003bc2:	d10b      	bne.n	8003bdc <_free_r+0x6c>
 8003bc4:	6820      	ldr	r0, [r4, #0]
 8003bc6:	4401      	add	r1, r0
 8003bc8:	1850      	adds	r0, r2, r1
 8003bca:	4283      	cmp	r3, r0
 8003bcc:	6011      	str	r1, [r2, #0]
 8003bce:	d1e0      	bne.n	8003b92 <_free_r+0x22>
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4408      	add	r0, r1
 8003bd6:	6010      	str	r0, [r2, #0]
 8003bd8:	6053      	str	r3, [r2, #4]
 8003bda:	e7da      	b.n	8003b92 <_free_r+0x22>
 8003bdc:	d902      	bls.n	8003be4 <_free_r+0x74>
 8003bde:	230c      	movs	r3, #12
 8003be0:	602b      	str	r3, [r5, #0]
 8003be2:	e7d6      	b.n	8003b92 <_free_r+0x22>
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	1821      	adds	r1, r4, r0
 8003be8:	428b      	cmp	r3, r1
 8003bea:	bf01      	itttt	eq
 8003bec:	6819      	ldreq	r1, [r3, #0]
 8003bee:	685b      	ldreq	r3, [r3, #4]
 8003bf0:	1809      	addeq	r1, r1, r0
 8003bf2:	6021      	streq	r1, [r4, #0]
 8003bf4:	6063      	str	r3, [r4, #4]
 8003bf6:	6054      	str	r4, [r2, #4]
 8003bf8:	e7cb      	b.n	8003b92 <_free_r+0x22>
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	20000290 	.word	0x20000290

08003c00 <sbrk_aligned>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	4e0e      	ldr	r6, [pc, #56]	; (8003c3c <sbrk_aligned+0x3c>)
 8003c04:	460c      	mov	r4, r1
 8003c06:	6831      	ldr	r1, [r6, #0]
 8003c08:	4605      	mov	r5, r0
 8003c0a:	b911      	cbnz	r1, 8003c12 <sbrk_aligned+0x12>
 8003c0c:	f000 fcba 	bl	8004584 <_sbrk_r>
 8003c10:	6030      	str	r0, [r6, #0]
 8003c12:	4621      	mov	r1, r4
 8003c14:	4628      	mov	r0, r5
 8003c16:	f000 fcb5 	bl	8004584 <_sbrk_r>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	d00a      	beq.n	8003c34 <sbrk_aligned+0x34>
 8003c1e:	1cc4      	adds	r4, r0, #3
 8003c20:	f024 0403 	bic.w	r4, r4, #3
 8003c24:	42a0      	cmp	r0, r4
 8003c26:	d007      	beq.n	8003c38 <sbrk_aligned+0x38>
 8003c28:	1a21      	subs	r1, r4, r0
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f000 fcaa 	bl	8004584 <_sbrk_r>
 8003c30:	3001      	adds	r0, #1
 8003c32:	d101      	bne.n	8003c38 <sbrk_aligned+0x38>
 8003c34:	f04f 34ff 	mov.w	r4, #4294967295
 8003c38:	4620      	mov	r0, r4
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	20000294 	.word	0x20000294

08003c40 <_malloc_r>:
 8003c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c44:	1ccd      	adds	r5, r1, #3
 8003c46:	f025 0503 	bic.w	r5, r5, #3
 8003c4a:	3508      	adds	r5, #8
 8003c4c:	2d0c      	cmp	r5, #12
 8003c4e:	bf38      	it	cc
 8003c50:	250c      	movcc	r5, #12
 8003c52:	2d00      	cmp	r5, #0
 8003c54:	4607      	mov	r7, r0
 8003c56:	db01      	blt.n	8003c5c <_malloc_r+0x1c>
 8003c58:	42a9      	cmp	r1, r5
 8003c5a:	d905      	bls.n	8003c68 <_malloc_r+0x28>
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	2600      	movs	r6, #0
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	4630      	mov	r0, r6
 8003c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d3c <_malloc_r+0xfc>
 8003c6c:	f000 f868 	bl	8003d40 <__malloc_lock>
 8003c70:	f8d8 3000 	ldr.w	r3, [r8]
 8003c74:	461c      	mov	r4, r3
 8003c76:	bb5c      	cbnz	r4, 8003cd0 <_malloc_r+0x90>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	f7ff ffc0 	bl	8003c00 <sbrk_aligned>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	4604      	mov	r4, r0
 8003c84:	d155      	bne.n	8003d32 <_malloc_r+0xf2>
 8003c86:	f8d8 4000 	ldr.w	r4, [r8]
 8003c8a:	4626      	mov	r6, r4
 8003c8c:	2e00      	cmp	r6, #0
 8003c8e:	d145      	bne.n	8003d1c <_malloc_r+0xdc>
 8003c90:	2c00      	cmp	r4, #0
 8003c92:	d048      	beq.n	8003d26 <_malloc_r+0xe6>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	4631      	mov	r1, r6
 8003c98:	4638      	mov	r0, r7
 8003c9a:	eb04 0903 	add.w	r9, r4, r3
 8003c9e:	f000 fc71 	bl	8004584 <_sbrk_r>
 8003ca2:	4581      	cmp	r9, r0
 8003ca4:	d13f      	bne.n	8003d26 <_malloc_r+0xe6>
 8003ca6:	6821      	ldr	r1, [r4, #0]
 8003ca8:	4638      	mov	r0, r7
 8003caa:	1a6d      	subs	r5, r5, r1
 8003cac:	4629      	mov	r1, r5
 8003cae:	f7ff ffa7 	bl	8003c00 <sbrk_aligned>
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d037      	beq.n	8003d26 <_malloc_r+0xe6>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	442b      	add	r3, r5
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d038      	beq.n	8003d36 <_malloc_r+0xf6>
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	42a2      	cmp	r2, r4
 8003cc8:	d12b      	bne.n	8003d22 <_malloc_r+0xe2>
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	e00f      	b.n	8003cf0 <_malloc_r+0xb0>
 8003cd0:	6822      	ldr	r2, [r4, #0]
 8003cd2:	1b52      	subs	r2, r2, r5
 8003cd4:	d41f      	bmi.n	8003d16 <_malloc_r+0xd6>
 8003cd6:	2a0b      	cmp	r2, #11
 8003cd8:	d917      	bls.n	8003d0a <_malloc_r+0xca>
 8003cda:	1961      	adds	r1, r4, r5
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	6025      	str	r5, [r4, #0]
 8003ce0:	bf18      	it	ne
 8003ce2:	6059      	strne	r1, [r3, #4]
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	bf08      	it	eq
 8003ce8:	f8c8 1000 	streq.w	r1, [r8]
 8003cec:	5162      	str	r2, [r4, r5]
 8003cee:	604b      	str	r3, [r1, #4]
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	f104 060b 	add.w	r6, r4, #11
 8003cf6:	f000 f829 	bl	8003d4c <__malloc_unlock>
 8003cfa:	f026 0607 	bic.w	r6, r6, #7
 8003cfe:	1d23      	adds	r3, r4, #4
 8003d00:	1af2      	subs	r2, r6, r3
 8003d02:	d0ae      	beq.n	8003c62 <_malloc_r+0x22>
 8003d04:	1b9b      	subs	r3, r3, r6
 8003d06:	50a3      	str	r3, [r4, r2]
 8003d08:	e7ab      	b.n	8003c62 <_malloc_r+0x22>
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	6862      	ldr	r2, [r4, #4]
 8003d0e:	d1dd      	bne.n	8003ccc <_malloc_r+0x8c>
 8003d10:	f8c8 2000 	str.w	r2, [r8]
 8003d14:	e7ec      	b.n	8003cf0 <_malloc_r+0xb0>
 8003d16:	4623      	mov	r3, r4
 8003d18:	6864      	ldr	r4, [r4, #4]
 8003d1a:	e7ac      	b.n	8003c76 <_malloc_r+0x36>
 8003d1c:	4634      	mov	r4, r6
 8003d1e:	6876      	ldr	r6, [r6, #4]
 8003d20:	e7b4      	b.n	8003c8c <_malloc_r+0x4c>
 8003d22:	4613      	mov	r3, r2
 8003d24:	e7cc      	b.n	8003cc0 <_malloc_r+0x80>
 8003d26:	230c      	movs	r3, #12
 8003d28:	4638      	mov	r0, r7
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	f000 f80e 	bl	8003d4c <__malloc_unlock>
 8003d30:	e797      	b.n	8003c62 <_malloc_r+0x22>
 8003d32:	6025      	str	r5, [r4, #0]
 8003d34:	e7dc      	b.n	8003cf0 <_malloc_r+0xb0>
 8003d36:	605b      	str	r3, [r3, #4]
 8003d38:	deff      	udf	#255	; 0xff
 8003d3a:	bf00      	nop
 8003d3c:	20000290 	.word	0x20000290

08003d40 <__malloc_lock>:
 8003d40:	4801      	ldr	r0, [pc, #4]	; (8003d48 <__malloc_lock+0x8>)
 8003d42:	f7ff bf12 	b.w	8003b6a <__retarget_lock_acquire_recursive>
 8003d46:	bf00      	nop
 8003d48:	2000028c 	.word	0x2000028c

08003d4c <__malloc_unlock>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	; (8003d54 <__malloc_unlock+0x8>)
 8003d4e:	f7ff bf0d 	b.w	8003b6c <__retarget_lock_release_recursive>
 8003d52:	bf00      	nop
 8003d54:	2000028c 	.word	0x2000028c

08003d58 <__sfputc_r>:
 8003d58:	6893      	ldr	r3, [r2, #8]
 8003d5a:	b410      	push	{r4}
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	6093      	str	r3, [r2, #8]
 8003d62:	da07      	bge.n	8003d74 <__sfputc_r+0x1c>
 8003d64:	6994      	ldr	r4, [r2, #24]
 8003d66:	42a3      	cmp	r3, r4
 8003d68:	db01      	blt.n	8003d6e <__sfputc_r+0x16>
 8003d6a:	290a      	cmp	r1, #10
 8003d6c:	d102      	bne.n	8003d74 <__sfputc_r+0x1c>
 8003d6e:	bc10      	pop	{r4}
 8003d70:	f000 bb72 	b.w	8004458 <__swbuf_r>
 8003d74:	6813      	ldr	r3, [r2, #0]
 8003d76:	1c58      	adds	r0, r3, #1
 8003d78:	6010      	str	r0, [r2, #0]
 8003d7a:	7019      	strb	r1, [r3, #0]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	bc10      	pop	{r4}
 8003d80:	4770      	bx	lr

08003d82 <__sfputs_r>:
 8003d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d84:	4606      	mov	r6, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	4614      	mov	r4, r2
 8003d8a:	18d5      	adds	r5, r2, r3
 8003d8c:	42ac      	cmp	r4, r5
 8003d8e:	d101      	bne.n	8003d94 <__sfputs_r+0x12>
 8003d90:	2000      	movs	r0, #0
 8003d92:	e007      	b.n	8003da4 <__sfputs_r+0x22>
 8003d94:	463a      	mov	r2, r7
 8003d96:	4630      	mov	r0, r6
 8003d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d9c:	f7ff ffdc 	bl	8003d58 <__sfputc_r>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d1f3      	bne.n	8003d8c <__sfputs_r+0xa>
 8003da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003da8 <_vfiprintf_r>:
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	460d      	mov	r5, r1
 8003dae:	4614      	mov	r4, r2
 8003db0:	4698      	mov	r8, r3
 8003db2:	4606      	mov	r6, r0
 8003db4:	b09d      	sub	sp, #116	; 0x74
 8003db6:	b118      	cbz	r0, 8003dc0 <_vfiprintf_r+0x18>
 8003db8:	6a03      	ldr	r3, [r0, #32]
 8003dba:	b90b      	cbnz	r3, 8003dc0 <_vfiprintf_r+0x18>
 8003dbc:	f7ff fdd0 	bl	8003960 <__sinit>
 8003dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dc2:	07d9      	lsls	r1, r3, #31
 8003dc4:	d405      	bmi.n	8003dd2 <_vfiprintf_r+0x2a>
 8003dc6:	89ab      	ldrh	r3, [r5, #12]
 8003dc8:	059a      	lsls	r2, r3, #22
 8003dca:	d402      	bmi.n	8003dd2 <_vfiprintf_r+0x2a>
 8003dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dce:	f7ff fecc 	bl	8003b6a <__retarget_lock_acquire_recursive>
 8003dd2:	89ab      	ldrh	r3, [r5, #12]
 8003dd4:	071b      	lsls	r3, r3, #28
 8003dd6:	d501      	bpl.n	8003ddc <_vfiprintf_r+0x34>
 8003dd8:	692b      	ldr	r3, [r5, #16]
 8003dda:	b99b      	cbnz	r3, 8003e04 <_vfiprintf_r+0x5c>
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4630      	mov	r0, r6
 8003de0:	f000 fb78 	bl	80044d4 <__swsetup_r>
 8003de4:	b170      	cbz	r0, 8003e04 <_vfiprintf_r+0x5c>
 8003de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003de8:	07dc      	lsls	r4, r3, #31
 8003dea:	d504      	bpl.n	8003df6 <_vfiprintf_r+0x4e>
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	b01d      	add	sp, #116	; 0x74
 8003df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df6:	89ab      	ldrh	r3, [r5, #12]
 8003df8:	0598      	lsls	r0, r3, #22
 8003dfa:	d4f7      	bmi.n	8003dec <_vfiprintf_r+0x44>
 8003dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dfe:	f7ff feb5 	bl	8003b6c <__retarget_lock_release_recursive>
 8003e02:	e7f3      	b.n	8003dec <_vfiprintf_r+0x44>
 8003e04:	2300      	movs	r3, #0
 8003e06:	9309      	str	r3, [sp, #36]	; 0x24
 8003e08:	2320      	movs	r3, #32
 8003e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e0e:	2330      	movs	r3, #48	; 0x30
 8003e10:	f04f 0901 	mov.w	r9, #1
 8003e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e18:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003fc8 <_vfiprintf_r+0x220>
 8003e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e20:	4623      	mov	r3, r4
 8003e22:	469a      	mov	sl, r3
 8003e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e28:	b10a      	cbz	r2, 8003e2e <_vfiprintf_r+0x86>
 8003e2a:	2a25      	cmp	r2, #37	; 0x25
 8003e2c:	d1f9      	bne.n	8003e22 <_vfiprintf_r+0x7a>
 8003e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003e32:	d00b      	beq.n	8003e4c <_vfiprintf_r+0xa4>
 8003e34:	465b      	mov	r3, fp
 8003e36:	4622      	mov	r2, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f7ff ffa1 	bl	8003d82 <__sfputs_r>
 8003e40:	3001      	adds	r0, #1
 8003e42:	f000 80a9 	beq.w	8003f98 <_vfiprintf_r+0x1f0>
 8003e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e48:	445a      	add	r2, fp
 8003e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80a1 	beq.w	8003f98 <_vfiprintf_r+0x1f0>
 8003e56:	2300      	movs	r3, #0
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e60:	f10a 0a01 	add.w	sl, sl, #1
 8003e64:	9304      	str	r3, [sp, #16]
 8003e66:	9307      	str	r3, [sp, #28]
 8003e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8003e6e:	4654      	mov	r4, sl
 8003e70:	2205      	movs	r2, #5
 8003e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e76:	4854      	ldr	r0, [pc, #336]	; (8003fc8 <_vfiprintf_r+0x220>)
 8003e78:	f000 fb94 	bl	80045a4 <memchr>
 8003e7c:	9a04      	ldr	r2, [sp, #16]
 8003e7e:	b9d8      	cbnz	r0, 8003eb8 <_vfiprintf_r+0x110>
 8003e80:	06d1      	lsls	r1, r2, #27
 8003e82:	bf44      	itt	mi
 8003e84:	2320      	movmi	r3, #32
 8003e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e8a:	0713      	lsls	r3, r2, #28
 8003e8c:	bf44      	itt	mi
 8003e8e:	232b      	movmi	r3, #43	; 0x2b
 8003e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e94:	f89a 3000 	ldrb.w	r3, [sl]
 8003e98:	2b2a      	cmp	r3, #42	; 0x2a
 8003e9a:	d015      	beq.n	8003ec8 <_vfiprintf_r+0x120>
 8003e9c:	4654      	mov	r4, sl
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f04f 0c0a 	mov.w	ip, #10
 8003ea4:	9a07      	ldr	r2, [sp, #28]
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eac:	3b30      	subs	r3, #48	; 0x30
 8003eae:	2b09      	cmp	r3, #9
 8003eb0:	d94d      	bls.n	8003f4e <_vfiprintf_r+0x1a6>
 8003eb2:	b1b0      	cbz	r0, 8003ee2 <_vfiprintf_r+0x13a>
 8003eb4:	9207      	str	r2, [sp, #28]
 8003eb6:	e014      	b.n	8003ee2 <_vfiprintf_r+0x13a>
 8003eb8:	eba0 0308 	sub.w	r3, r0, r8
 8003ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	46a2      	mov	sl, r4
 8003ec4:	9304      	str	r3, [sp, #16]
 8003ec6:	e7d2      	b.n	8003e6e <_vfiprintf_r+0xc6>
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	1d19      	adds	r1, r3, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	9103      	str	r1, [sp, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bfbb      	ittet	lt
 8003ed4:	425b      	neglt	r3, r3
 8003ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8003eda:	9307      	strge	r3, [sp, #28]
 8003edc:	9307      	strlt	r3, [sp, #28]
 8003ede:	bfb8      	it	lt
 8003ee0:	9204      	strlt	r2, [sp, #16]
 8003ee2:	7823      	ldrb	r3, [r4, #0]
 8003ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ee6:	d10c      	bne.n	8003f02 <_vfiprintf_r+0x15a>
 8003ee8:	7863      	ldrb	r3, [r4, #1]
 8003eea:	2b2a      	cmp	r3, #42	; 0x2a
 8003eec:	d134      	bne.n	8003f58 <_vfiprintf_r+0x1b0>
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	3402      	adds	r4, #2
 8003ef2:	1d1a      	adds	r2, r3, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	9203      	str	r2, [sp, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bfb8      	it	lt
 8003efc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f00:	9305      	str	r3, [sp, #20]
 8003f02:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fcc <_vfiprintf_r+0x224>
 8003f06:	2203      	movs	r2, #3
 8003f08:	4650      	mov	r0, sl
 8003f0a:	7821      	ldrb	r1, [r4, #0]
 8003f0c:	f000 fb4a 	bl	80045a4 <memchr>
 8003f10:	b138      	cbz	r0, 8003f22 <_vfiprintf_r+0x17a>
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	9b04      	ldr	r3, [sp, #16]
 8003f16:	eba0 000a 	sub.w	r0, r0, sl
 8003f1a:	4082      	lsls	r2, r0
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	3401      	adds	r4, #1
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f26:	2206      	movs	r2, #6
 8003f28:	4829      	ldr	r0, [pc, #164]	; (8003fd0 <_vfiprintf_r+0x228>)
 8003f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f2e:	f000 fb39 	bl	80045a4 <memchr>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d03f      	beq.n	8003fb6 <_vfiprintf_r+0x20e>
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <_vfiprintf_r+0x22c>)
 8003f38:	bb1b      	cbnz	r3, 8003f82 <_vfiprintf_r+0x1da>
 8003f3a:	9b03      	ldr	r3, [sp, #12]
 8003f3c:	3307      	adds	r3, #7
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	3308      	adds	r3, #8
 8003f44:	9303      	str	r3, [sp, #12]
 8003f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f48:	443b      	add	r3, r7
 8003f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f4c:	e768      	b.n	8003e20 <_vfiprintf_r+0x78>
 8003f4e:	460c      	mov	r4, r1
 8003f50:	2001      	movs	r0, #1
 8003f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f56:	e7a6      	b.n	8003ea6 <_vfiprintf_r+0xfe>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f04f 0c0a 	mov.w	ip, #10
 8003f5e:	4619      	mov	r1, r3
 8003f60:	3401      	adds	r4, #1
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	4620      	mov	r0, r4
 8003f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f6a:	3a30      	subs	r2, #48	; 0x30
 8003f6c:	2a09      	cmp	r2, #9
 8003f6e:	d903      	bls.n	8003f78 <_vfiprintf_r+0x1d0>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0c6      	beq.n	8003f02 <_vfiprintf_r+0x15a>
 8003f74:	9105      	str	r1, [sp, #20]
 8003f76:	e7c4      	b.n	8003f02 <_vfiprintf_r+0x15a>
 8003f78:	4604      	mov	r4, r0
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f80:	e7f0      	b.n	8003f64 <_vfiprintf_r+0x1bc>
 8003f82:	ab03      	add	r3, sp, #12
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	462a      	mov	r2, r5
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <_vfiprintf_r+0x230>)
 8003f8c:	a904      	add	r1, sp, #16
 8003f8e:	f3af 8000 	nop.w
 8003f92:	4607      	mov	r7, r0
 8003f94:	1c78      	adds	r0, r7, #1
 8003f96:	d1d6      	bne.n	8003f46 <_vfiprintf_r+0x19e>
 8003f98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f9a:	07d9      	lsls	r1, r3, #31
 8003f9c:	d405      	bmi.n	8003faa <_vfiprintf_r+0x202>
 8003f9e:	89ab      	ldrh	r3, [r5, #12]
 8003fa0:	059a      	lsls	r2, r3, #22
 8003fa2:	d402      	bmi.n	8003faa <_vfiprintf_r+0x202>
 8003fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fa6:	f7ff fde1 	bl	8003b6c <__retarget_lock_release_recursive>
 8003faa:	89ab      	ldrh	r3, [r5, #12]
 8003fac:	065b      	lsls	r3, r3, #25
 8003fae:	f53f af1d 	bmi.w	8003dec <_vfiprintf_r+0x44>
 8003fb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fb4:	e71c      	b.n	8003df0 <_vfiprintf_r+0x48>
 8003fb6:	ab03      	add	r3, sp, #12
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	462a      	mov	r2, r5
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <_vfiprintf_r+0x230>)
 8003fc0:	a904      	add	r1, sp, #16
 8003fc2:	f000 f87d 	bl	80040c0 <_printf_i>
 8003fc6:	e7e4      	b.n	8003f92 <_vfiprintf_r+0x1ea>
 8003fc8:	0800471a 	.word	0x0800471a
 8003fcc:	08004720 	.word	0x08004720
 8003fd0:	08004724 	.word	0x08004724
 8003fd4:	00000000 	.word	0x00000000
 8003fd8:	08003d83 	.word	0x08003d83

08003fdc <_printf_common>:
 8003fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe0:	4616      	mov	r6, r2
 8003fe2:	4699      	mov	r9, r3
 8003fe4:	688a      	ldr	r2, [r1, #8]
 8003fe6:	690b      	ldr	r3, [r1, #16]
 8003fe8:	4607      	mov	r7, r0
 8003fea:	4293      	cmp	r3, r2
 8003fec:	bfb8      	it	lt
 8003fee:	4613      	movlt	r3, r2
 8003ff0:	6033      	str	r3, [r6, #0]
 8003ff2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ffc:	b10a      	cbz	r2, 8004002 <_printf_common+0x26>
 8003ffe:	3301      	adds	r3, #1
 8004000:	6033      	str	r3, [r6, #0]
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	0699      	lsls	r1, r3, #26
 8004006:	bf42      	ittt	mi
 8004008:	6833      	ldrmi	r3, [r6, #0]
 800400a:	3302      	addmi	r3, #2
 800400c:	6033      	strmi	r3, [r6, #0]
 800400e:	6825      	ldr	r5, [r4, #0]
 8004010:	f015 0506 	ands.w	r5, r5, #6
 8004014:	d106      	bne.n	8004024 <_printf_common+0x48>
 8004016:	f104 0a19 	add.w	sl, r4, #25
 800401a:	68e3      	ldr	r3, [r4, #12]
 800401c:	6832      	ldr	r2, [r6, #0]
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	42ab      	cmp	r3, r5
 8004022:	dc2b      	bgt.n	800407c <_printf_common+0xa0>
 8004024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004028:	1e13      	subs	r3, r2, #0
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	bf18      	it	ne
 800402e:	2301      	movne	r3, #1
 8004030:	0692      	lsls	r2, r2, #26
 8004032:	d430      	bmi.n	8004096 <_printf_common+0xba>
 8004034:	4649      	mov	r1, r9
 8004036:	4638      	mov	r0, r7
 8004038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800403c:	47c0      	blx	r8
 800403e:	3001      	adds	r0, #1
 8004040:	d023      	beq.n	800408a <_printf_common+0xae>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	6922      	ldr	r2, [r4, #16]
 8004046:	f003 0306 	and.w	r3, r3, #6
 800404a:	2b04      	cmp	r3, #4
 800404c:	bf14      	ite	ne
 800404e:	2500      	movne	r5, #0
 8004050:	6833      	ldreq	r3, [r6, #0]
 8004052:	f04f 0600 	mov.w	r6, #0
 8004056:	bf08      	it	eq
 8004058:	68e5      	ldreq	r5, [r4, #12]
 800405a:	f104 041a 	add.w	r4, r4, #26
 800405e:	bf08      	it	eq
 8004060:	1aed      	subeq	r5, r5, r3
 8004062:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004066:	bf08      	it	eq
 8004068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800406c:	4293      	cmp	r3, r2
 800406e:	bfc4      	itt	gt
 8004070:	1a9b      	subgt	r3, r3, r2
 8004072:	18ed      	addgt	r5, r5, r3
 8004074:	42b5      	cmp	r5, r6
 8004076:	d11a      	bne.n	80040ae <_printf_common+0xd2>
 8004078:	2000      	movs	r0, #0
 800407a:	e008      	b.n	800408e <_printf_common+0xb2>
 800407c:	2301      	movs	r3, #1
 800407e:	4652      	mov	r2, sl
 8004080:	4649      	mov	r1, r9
 8004082:	4638      	mov	r0, r7
 8004084:	47c0      	blx	r8
 8004086:	3001      	adds	r0, #1
 8004088:	d103      	bne.n	8004092 <_printf_common+0xb6>
 800408a:	f04f 30ff 	mov.w	r0, #4294967295
 800408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004092:	3501      	adds	r5, #1
 8004094:	e7c1      	b.n	800401a <_printf_common+0x3e>
 8004096:	2030      	movs	r0, #48	; 0x30
 8004098:	18e1      	adds	r1, r4, r3
 800409a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040a4:	4422      	add	r2, r4
 80040a6:	3302      	adds	r3, #2
 80040a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ac:	e7c2      	b.n	8004034 <_printf_common+0x58>
 80040ae:	2301      	movs	r3, #1
 80040b0:	4622      	mov	r2, r4
 80040b2:	4649      	mov	r1, r9
 80040b4:	4638      	mov	r0, r7
 80040b6:	47c0      	blx	r8
 80040b8:	3001      	adds	r0, #1
 80040ba:	d0e6      	beq.n	800408a <_printf_common+0xae>
 80040bc:	3601      	adds	r6, #1
 80040be:	e7d9      	b.n	8004074 <_printf_common+0x98>

080040c0 <_printf_i>:
 80040c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	7e0f      	ldrb	r7, [r1, #24]
 80040c6:	4691      	mov	r9, r2
 80040c8:	2f78      	cmp	r7, #120	; 0x78
 80040ca:	4680      	mov	r8, r0
 80040cc:	460c      	mov	r4, r1
 80040ce:	469a      	mov	sl, r3
 80040d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040d6:	d807      	bhi.n	80040e8 <_printf_i+0x28>
 80040d8:	2f62      	cmp	r7, #98	; 0x62
 80040da:	d80a      	bhi.n	80040f2 <_printf_i+0x32>
 80040dc:	2f00      	cmp	r7, #0
 80040de:	f000 80d5 	beq.w	800428c <_printf_i+0x1cc>
 80040e2:	2f58      	cmp	r7, #88	; 0x58
 80040e4:	f000 80c1 	beq.w	800426a <_printf_i+0x1aa>
 80040e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040f0:	e03a      	b.n	8004168 <_printf_i+0xa8>
 80040f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040f6:	2b15      	cmp	r3, #21
 80040f8:	d8f6      	bhi.n	80040e8 <_printf_i+0x28>
 80040fa:	a101      	add	r1, pc, #4	; (adr r1, 8004100 <_printf_i+0x40>)
 80040fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004100:	08004159 	.word	0x08004159
 8004104:	0800416d 	.word	0x0800416d
 8004108:	080040e9 	.word	0x080040e9
 800410c:	080040e9 	.word	0x080040e9
 8004110:	080040e9 	.word	0x080040e9
 8004114:	080040e9 	.word	0x080040e9
 8004118:	0800416d 	.word	0x0800416d
 800411c:	080040e9 	.word	0x080040e9
 8004120:	080040e9 	.word	0x080040e9
 8004124:	080040e9 	.word	0x080040e9
 8004128:	080040e9 	.word	0x080040e9
 800412c:	08004273 	.word	0x08004273
 8004130:	08004199 	.word	0x08004199
 8004134:	0800422d 	.word	0x0800422d
 8004138:	080040e9 	.word	0x080040e9
 800413c:	080040e9 	.word	0x080040e9
 8004140:	08004295 	.word	0x08004295
 8004144:	080040e9 	.word	0x080040e9
 8004148:	08004199 	.word	0x08004199
 800414c:	080040e9 	.word	0x080040e9
 8004150:	080040e9 	.word	0x080040e9
 8004154:	08004235 	.word	0x08004235
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	602a      	str	r2, [r5, #0]
 8004160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004168:	2301      	movs	r3, #1
 800416a:	e0a0      	b.n	80042ae <_printf_i+0x1ee>
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	0607      	lsls	r7, r0, #24
 8004172:	f103 0104 	add.w	r1, r3, #4
 8004176:	6029      	str	r1, [r5, #0]
 8004178:	d501      	bpl.n	800417e <_printf_i+0xbe>
 800417a:	681e      	ldr	r6, [r3, #0]
 800417c:	e003      	b.n	8004186 <_printf_i+0xc6>
 800417e:	0646      	lsls	r6, r0, #25
 8004180:	d5fb      	bpl.n	800417a <_printf_i+0xba>
 8004182:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004186:	2e00      	cmp	r6, #0
 8004188:	da03      	bge.n	8004192 <_printf_i+0xd2>
 800418a:	232d      	movs	r3, #45	; 0x2d
 800418c:	4276      	negs	r6, r6
 800418e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004192:	230a      	movs	r3, #10
 8004194:	4859      	ldr	r0, [pc, #356]	; (80042fc <_printf_i+0x23c>)
 8004196:	e012      	b.n	80041be <_printf_i+0xfe>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	1d19      	adds	r1, r3, #4
 800419e:	6029      	str	r1, [r5, #0]
 80041a0:	0605      	lsls	r5, r0, #24
 80041a2:	d501      	bpl.n	80041a8 <_printf_i+0xe8>
 80041a4:	681e      	ldr	r6, [r3, #0]
 80041a6:	e002      	b.n	80041ae <_printf_i+0xee>
 80041a8:	0641      	lsls	r1, r0, #25
 80041aa:	d5fb      	bpl.n	80041a4 <_printf_i+0xe4>
 80041ac:	881e      	ldrh	r6, [r3, #0]
 80041ae:	2f6f      	cmp	r7, #111	; 0x6f
 80041b0:	bf0c      	ite	eq
 80041b2:	2308      	moveq	r3, #8
 80041b4:	230a      	movne	r3, #10
 80041b6:	4851      	ldr	r0, [pc, #324]	; (80042fc <_printf_i+0x23c>)
 80041b8:	2100      	movs	r1, #0
 80041ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041be:	6865      	ldr	r5, [r4, #4]
 80041c0:	2d00      	cmp	r5, #0
 80041c2:	bfa8      	it	ge
 80041c4:	6821      	ldrge	r1, [r4, #0]
 80041c6:	60a5      	str	r5, [r4, #8]
 80041c8:	bfa4      	itt	ge
 80041ca:	f021 0104 	bicge.w	r1, r1, #4
 80041ce:	6021      	strge	r1, [r4, #0]
 80041d0:	b90e      	cbnz	r6, 80041d6 <_printf_i+0x116>
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	d04b      	beq.n	800426e <_printf_i+0x1ae>
 80041d6:	4615      	mov	r5, r2
 80041d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80041dc:	fb03 6711 	mls	r7, r3, r1, r6
 80041e0:	5dc7      	ldrb	r7, [r0, r7]
 80041e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041e6:	4637      	mov	r7, r6
 80041e8:	42bb      	cmp	r3, r7
 80041ea:	460e      	mov	r6, r1
 80041ec:	d9f4      	bls.n	80041d8 <_printf_i+0x118>
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d10b      	bne.n	800420a <_printf_i+0x14a>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	07de      	lsls	r6, r3, #31
 80041f6:	d508      	bpl.n	800420a <_printf_i+0x14a>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6861      	ldr	r1, [r4, #4]
 80041fc:	4299      	cmp	r1, r3
 80041fe:	bfde      	ittt	le
 8004200:	2330      	movle	r3, #48	; 0x30
 8004202:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004206:	f105 35ff 	addle.w	r5, r5, #4294967295
 800420a:	1b52      	subs	r2, r2, r5
 800420c:	6122      	str	r2, [r4, #16]
 800420e:	464b      	mov	r3, r9
 8004210:	4621      	mov	r1, r4
 8004212:	4640      	mov	r0, r8
 8004214:	f8cd a000 	str.w	sl, [sp]
 8004218:	aa03      	add	r2, sp, #12
 800421a:	f7ff fedf 	bl	8003fdc <_printf_common>
 800421e:	3001      	adds	r0, #1
 8004220:	d14a      	bne.n	80042b8 <_printf_i+0x1f8>
 8004222:	f04f 30ff 	mov.w	r0, #4294967295
 8004226:	b004      	add	sp, #16
 8004228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	f043 0320 	orr.w	r3, r3, #32
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	2778      	movs	r7, #120	; 0x78
 8004236:	4832      	ldr	r0, [pc, #200]	; (8004300 <_printf_i+0x240>)
 8004238:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	6829      	ldr	r1, [r5, #0]
 8004240:	061f      	lsls	r7, r3, #24
 8004242:	f851 6b04 	ldr.w	r6, [r1], #4
 8004246:	d402      	bmi.n	800424e <_printf_i+0x18e>
 8004248:	065f      	lsls	r7, r3, #25
 800424a:	bf48      	it	mi
 800424c:	b2b6      	uxthmi	r6, r6
 800424e:	07df      	lsls	r7, r3, #31
 8004250:	bf48      	it	mi
 8004252:	f043 0320 	orrmi.w	r3, r3, #32
 8004256:	6029      	str	r1, [r5, #0]
 8004258:	bf48      	it	mi
 800425a:	6023      	strmi	r3, [r4, #0]
 800425c:	b91e      	cbnz	r6, 8004266 <_printf_i+0x1a6>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	f023 0320 	bic.w	r3, r3, #32
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	2310      	movs	r3, #16
 8004268:	e7a6      	b.n	80041b8 <_printf_i+0xf8>
 800426a:	4824      	ldr	r0, [pc, #144]	; (80042fc <_printf_i+0x23c>)
 800426c:	e7e4      	b.n	8004238 <_printf_i+0x178>
 800426e:	4615      	mov	r5, r2
 8004270:	e7bd      	b.n	80041ee <_printf_i+0x12e>
 8004272:	682b      	ldr	r3, [r5, #0]
 8004274:	6826      	ldr	r6, [r4, #0]
 8004276:	1d18      	adds	r0, r3, #4
 8004278:	6961      	ldr	r1, [r4, #20]
 800427a:	6028      	str	r0, [r5, #0]
 800427c:	0635      	lsls	r5, r6, #24
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	d501      	bpl.n	8004286 <_printf_i+0x1c6>
 8004282:	6019      	str	r1, [r3, #0]
 8004284:	e002      	b.n	800428c <_printf_i+0x1cc>
 8004286:	0670      	lsls	r0, r6, #25
 8004288:	d5fb      	bpl.n	8004282 <_printf_i+0x1c2>
 800428a:	8019      	strh	r1, [r3, #0]
 800428c:	2300      	movs	r3, #0
 800428e:	4615      	mov	r5, r2
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	e7bc      	b.n	800420e <_printf_i+0x14e>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	2100      	movs	r1, #0
 8004298:	1d1a      	adds	r2, r3, #4
 800429a:	602a      	str	r2, [r5, #0]
 800429c:	681d      	ldr	r5, [r3, #0]
 800429e:	6862      	ldr	r2, [r4, #4]
 80042a0:	4628      	mov	r0, r5
 80042a2:	f000 f97f 	bl	80045a4 <memchr>
 80042a6:	b108      	cbz	r0, 80042ac <_printf_i+0x1ec>
 80042a8:	1b40      	subs	r0, r0, r5
 80042aa:	6060      	str	r0, [r4, #4]
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	2300      	movs	r3, #0
 80042b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b6:	e7aa      	b.n	800420e <_printf_i+0x14e>
 80042b8:	462a      	mov	r2, r5
 80042ba:	4649      	mov	r1, r9
 80042bc:	4640      	mov	r0, r8
 80042be:	6923      	ldr	r3, [r4, #16]
 80042c0:	47d0      	blx	sl
 80042c2:	3001      	adds	r0, #1
 80042c4:	d0ad      	beq.n	8004222 <_printf_i+0x162>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	079b      	lsls	r3, r3, #30
 80042ca:	d413      	bmi.n	80042f4 <_printf_i+0x234>
 80042cc:	68e0      	ldr	r0, [r4, #12]
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	4298      	cmp	r0, r3
 80042d2:	bfb8      	it	lt
 80042d4:	4618      	movlt	r0, r3
 80042d6:	e7a6      	b.n	8004226 <_printf_i+0x166>
 80042d8:	2301      	movs	r3, #1
 80042da:	4632      	mov	r2, r6
 80042dc:	4649      	mov	r1, r9
 80042de:	4640      	mov	r0, r8
 80042e0:	47d0      	blx	sl
 80042e2:	3001      	adds	r0, #1
 80042e4:	d09d      	beq.n	8004222 <_printf_i+0x162>
 80042e6:	3501      	adds	r5, #1
 80042e8:	68e3      	ldr	r3, [r4, #12]
 80042ea:	9903      	ldr	r1, [sp, #12]
 80042ec:	1a5b      	subs	r3, r3, r1
 80042ee:	42ab      	cmp	r3, r5
 80042f0:	dcf2      	bgt.n	80042d8 <_printf_i+0x218>
 80042f2:	e7eb      	b.n	80042cc <_printf_i+0x20c>
 80042f4:	2500      	movs	r5, #0
 80042f6:	f104 0619 	add.w	r6, r4, #25
 80042fa:	e7f5      	b.n	80042e8 <_printf_i+0x228>
 80042fc:	0800472b 	.word	0x0800472b
 8004300:	0800473c 	.word	0x0800473c

08004304 <__sflush_r>:
 8004304:	898a      	ldrh	r2, [r1, #12]
 8004306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004308:	4605      	mov	r5, r0
 800430a:	0710      	lsls	r0, r2, #28
 800430c:	460c      	mov	r4, r1
 800430e:	d457      	bmi.n	80043c0 <__sflush_r+0xbc>
 8004310:	684b      	ldr	r3, [r1, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	dc04      	bgt.n	8004320 <__sflush_r+0x1c>
 8004316:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	dc01      	bgt.n	8004320 <__sflush_r+0x1c>
 800431c:	2000      	movs	r0, #0
 800431e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004322:	2e00      	cmp	r6, #0
 8004324:	d0fa      	beq.n	800431c <__sflush_r+0x18>
 8004326:	2300      	movs	r3, #0
 8004328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800432c:	682f      	ldr	r7, [r5, #0]
 800432e:	6a21      	ldr	r1, [r4, #32]
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	d032      	beq.n	800439a <__sflush_r+0x96>
 8004334:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004336:	89a3      	ldrh	r3, [r4, #12]
 8004338:	075a      	lsls	r2, r3, #29
 800433a:	d505      	bpl.n	8004348 <__sflush_r+0x44>
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	1ac0      	subs	r0, r0, r3
 8004340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004342:	b10b      	cbz	r3, 8004348 <__sflush_r+0x44>
 8004344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004346:	1ac0      	subs	r0, r0, r3
 8004348:	2300      	movs	r3, #0
 800434a:	4602      	mov	r2, r0
 800434c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800434e:	4628      	mov	r0, r5
 8004350:	6a21      	ldr	r1, [r4, #32]
 8004352:	47b0      	blx	r6
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	d106      	bne.n	8004368 <__sflush_r+0x64>
 800435a:	6829      	ldr	r1, [r5, #0]
 800435c:	291d      	cmp	r1, #29
 800435e:	d82b      	bhi.n	80043b8 <__sflush_r+0xb4>
 8004360:	4a28      	ldr	r2, [pc, #160]	; (8004404 <__sflush_r+0x100>)
 8004362:	410a      	asrs	r2, r1
 8004364:	07d6      	lsls	r6, r2, #31
 8004366:	d427      	bmi.n	80043b8 <__sflush_r+0xb4>
 8004368:	2200      	movs	r2, #0
 800436a:	6062      	str	r2, [r4, #4]
 800436c:	6922      	ldr	r2, [r4, #16]
 800436e:	04d9      	lsls	r1, r3, #19
 8004370:	6022      	str	r2, [r4, #0]
 8004372:	d504      	bpl.n	800437e <__sflush_r+0x7a>
 8004374:	1c42      	adds	r2, r0, #1
 8004376:	d101      	bne.n	800437c <__sflush_r+0x78>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b903      	cbnz	r3, 800437e <__sflush_r+0x7a>
 800437c:	6560      	str	r0, [r4, #84]	; 0x54
 800437e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004380:	602f      	str	r7, [r5, #0]
 8004382:	2900      	cmp	r1, #0
 8004384:	d0ca      	beq.n	800431c <__sflush_r+0x18>
 8004386:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800438a:	4299      	cmp	r1, r3
 800438c:	d002      	beq.n	8004394 <__sflush_r+0x90>
 800438e:	4628      	mov	r0, r5
 8004390:	f7ff fbee 	bl	8003b70 <_free_r>
 8004394:	2000      	movs	r0, #0
 8004396:	6360      	str	r0, [r4, #52]	; 0x34
 8004398:	e7c1      	b.n	800431e <__sflush_r+0x1a>
 800439a:	2301      	movs	r3, #1
 800439c:	4628      	mov	r0, r5
 800439e:	47b0      	blx	r6
 80043a0:	1c41      	adds	r1, r0, #1
 80043a2:	d1c8      	bne.n	8004336 <__sflush_r+0x32>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0c5      	beq.n	8004336 <__sflush_r+0x32>
 80043aa:	2b1d      	cmp	r3, #29
 80043ac:	d001      	beq.n	80043b2 <__sflush_r+0xae>
 80043ae:	2b16      	cmp	r3, #22
 80043b0:	d101      	bne.n	80043b6 <__sflush_r+0xb2>
 80043b2:	602f      	str	r7, [r5, #0]
 80043b4:	e7b2      	b.n	800431c <__sflush_r+0x18>
 80043b6:	89a3      	ldrh	r3, [r4, #12]
 80043b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043bc:	81a3      	strh	r3, [r4, #12]
 80043be:	e7ae      	b.n	800431e <__sflush_r+0x1a>
 80043c0:	690f      	ldr	r7, [r1, #16]
 80043c2:	2f00      	cmp	r7, #0
 80043c4:	d0aa      	beq.n	800431c <__sflush_r+0x18>
 80043c6:	0793      	lsls	r3, r2, #30
 80043c8:	bf18      	it	ne
 80043ca:	2300      	movne	r3, #0
 80043cc:	680e      	ldr	r6, [r1, #0]
 80043ce:	bf08      	it	eq
 80043d0:	694b      	ldreq	r3, [r1, #20]
 80043d2:	1bf6      	subs	r6, r6, r7
 80043d4:	600f      	str	r7, [r1, #0]
 80043d6:	608b      	str	r3, [r1, #8]
 80043d8:	2e00      	cmp	r6, #0
 80043da:	dd9f      	ble.n	800431c <__sflush_r+0x18>
 80043dc:	4633      	mov	r3, r6
 80043de:	463a      	mov	r2, r7
 80043e0:	4628      	mov	r0, r5
 80043e2:	6a21      	ldr	r1, [r4, #32]
 80043e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80043e8:	47e0      	blx	ip
 80043ea:	2800      	cmp	r0, #0
 80043ec:	dc06      	bgt.n	80043fc <__sflush_r+0xf8>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	e790      	b.n	800431e <__sflush_r+0x1a>
 80043fc:	4407      	add	r7, r0
 80043fe:	1a36      	subs	r6, r6, r0
 8004400:	e7ea      	b.n	80043d8 <__sflush_r+0xd4>
 8004402:	bf00      	nop
 8004404:	dfbffffe 	.word	0xdfbffffe

08004408 <_fflush_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	690b      	ldr	r3, [r1, #16]
 800440c:	4605      	mov	r5, r0
 800440e:	460c      	mov	r4, r1
 8004410:	b913      	cbnz	r3, 8004418 <_fflush_r+0x10>
 8004412:	2500      	movs	r5, #0
 8004414:	4628      	mov	r0, r5
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	b118      	cbz	r0, 8004422 <_fflush_r+0x1a>
 800441a:	6a03      	ldr	r3, [r0, #32]
 800441c:	b90b      	cbnz	r3, 8004422 <_fflush_r+0x1a>
 800441e:	f7ff fa9f 	bl	8003960 <__sinit>
 8004422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f3      	beq.n	8004412 <_fflush_r+0xa>
 800442a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800442c:	07d0      	lsls	r0, r2, #31
 800442e:	d404      	bmi.n	800443a <_fflush_r+0x32>
 8004430:	0599      	lsls	r1, r3, #22
 8004432:	d402      	bmi.n	800443a <_fflush_r+0x32>
 8004434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004436:	f7ff fb98 	bl	8003b6a <__retarget_lock_acquire_recursive>
 800443a:	4628      	mov	r0, r5
 800443c:	4621      	mov	r1, r4
 800443e:	f7ff ff61 	bl	8004304 <__sflush_r>
 8004442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004444:	4605      	mov	r5, r0
 8004446:	07da      	lsls	r2, r3, #31
 8004448:	d4e4      	bmi.n	8004414 <_fflush_r+0xc>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	059b      	lsls	r3, r3, #22
 800444e:	d4e1      	bmi.n	8004414 <_fflush_r+0xc>
 8004450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004452:	f7ff fb8b 	bl	8003b6c <__retarget_lock_release_recursive>
 8004456:	e7dd      	b.n	8004414 <_fflush_r+0xc>

08004458 <__swbuf_r>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	460e      	mov	r6, r1
 800445c:	4614      	mov	r4, r2
 800445e:	4605      	mov	r5, r0
 8004460:	b118      	cbz	r0, 800446a <__swbuf_r+0x12>
 8004462:	6a03      	ldr	r3, [r0, #32]
 8004464:	b90b      	cbnz	r3, 800446a <__swbuf_r+0x12>
 8004466:	f7ff fa7b 	bl	8003960 <__sinit>
 800446a:	69a3      	ldr	r3, [r4, #24]
 800446c:	60a3      	str	r3, [r4, #8]
 800446e:	89a3      	ldrh	r3, [r4, #12]
 8004470:	071a      	lsls	r2, r3, #28
 8004472:	d525      	bpl.n	80044c0 <__swbuf_r+0x68>
 8004474:	6923      	ldr	r3, [r4, #16]
 8004476:	b31b      	cbz	r3, 80044c0 <__swbuf_r+0x68>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	6922      	ldr	r2, [r4, #16]
 800447c:	b2f6      	uxtb	r6, r6
 800447e:	1a98      	subs	r0, r3, r2
 8004480:	6963      	ldr	r3, [r4, #20]
 8004482:	4637      	mov	r7, r6
 8004484:	4283      	cmp	r3, r0
 8004486:	dc04      	bgt.n	8004492 <__swbuf_r+0x3a>
 8004488:	4621      	mov	r1, r4
 800448a:	4628      	mov	r0, r5
 800448c:	f7ff ffbc 	bl	8004408 <_fflush_r>
 8004490:	b9e0      	cbnz	r0, 80044cc <__swbuf_r+0x74>
 8004492:	68a3      	ldr	r3, [r4, #8]
 8004494:	3b01      	subs	r3, #1
 8004496:	60a3      	str	r3, [r4, #8]
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	6022      	str	r2, [r4, #0]
 800449e:	701e      	strb	r6, [r3, #0]
 80044a0:	6962      	ldr	r2, [r4, #20]
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d004      	beq.n	80044b2 <__swbuf_r+0x5a>
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	07db      	lsls	r3, r3, #31
 80044ac:	d506      	bpl.n	80044bc <__swbuf_r+0x64>
 80044ae:	2e0a      	cmp	r6, #10
 80044b0:	d104      	bne.n	80044bc <__swbuf_r+0x64>
 80044b2:	4621      	mov	r1, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	f7ff ffa7 	bl	8004408 <_fflush_r>
 80044ba:	b938      	cbnz	r0, 80044cc <__swbuf_r+0x74>
 80044bc:	4638      	mov	r0, r7
 80044be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c0:	4621      	mov	r1, r4
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 f806 	bl	80044d4 <__swsetup_r>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d0d5      	beq.n	8004478 <__swbuf_r+0x20>
 80044cc:	f04f 37ff 	mov.w	r7, #4294967295
 80044d0:	e7f4      	b.n	80044bc <__swbuf_r+0x64>
	...

080044d4 <__swsetup_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <__swsetup_r+0xac>)
 80044d8:	4605      	mov	r5, r0
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	460c      	mov	r4, r1
 80044de:	b118      	cbz	r0, 80044e8 <__swsetup_r+0x14>
 80044e0:	6a03      	ldr	r3, [r0, #32]
 80044e2:	b90b      	cbnz	r3, 80044e8 <__swsetup_r+0x14>
 80044e4:	f7ff fa3c 	bl	8003960 <__sinit>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044ee:	0718      	lsls	r0, r3, #28
 80044f0:	d422      	bmi.n	8004538 <__swsetup_r+0x64>
 80044f2:	06d9      	lsls	r1, r3, #27
 80044f4:	d407      	bmi.n	8004506 <__swsetup_r+0x32>
 80044f6:	2309      	movs	r3, #9
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004502:	81a3      	strh	r3, [r4, #12]
 8004504:	e034      	b.n	8004570 <__swsetup_r+0x9c>
 8004506:	0758      	lsls	r0, r3, #29
 8004508:	d512      	bpl.n	8004530 <__swsetup_r+0x5c>
 800450a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800450c:	b141      	cbz	r1, 8004520 <__swsetup_r+0x4c>
 800450e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004512:	4299      	cmp	r1, r3
 8004514:	d002      	beq.n	800451c <__swsetup_r+0x48>
 8004516:	4628      	mov	r0, r5
 8004518:	f7ff fb2a 	bl	8003b70 <_free_r>
 800451c:	2300      	movs	r3, #0
 800451e:	6363      	str	r3, [r4, #52]	; 0x34
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	2300      	movs	r3, #0
 800452a:	6063      	str	r3, [r4, #4]
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f043 0308 	orr.w	r3, r3, #8
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	b94b      	cbnz	r3, 8004550 <__swsetup_r+0x7c>
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004546:	d003      	beq.n	8004550 <__swsetup_r+0x7c>
 8004548:	4621      	mov	r1, r4
 800454a:	4628      	mov	r0, r5
 800454c:	f000 f85d 	bl	800460a <__smakebuf_r>
 8004550:	89a0      	ldrh	r0, [r4, #12]
 8004552:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004556:	f010 0301 	ands.w	r3, r0, #1
 800455a:	d00a      	beq.n	8004572 <__swsetup_r+0x9e>
 800455c:	2300      	movs	r3, #0
 800455e:	60a3      	str	r3, [r4, #8]
 8004560:	6963      	ldr	r3, [r4, #20]
 8004562:	425b      	negs	r3, r3
 8004564:	61a3      	str	r3, [r4, #24]
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	b943      	cbnz	r3, 800457c <__swsetup_r+0xa8>
 800456a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800456e:	d1c4      	bne.n	80044fa <__swsetup_r+0x26>
 8004570:	bd38      	pop	{r3, r4, r5, pc}
 8004572:	0781      	lsls	r1, r0, #30
 8004574:	bf58      	it	pl
 8004576:	6963      	ldrpl	r3, [r4, #20]
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	e7f4      	b.n	8004566 <__swsetup_r+0x92>
 800457c:	2000      	movs	r0, #0
 800457e:	e7f7      	b.n	8004570 <__swsetup_r+0x9c>
 8004580:	20000064 	.word	0x20000064

08004584 <_sbrk_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	2300      	movs	r3, #0
 8004588:	4d05      	ldr	r5, [pc, #20]	; (80045a0 <_sbrk_r+0x1c>)
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	f7fc fdde 	bl	8001150 <_sbrk>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_sbrk_r+0x1a>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_sbrk_r+0x1a>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000288 	.word	0x20000288

080045a4 <memchr>:
 80045a4:	4603      	mov	r3, r0
 80045a6:	b510      	push	{r4, lr}
 80045a8:	b2c9      	uxtb	r1, r1
 80045aa:	4402      	add	r2, r0
 80045ac:	4293      	cmp	r3, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	d101      	bne.n	80045b6 <memchr+0x12>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e003      	b.n	80045be <memchr+0x1a>
 80045b6:	7804      	ldrb	r4, [r0, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	428c      	cmp	r4, r1
 80045bc:	d1f6      	bne.n	80045ac <memchr+0x8>
 80045be:	bd10      	pop	{r4, pc}

080045c0 <__swhatbuf_r>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	460c      	mov	r4, r1
 80045c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c8:	4615      	mov	r5, r2
 80045ca:	2900      	cmp	r1, #0
 80045cc:	461e      	mov	r6, r3
 80045ce:	b096      	sub	sp, #88	; 0x58
 80045d0:	da0c      	bge.n	80045ec <__swhatbuf_r+0x2c>
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	2100      	movs	r1, #0
 80045d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045da:	bf0c      	ite	eq
 80045dc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045e0:	2340      	movne	r3, #64	; 0x40
 80045e2:	2000      	movs	r0, #0
 80045e4:	6031      	str	r1, [r6, #0]
 80045e6:	602b      	str	r3, [r5, #0]
 80045e8:	b016      	add	sp, #88	; 0x58
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	466a      	mov	r2, sp
 80045ee:	f000 f849 	bl	8004684 <_fstat_r>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	dbed      	blt.n	80045d2 <__swhatbuf_r+0x12>
 80045f6:	9901      	ldr	r1, [sp, #4]
 80045f8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80045fc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004600:	4259      	negs	r1, r3
 8004602:	4159      	adcs	r1, r3
 8004604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004608:	e7eb      	b.n	80045e2 <__swhatbuf_r+0x22>

0800460a <__smakebuf_r>:
 800460a:	898b      	ldrh	r3, [r1, #12]
 800460c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800460e:	079d      	lsls	r5, r3, #30
 8004610:	4606      	mov	r6, r0
 8004612:	460c      	mov	r4, r1
 8004614:	d507      	bpl.n	8004626 <__smakebuf_r+0x1c>
 8004616:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	2301      	movs	r3, #1
 8004620:	6163      	str	r3, [r4, #20]
 8004622:	b002      	add	sp, #8
 8004624:	bd70      	pop	{r4, r5, r6, pc}
 8004626:	466a      	mov	r2, sp
 8004628:	ab01      	add	r3, sp, #4
 800462a:	f7ff ffc9 	bl	80045c0 <__swhatbuf_r>
 800462e:	9900      	ldr	r1, [sp, #0]
 8004630:	4605      	mov	r5, r0
 8004632:	4630      	mov	r0, r6
 8004634:	f7ff fb04 	bl	8003c40 <_malloc_r>
 8004638:	b948      	cbnz	r0, 800464e <__smakebuf_r+0x44>
 800463a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800463e:	059a      	lsls	r2, r3, #22
 8004640:	d4ef      	bmi.n	8004622 <__smakebuf_r+0x18>
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	f043 0302 	orr.w	r3, r3, #2
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	e7e3      	b.n	8004616 <__smakebuf_r+0xc>
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	6020      	str	r0, [r4, #0]
 8004652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	9b00      	ldr	r3, [sp, #0]
 800465a:	6120      	str	r0, [r4, #16]
 800465c:	6163      	str	r3, [r4, #20]
 800465e:	9b01      	ldr	r3, [sp, #4]
 8004660:	b15b      	cbz	r3, 800467a <__smakebuf_r+0x70>
 8004662:	4630      	mov	r0, r6
 8004664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004668:	f000 f81e 	bl	80046a8 <_isatty_r>
 800466c:	b128      	cbz	r0, 800467a <__smakebuf_r+0x70>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	f023 0303 	bic.w	r3, r3, #3
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	81a3      	strh	r3, [r4, #12]
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	431d      	orrs	r5, r3
 800467e:	81a5      	strh	r5, [r4, #12]
 8004680:	e7cf      	b.n	8004622 <__smakebuf_r+0x18>
	...

08004684 <_fstat_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	2300      	movs	r3, #0
 8004688:	4d06      	ldr	r5, [pc, #24]	; (80046a4 <_fstat_r+0x20>)
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	4611      	mov	r1, r2
 8004690:	602b      	str	r3, [r5, #0]
 8004692:	f7fc fd38 	bl	8001106 <_fstat>
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	d102      	bne.n	80046a0 <_fstat_r+0x1c>
 800469a:	682b      	ldr	r3, [r5, #0]
 800469c:	b103      	cbz	r3, 80046a0 <_fstat_r+0x1c>
 800469e:	6023      	str	r3, [r4, #0]
 80046a0:	bd38      	pop	{r3, r4, r5, pc}
 80046a2:	bf00      	nop
 80046a4:	20000288 	.word	0x20000288

080046a8 <_isatty_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	2300      	movs	r3, #0
 80046ac:	4d05      	ldr	r5, [pc, #20]	; (80046c4 <_isatty_r+0x1c>)
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	f7fc fd36 	bl	8001124 <_isatty>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_isatty_r+0x1a>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_isatty_r+0x1a>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	20000288 	.word	0x20000288

080046c8 <_init>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr

080046d4 <_fini>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	bf00      	nop
 80046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046da:	bc08      	pop	{r3}
 80046dc:	469e      	mov	lr, r3
 80046de:	4770      	bx	lr
