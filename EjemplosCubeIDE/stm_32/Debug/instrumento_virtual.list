
instrumento_virtual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eac  08005eac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005eac  08005eac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eac  08005eac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001e0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013642  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002675  00000000  00000000  0003367e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00035cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f18  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021942  00000000  00000000  00037c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013dac  00000000  00000000  00059552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc847  00000000  00000000  0006d2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139b45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043a4  00000000  00000000  00139b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e5c 	.word	0x08005e5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005e5c 	.word	0x08005e5c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fe96 	bl	8000efc <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIOB->ODR=4096;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <main+0x44>)
 80001d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001d6:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f820 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f99e 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f97e 	bl	80004e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f944 	bl	8000470 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80001e8:	f000 f90c 	bl	8000404 <MX_TIM6_Init>
  MX_ADC1_Init();
 80001ec:	f000 f870 	bl	80002d0 <MX_ADC1_Init>
  MX_DAC2_Init();
 80001f0:	f000 f8de 	bl	80003b0 <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */

  /******Enable timers**********/
 HAL_TIM_Base_Start_IT(&htim6);
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <main+0x48>)
 80001f6:	f004 f87d 	bl	80042f4 <HAL_TIM_Base_Start_IT>
 HAL_UART_Receive_IT(&huart2, uart_rx_buffer,rx_buffer_size);
 80001fa:	2206      	movs	r2, #6
 80001fc:	4905      	ldr	r1, [pc, #20]	; (8000214 <main+0x4c>)
 80001fe:	4806      	ldr	r0, [pc, #24]	; (8000218 <main+0x50>)
 8000200:	f004 fb6e 	bl	80048e0 <HAL_UART_Receive_IT>
  SystemCoreClockUpdate();
 8000204:	f000 fde0 	bl	8000dc8 <SystemCoreClockUpdate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	e7fe      	b.n	8000208 <main+0x40>
 800020a:	bf00      	nop
 800020c:	48000400 	.word	0x48000400
 8000210:	2000008c 	.word	0x2000008c
 8000214:	200001cc 	.word	0x200001cc
 8000218:	200000d8 	.word	0x200000d8

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b096      	sub	sp, #88	; 0x58
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f005 fe0e 	bl	8005e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	f107 031c 	add.w	r3, r7, #28
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000240:	463b      	mov	r3, r7
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]
 800024e:	615a      	str	r2, [r3, #20]
 8000250:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000252:	2302      	movs	r3, #2
 8000254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000262:	2300      	movs	r3, #0
 8000264:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000266:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800026a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000270:	4618      	mov	r0, r3
 8000272:	f002 fc3d 	bl	8002af0 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800027c:	f000 fc0c 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	2102      	movs	r1, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f003 fc65 	bl	8003b6c <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002a8:	f000 fbf6 	bl	8000a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002ac:	2380      	movs	r3, #128	; 0x80
 80002ae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	463b      	mov	r3, r7
 80002b8:	4618      	mov	r0, r3
 80002ba:	f003 fe8d 	bl	8003fd8 <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002c4:	f000 fbe8 	bl	8000a98 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3758      	adds	r7, #88	; 0x58
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08a      	sub	sp, #40	; 0x28
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002d6:	f107 031c 	add.w	r3, r7, #28
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
 80002f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f2:	4b2e      	ldr	r3, [pc, #184]	; (80003ac <MX_ADC1_Init+0xdc>)
 80002f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002fa:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <MX_ADC1_Init+0xdc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000300:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000306:	4b29      	ldr	r3, [pc, #164]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800030c:	4b27      	ldr	r3, [pc, #156]	; (80003ac <MX_ADC1_Init+0xdc>)
 800030e:	2200      	movs	r2, #0
 8000310:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000312:	4b26      	ldr	r3, [pc, #152]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000314:	2200      	movs	r2, #0
 8000316:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031a:	4b24      	ldr	r3, [pc, #144]	; (80003ac <MX_ADC1_Init+0xdc>)
 800031c:	2200      	movs	r2, #0
 800031e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000320:	4b22      	ldr	r3, [pc, #136]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000322:	2201      	movs	r2, #1
 8000324:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000326:	4b21      	ldr	r3, [pc, #132]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800032c:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <MX_ADC1_Init+0xdc>)
 800032e:	2201      	movs	r2, #1
 8000330:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <MX_ADC1_Init+0xdc>)
 800033c:	2204      	movs	r2, #4
 800033e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000342:	2200      	movs	r2, #0
 8000344:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000348:	2200      	movs	r2, #0
 800034a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034c:	4817      	ldr	r0, [pc, #92]	; (80003ac <MX_ADC1_Init+0xdc>)
 800034e:	f000 fe3b 	bl	8000fc8 <HAL_ADC_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000358:	f000 fb9e 	bl	8000a98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000360:	f107 031c 	add.w	r3, r7, #28
 8000364:	4619      	mov	r1, r3
 8000366:	4811      	ldr	r0, [pc, #68]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000368:	f001 fc48 	bl	8001bfc <HAL_ADCEx_MultiModeConfigChannel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000372:	f000 fb91 	bl	8000a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000376:	2301      	movs	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800037a:	2301      	movs	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4619      	mov	r1, r3
 8000392:	4806      	ldr	r0, [pc, #24]	; (80003ac <MX_ADC1_Init+0xdc>)
 8000394:	f001 f972 	bl	800167c <HAL_ADC_ConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800039e:	f000 fb7b 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	3728      	adds	r7, #40	; 0x28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000028 	.word	0x20000028

080003b0 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_DAC2_Init+0x4c>)
 80003c2:	4a0f      	ldr	r2, [pc, #60]	; (8000400 <MX_DAC2_Init+0x50>)
 80003c4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <MX_DAC2_Init+0x4c>)
 80003c8:	f001 ff6f 	bl	80022aa <HAL_DAC_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 80003d2:	f000 fb61 	bl	8000a98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 80003da:	2302      	movs	r3, #2
 80003dc:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	4619      	mov	r1, r3
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_DAC2_Init+0x4c>)
 80003e6:	f001 ff83 	bl	80022f0 <HAL_DAC_ConfigChannel>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 80003f0:	f000 fb52 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000078 	.word	0x20000078
 8000400:	40009800 	.word	0x40009800

08000404 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_TIM6_Init+0x64>)
 8000416:	4a15      	ldr	r2, [pc, #84]	; (800046c <MX_TIM6_Init+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_TIM6_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_TIM6_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64000;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_TIM6_Init+0x64>)
 8000428:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800042c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_TIM6_Init+0x64>)
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <MX_TIM6_Init+0x64>)
 8000436:	f003 ff05 	bl	8004244 <HAL_TIM_Base_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000440:	f000 fb2a 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_TIM6_Init+0x64>)
 8000452:	f004 f96b 	bl	800472c <HAL_TIMEx_MasterConfigSynchronization>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800045c:	f000 fb1c 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	2000008c 	.word	0x2000008c
 800046c:	40001000 	.word	0x40001000

08000470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 8000476:	4a19      	ldr	r2, [pc, #100]	; (80004dc <MX_USART2_UART_Init+0x6c>)
 8000478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 800047c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4809      	ldr	r0, [pc, #36]	; (80004d8 <MX_USART2_UART_Init+0x68>)
 80004b4:	f004 f9c6 	bl	8004844 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004be:	f000 faeb 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2100      	movs	r1, #0
 80004c6:	2026      	movs	r0, #38	; 0x26
 80004c8:	f001 feb9 	bl	800223e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004cc:	2026      	movs	r0, #38	; 0x26
 80004ce:	f001 fed2 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200000d8 	.word	0x200000d8
 80004dc:	40004400 	.word	0x40004400

080004e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_DMA_Init+0x38>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_DMA_Init+0x38>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x38>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2011      	movs	r0, #17
 8000504:	f001 fe9b 	bl	800223e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000508:	2011      	movs	r0, #17
 800050a:	f001 feb4 	bl	8002276 <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	4b54      	ldr	r3, [pc, #336]	; (8000684 <MX_GPIO_Init+0x168>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a53      	ldr	r2, [pc, #332]	; (8000684 <MX_GPIO_Init+0x168>)
 8000538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b51      	ldr	r3, [pc, #324]	; (8000684 <MX_GPIO_Init+0x168>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b4e      	ldr	r3, [pc, #312]	; (8000684 <MX_GPIO_Init+0x168>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a4d      	ldr	r2, [pc, #308]	; (8000684 <MX_GPIO_Init+0x168>)
 8000550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <MX_GPIO_Init+0x168>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b48      	ldr	r3, [pc, #288]	; (8000684 <MX_GPIO_Init+0x168>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a47      	ldr	r2, [pc, #284]	; (8000684 <MX_GPIO_Init+0x168>)
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b45      	ldr	r3, [pc, #276]	; (8000684 <MX_GPIO_Init+0x168>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b42      	ldr	r3, [pc, #264]	; (8000684 <MX_GPIO_Init+0x168>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a41      	ldr	r2, [pc, #260]	; (8000684 <MX_GPIO_Init+0x168>)
 8000580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b3f      	ldr	r3, [pc, #252]	; (8000684 <MX_GPIO_Init+0x168>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DO_5_Pin|DO_6_Pin|DO_1_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f002 fa90 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO_4_Pin|sel_0_Pin|sel_1_Pin|sel_2_Pin
 80005a0:	2200      	movs	r2, #0
 80005a2:	f24e 4170 	movw	r1, #58480	; 0xe470
 80005a6:	4838      	ldr	r0, [pc, #224]	; (8000688 <MX_GPIO_Init+0x16c>)
 80005a8:	f002 fa8a 	bl	8002ac0 <HAL_GPIO_WritePin>
                          |DO_3_Pin|DO_2_Pin|DO_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO_7_GPIO_Port, DO_7_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4836      	ldr	r0, [pc, #216]	; (800068c <MX_GPIO_Init+0x170>)
 80005b2:	f002 fa85 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	482f      	ldr	r0, [pc, #188]	; (800068c <MX_GPIO_Init+0x170>)
 80005ce:	f002 f905 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DO_5_Pin DO_6_Pin DO_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DO_5_Pin|DO_6_Pin|DO_1_Pin;
 80005d2:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f002 f8f5 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_6_Pin DI_7_Pin DI_8_Pin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 80005f2:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4821      	ldr	r0, [pc, #132]	; (800068c <MX_GPIO_Init+0x170>)
 8000608:	f002 f8e8 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_1_Pin DI_2_Pin DI_3_Pin */
  GPIO_InitStruct.Pin = DI_1_Pin|DI_2_Pin|DI_3_Pin;
 800060c:	f641 0304 	movw	r3, #6148	; 0x1804
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000616:	2302      	movs	r3, #2
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <MX_GPIO_Init+0x16c>)
 8000622:	f002 f8db 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_4_Pin sel_0_Pin sel_1_Pin sel_2_Pin
                           DO_3_Pin DO_2_Pin DO_8_Pin */
  GPIO_InitStruct.Pin = DO_4_Pin|sel_0_Pin|sel_1_Pin|sel_2_Pin
 8000626:	f24e 4370 	movw	r3, #58480	; 0xe470
 800062a:	617b      	str	r3, [r7, #20]
                          |DO_3_Pin|DO_2_Pin|DO_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_GPIO_Init+0x16c>)
 8000640:	f002 f8cc 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DO_7_Pin */
  GPIO_InitStruct.Pin = DO_7_Pin;
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DO_7_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_GPIO_Init+0x170>)
 800065c:	f002 f8be 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_4_Pin DI_5_Pin */
  GPIO_InitStruct.Pin = DI_4_Pin|DI_5_Pin;
 8000660:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f002 f8b0 	bl	80027dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000
 8000688:	48000400 	.word	0x48000400
 800068c:	48000800 	.word	0x48000800

08000690 <digital_read>:

/* this function implements a vector with 8 digital inputs and return it like 8 bit int
 * PB2, PB11, PB12, PA11, PA12, PC5, PC6, PC8 are the inputs where PB2 is the lsb
 *
 * */
uint8_t digital_read() {
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
    uint8_t inputVector = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOB->IDR & GPIO_IDR_2) ? (1 << 0) : 0; //this sentence read directly from the reg of each gpio
 800069a:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <digital_read+0xf8>)
 800069c:	691b      	ldr	r3, [r3, #16]
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	bf14      	ite	ne
 80006a6:	2301      	movne	r3, #1
 80006a8:	2300      	moveq	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	b25a      	sxtb	r2, r3
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOB->IDR & GPIO_IDR_11) ? (1 << 1) : 0;
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <digital_read+0xf8>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <digital_read+0x38>
 80006c4:	2302      	movs	r3, #2
 80006c6:	e000      	b.n	80006ca <digital_read+0x3a>
 80006c8:	2300      	movs	r3, #0
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOB->IDR & GPIO_IDR_12) ? (1 << 2) : 0;
 80006d6:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <digital_read+0xf8>)
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <digital_read+0x56>
 80006e2:	2304      	movs	r3, #4
 80006e4:	e000      	b.n	80006e8 <digital_read+0x58>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b25a      	sxtb	r2, r3
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOA->IDR & GPIO_IDR_11) ? (1 << 3) : 0;
 80006f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <digital_read+0x76>
 8000702:	2308      	movs	r3, #8
 8000704:	e000      	b.n	8000708 <digital_read+0x78>
 8000706:	2300      	movs	r3, #0
 8000708:	b25a      	sxtb	r2, r3
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	4313      	orrs	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOA->IDR & GPIO_IDR_12) ? (1 << 4) : 0;
 8000714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <digital_read+0x96>
 8000722:	2310      	movs	r3, #16
 8000724:	e000      	b.n	8000728 <digital_read+0x98>
 8000726:	2300      	movs	r3, #0
 8000728:	b25a      	sxtb	r2, r3
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	4313      	orrs	r3, r2
 8000730:	b25b      	sxtb	r3, r3
 8000732:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOC->IDR & GPIO_IDR_5) ? (1 << 5) : 0;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <digital_read+0xfc>)
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	f003 0320 	and.w	r3, r3, #32
 800073c:	b25a      	sxtb	r2, r3
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	4313      	orrs	r3, r2
 8000744:	b25b      	sxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOC->IDR & GPIO_IDR_6) ? (1 << 6) : 0;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <digital_read+0xfc>)
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	b25a      	sxtb	r2, r3
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	4313      	orrs	r3, r2
 8000758:	b25b      	sxtb	r3, r3
 800075a:	71fb      	strb	r3, [r7, #7]
    inputVector |= (GPIOC->IDR & GPIO_IDR_8) ? (1 << 7) : 0;
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <digital_read+0xfc>)
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <digital_read+0xdc>
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	e000      	b.n	800076e <digital_read+0xde>
 800076c:	2300      	movs	r3, #0
 800076e:	b25a      	sxtb	r2, r3
 8000770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000774:	4313      	orrs	r3, r2
 8000776:	b25b      	sxtb	r3, r3
 8000778:	71fb      	strb	r3, [r7, #7]
    return inputVector;
 800077a:	79fb      	ldrb	r3, [r7, #7]
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	48000400 	.word	0x48000400
 800078c:	48000800 	.word	0x48000800

08000790 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]



	  static uint8_t stream_counter = 0;
	  static uint8_t counter = 0;
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (counter >> 0) & 0x01);
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007aa:	f002 f989 	bl	8002ac0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (counter >> 1) & 0x01);
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	085b      	lsrs	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c2:	4826      	ldr	r0, [pc, #152]	; (800085c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007c4:	f002 f97c 	bl	8002ac0 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, (counter >> 2) & 0x01);
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	089b      	lsrs	r3, r3, #2
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007dc:	481f      	ldr	r0, [pc, #124]	; (800085c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007de:	f002 f96f 	bl	8002ac0 <HAL_GPIO_WritePin>



    HAL_ADC_Start(&hadc1); // start the adc
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80007e4:	f000 fd82 	bl	80012ec <HAL_ADC_Start>

    HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 80007e8:	2164      	movs	r1, #100	; 0x64
 80007ea:	481d      	ldr	r0, [pc, #116]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80007ec:	f000 fe6a 	bl	80014c4 <HAL_ADC_PollForConversion>

    adc_val[counter] = HAL_ADC_GetValue(&hadc1)+70; // get the adc value
 80007f0:	481b      	ldr	r0, [pc, #108]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80007f2:	f000 ff35 	bl	8001660 <HAL_ADC_GetValue>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80007fa:	7812      	ldrb	r2, [r2, #0]
 80007fc:	4611      	mov	r1, r2
 80007fe:	3346      	adds	r3, #70	; 0x46
 8000800:	4a18      	ldr	r2, [pc, #96]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000802:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    HAL_ADC_Stop(&hadc1); // stop adc
 8000806:	4816      	ldr	r0, [pc, #88]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000808:	f000 fe26 	bl	8001458 <HAL_ADC_Stop>


    if(counter==7){
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b07      	cmp	r3, #7
 8000812:	d110      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0xa6>

    	digital_In=digital_read();//acquire digital inputs values
 8000814:	f7ff ff3c 	bl	8000690 <digital_read>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800081e:	701a      	strb	r2, [r3, #0]
    	stream_counter = (stream_counter + 1) & 0xFF;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800082a:	701a      	strb	r2, [r3, #0]
    	stream_send(stream_counter);
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f81d 	bl	8000870 <stream_send>
    	 //HAL_UART_Transmit_DMA(&huart2, (uint8_t*)str, 41);
    }

    counter = (counter + 1) % 8;  // 3-bit counter (0 to 7)
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	425a      	negs	r2, r3
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	f002 0207 	and.w	r2, r2, #7
 8000846:	bf58      	it	pl
 8000848:	4253      	negpl	r3, r2
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800084e:	701a      	strb	r2, [r3, #0]

}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200001d2 	.word	0x200001d2
 800085c:	48000400 	.word	0x48000400
 8000860:	20000028 	.word	0x20000028
 8000864:	200001a4 	.word	0x200001a4
 8000868:	200001c8 	.word	0x200001c8
 800086c:	200001d3 	.word	0x200001d3

08000870 <stream_send>:
    }
    sprintf(output, "%ld\r\n", arr[size - 1]);
}


void stream_send(uint8_t stream_counter){
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	 *
	 * */
	uint32_t temp_chain[3];
	static uint8_t stream_data[20]={0};

	temp_chain[0]=adc_val[0]<<20 | adc_val[1]<<8 |adc_val[2]>>4;
 800087a:	4b43      	ldr	r3, [pc, #268]	; (8000988 <stream_send+0x118>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	051a      	lsls	r2, r3, #20
 8000880:	4b41      	ldr	r3, [pc, #260]	; (8000988 <stream_send+0x118>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	431a      	orrs	r2, r3
 8000888:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <stream_send+0x118>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	091b      	lsrs	r3, r3, #4
 800088e:	4313      	orrs	r3, r2
 8000890:	60bb      	str	r3, [r7, #8]
	temp_chain[1]=adc_val[2]<<28 | adc_val[3]<<16 |adc_val[4]<<4 |adc_val[5]>>8;
 8000892:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <stream_send+0x118>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	071a      	lsls	r2, r3, #28
 8000898:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <stream_send+0x118>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	041b      	lsls	r3, r3, #16
 800089e:	431a      	orrs	r2, r3
 80008a0:	4b39      	ldr	r3, [pc, #228]	; (8000988 <stream_send+0x118>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	431a      	orrs	r2, r3
 80008a8:	4b37      	ldr	r3, [pc, #220]	; (8000988 <stream_send+0x118>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	4313      	orrs	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
	temp_chain[2]=adc_val[5]<<24 | adc_val[6]<<12 |adc_val[7];
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <stream_send+0x118>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	061a      	lsls	r2, r3, #24
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <stream_send+0x118>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	031b      	lsls	r3, r3, #12
 80008be:	431a      	orrs	r2, r3
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <stream_send+0x118>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]


	stream_data[0]= 0x1B;
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <stream_send+0x11c>)
 80008ca:	221b      	movs	r2, #27
 80008cc:	701a      	strb	r2, [r3, #0]
	stream_data[1]= stream_counter;
 80008ce:	4a2f      	ldr	r2, [pc, #188]	; (800098c <stream_send+0x11c>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	7053      	strb	r3, [r2, #1]
	  // Iniciar desde la posición 2 de la cadena
	    int j = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]

	    // Copiar los datos en la cadena en orden big-endian
	    for (int i = 0; i < 3; i++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	e01b      	b.n	8000916 <stream_send+0xa6>
	        for (int k = 3; k >= 0; k--) {
 80008de:	2303      	movs	r3, #3
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e012      	b.n	800090a <stream_send+0x9a>
	            stream_data[j++] = (temp_chain[i] >> (k * 8)) & 0xFF;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	3320      	adds	r3, #32
 80008ea:	443b      	add	r3, r7
 80008ec:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	fa22 f103 	lsr.w	r1, r2, r3
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	61fa      	str	r2, [r7, #28]
 80008fe:	b2c9      	uxtb	r1, r1
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <stream_send+0x11c>)
 8000902:	54d1      	strb	r1, [r2, r3]
	        for (int k = 3; k >= 0; k--) {
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3b01      	subs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dae9      	bge.n	80008e4 <stream_send+0x74>
	    for (int i = 0; i < 3; i++) {
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	3301      	adds	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	2b02      	cmp	r3, #2
 800091a:	dde0      	ble.n	80008de <stream_send+0x6e>
	        }
	    }

	stream_data[14]=digital_In;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <stream_send+0x120>)
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <stream_send+0x11c>)
 8000922:	739a      	strb	r2, [r3, #14]
	stream_data[15]=digital_Out;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <stream_send+0x124>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <stream_send+0x11c>)
 800092a:	73da      	strb	r2, [r3, #15]

	stream_data[16] = (dac_val[0] >> 4) & 0xFF; // Obtén los bits 11-4
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <stream_send+0x128>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	091b      	lsrs	r3, r3, #4
 8000932:	b29b      	uxth	r3, r3
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <stream_send+0x11c>)
 8000938:	741a      	strb	r2, [r3, #16]
	stream_data[17]= ((dac_val[0] & 0xF) << 4) | ((dac_val[1] >> 8) & 0xF); // Combina bits 3-0 de variable1 con bits 11-8 de variable2
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <stream_send+0x128>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	b25a      	sxtb	r2, r3
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <stream_send+0x128>)
 8000944:	885b      	ldrh	r3, [r3, #2]
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	b29b      	uxth	r3, r3
 800094a:	b25b      	sxtb	r3, r3
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	b25b      	sxtb	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b25b      	sxtb	r3, r3
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <stream_send+0x11c>)
 800095a:	745a      	strb	r2, [r3, #17]
	stream_data[18]= dac_val[1] & 0xFF; // Obtén los bits 7-0 de variable2
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <stream_send+0x128>)
 800095e:	885b      	ldrh	r3, [r3, #2]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <stream_send+0x11c>)
 8000964:	749a      	strb	r2, [r3, #18]
    stream_data[19]=calcular_crc8(stream_data,19);
 8000966:	2113      	movs	r1, #19
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <stream_send+0x11c>)
 800096a:	f000 f819 	bl	80009a0 <calcular_crc8>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <stream_send+0x11c>)
 8000974:	74da      	strb	r2, [r3, #19]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)stream_data, sizeof (stream_data));
 8000976:	2214      	movs	r2, #20
 8000978:	4904      	ldr	r1, [pc, #16]	; (800098c <stream_send+0x11c>)
 800097a:	4808      	ldr	r0, [pc, #32]	; (800099c <stream_send+0x12c>)
 800097c:	f003 fff4 	bl	8004968 <HAL_UART_Transmit_DMA>
}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200001a4 	.word	0x200001a4
 800098c:	200001d4 	.word	0x200001d4
 8000990:	200001c8 	.word	0x200001c8
 8000994:	200001c9 	.word	0x200001c9
 8000998:	200001c4 	.word	0x200001c4
 800099c:	200000d8 	.word	0x200000d8

080009a0 <calcular_crc8>:





uint8_t  calcular_crc8(uint8_t *cadena, uint8_t longitud) {
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
    // Polinomio generador CRC-8 (0x07)
    uint8_t polinomio_generador = 0x07;
 80009ac:	2307      	movs	r3, #7
 80009ae:	733b      	strb	r3, [r7, #12]

    // Inicializa el registro CRC en cero
    uint8_t registro_crc = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < longitud; i++) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	73bb      	strb	r3, [r7, #14]
 80009b8:	e022      	b.n	8000a00 <calcular_crc8+0x60>

        registro_crc ^= cadena[i];
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	4053      	eors	r3, r2
 80009c6:	73fb      	strb	r3, [r7, #15]

        for (uint8_t j = 0; j < 8; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	737b      	strb	r3, [r7, #13]
 80009cc:	e012      	b.n	80009f4 <calcular_crc8+0x54>

            if (registro_crc & 0x80) {
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da08      	bge.n	80009e8 <calcular_crc8+0x48>
                registro_crc = (registro_crc << 1) ^ polinomio_generador;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	b25a      	sxtb	r2, r3
 80009dc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80009e0:	4053      	eors	r3, r2
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e002      	b.n	80009ee <calcular_crc8+0x4e>

            } else {
                registro_crc <<= 1;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 80009ee:	7b7b      	ldrb	r3, [r7, #13]
 80009f0:	3301      	adds	r3, #1
 80009f2:	737b      	strb	r3, [r7, #13]
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	d9e9      	bls.n	80009ce <calcular_crc8+0x2e>
    for (uint8_t i = 0; i < longitud; i++) {
 80009fa:	7bbb      	ldrb	r3, [r7, #14]
 80009fc:	3301      	adds	r3, #1
 80009fe:	73bb      	strb	r3, [r7, #14]
 8000a00:	7bba      	ldrb	r2, [r7, #14]
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d3d8      	bcc.n	80009ba <calcular_crc8+0x1a>

            }
        }
    }

    return registro_crc;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <HAL_UART_RxCpltCallback>:



/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_RxCpltCallback+0x6c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d128      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x64>
  {

	  digital_Out=uart_rx_buffer[2];
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_UART_RxCpltCallback+0x70>)
 8000a2c:	789a      	ldrb	r2, [r3, #2]
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_UART_RxCpltCallback+0x74>)
 8000a30:	701a      	strb	r2, [r3, #0]
	  dac_val[0] = (uart_rx_buffer[3] << 4) | ((uart_rx_buffer[4]>> 4) & 0x0F); // Combina Byte1 y Byte5
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_UART_RxCpltCallback+0x70>)
 8000a34:	78db      	ldrb	r3, [r3, #3]
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_UART_RxCpltCallback+0x70>)
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	f003 030f 	and.w	r3, r3, #15
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_UART_RxCpltCallback+0x78>)
 8000a52:	801a      	strh	r2, [r3, #0]

	    // Extrae los bits de Char2 y Char3 para formar otro valor de 16 bits
	   dac_val[1] = ((uart_rx_buffer[4] & 0x0F) << 8) | uart_rx_buffer[5];
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_UART_RxCpltCallback+0x70>)
 8000a56:	791b      	ldrb	r3, [r3, #4]
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_UART_RxCpltCallback+0x70>)
 8000a64:	795b      	ldrb	r3, [r3, #5]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_UART_RxCpltCallback+0x78>)
 8000a70:	805a      	strh	r2, [r3, #2]
    /* Receive one byte in interrupt mode */
	  HAL_UART_Receive_IT(&huart2,uart_rx_buffer, rx_buffer_size);
 8000a72:	2206      	movs	r2, #6
 8000a74:	4904      	ldr	r1, [pc, #16]	; (8000a88 <HAL_UART_RxCpltCallback+0x70>)
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <HAL_UART_RxCpltCallback+0x7c>)
 8000a78:	f003 ff32 	bl	80048e0 <HAL_UART_Receive_IT>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40004400 	.word	0x40004400
 8000a88:	200001cc 	.word	0x200001cc
 8000a8c:	200001c9 	.word	0x200001c9
 8000a90:	200001c4 	.word	0x200001c4
 8000a94:	200000d8 	.word	0x200000d8

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x44>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ada:	2007      	movs	r0, #7
 8000adc:	f001 fba4 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b0c:	d124      	bne.n	8000b58 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_ADC_MspInit+0x74>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <HAL_ADC_MspInit+0x74>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6153      	str	r3, [r2, #20]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_ADC_MspInit+0x74>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_ADC_MspInit+0x74>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <HAL_ADC_MspInit+0x74>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_ADC_MspInit+0x74>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b42:	2303      	movs	r3, #3
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f001 fe42 	bl	80027dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <HAL_DAC_MspInit+0x74>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d124      	bne.n	8000bd0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC2_MspInit 0 */

  /* USER CODE END DAC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_DAC_MspInit+0x78>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_DAC_MspInit+0x78>)
 8000b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_DAC_MspInit+0x78>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_DAC_MspInit+0x78>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_DAC_MspInit+0x78>)
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	6153      	str	r3, [r2, #20]
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_DAC_MspInit+0x78>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f001 fe06 	bl	80027dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40009800 	.word	0x40009800
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_TIM_Base_MspInit+0x44>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d113      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	61d3      	str	r3, [r2, #28]
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2036      	movs	r0, #54	; 0x36
 8000c10:	f001 fb15 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000c14:	2036      	movs	r0, #54	; 0x36
 8000c16:	f001 fb2e 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40001000 	.word	0x40001000
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <HAL_UART_MspInit+0xd8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d156      	bne.n	8000cfc <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <HAL_UART_MspInit+0xdc>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <HAL_UART_MspInit+0xdc>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	61d3      	str	r3, [r2, #28]
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <HAL_UART_MspInit+0xdc>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <HAL_UART_MspInit+0xdc>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <HAL_UART_MspInit+0xdc>)
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	6153      	str	r3, [r2, #20]
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_UART_MspInit+0xdc>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f001 fd9e 	bl	80027dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000ca4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000ca8:	2210      	movs	r2, #16
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cd0:	480e      	ldr	r0, [pc, #56]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000cd2:	f001 fb75 	bl	80023c0 <HAL_DMA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000cdc:	f7ff fedc 	bl	8000a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000ce4:	671a      	str	r2, [r3, #112]	; 0x70
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2026      	movs	r0, #38	; 0x26
 8000cf2:	f001 faa4 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf6:	2026      	movs	r0, #38	; 0x26
 8000cf8:	f001 fabd 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	20000160 	.word	0x20000160
 8000d10:	40020080 	.word	0x40020080

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

	//HAL_UART_Transmit (&huart2, data, sizeof (data), 24);
	// HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"1-2-3-4-5-6-7-8-9-10-11-12\n", strlen("1-2-3-4-5-6-7-8-9-10-11-12\n"));
//	 HAL_UART_Transmit_DMA(&huart2, buffer,8);
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f912 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

 // HAL_GPIO_WritePin(GPIOA, LD2_Pin, 1);
  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <DMA1_Channel7_IRQHandler+0x10>)
 8000d6e:	f001 fc44 	bl	80025fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000160 	.word	0x20000160

08000d7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <USART2_IRQHandler+0x10>)
 8000d82:	f003 fe6d 	bl	8004a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000d8 	.word	0x200000d8

08000d90 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <TIM6_DAC1_IRQHandler+0x10>)
 8000d96:	f003 fb09 	bl	80043ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000008c 	.word	0x2000008c

08000da4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <SystemCoreClockUpdate+0xcc>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d011      	beq.n	8000e12 <SystemCoreClockUpdate+0x4a>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d836      	bhi.n	8000e62 <SystemCoreClockUpdate+0x9a>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <SystemCoreClockUpdate+0x3a>
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d004      	beq.n	8000e0a <SystemCoreClockUpdate+0x42>
 8000e00:	e02f      	b.n	8000e62 <SystemCoreClockUpdate+0x9a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <SystemCoreClockUpdate+0xd0>)
 8000e04:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <SystemCoreClockUpdate+0xd4>)
 8000e06:	601a      	str	r2, [r3, #0]
      break;
 8000e08:	e02f      	b.n	8000e6a <SystemCoreClockUpdate+0xa2>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <SystemCoreClockUpdate+0xd0>)
 8000e0c:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <SystemCoreClockUpdate+0xd4>)
 8000e0e:	601a      	str	r2, [r3, #0]
      break;
 8000e10:	e02b      	b.n	8000e6a <SystemCoreClockUpdate+0xa2>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <SystemCoreClockUpdate+0xcc>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000e1a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <SystemCoreClockUpdate+0xcc>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e24:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	0c9b      	lsrs	r3, r3, #18
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
      }
#else      
      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d106      	bne.n	8000e42 <SystemCoreClockUpdate+0x7a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4a1a      	ldr	r2, [pc, #104]	; (8000ea0 <SystemCoreClockUpdate+0xd8>)
 8000e38:	fb02 f303 	mul.w	r3, r2, r3
 8000e3c:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <SystemCoreClockUpdate+0xd0>)
 8000e3e:	6013      	str	r3, [r2, #0]
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
      }
#endif /* STM32F302xE || STM32F303xE || STM32F398xx */
      break;
 8000e40:	e013      	b.n	8000e6a <SystemCoreClockUpdate+0xa2>
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <SystemCoreClockUpdate+0xcc>)
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 8000e4e:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <SystemCoreClockUpdate+0xd4>)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	fb02 f303 	mul.w	r3, r2, r3
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <SystemCoreClockUpdate+0xd0>)
 8000e5e:	6013      	str	r3, [r2, #0]
      break;
 8000e60:	e003      	b.n	8000e6a <SystemCoreClockUpdate+0xa2>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <SystemCoreClockUpdate+0xd0>)
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <SystemCoreClockUpdate+0xd4>)
 8000e66:	601a      	str	r2, [r3, #0]
      break;
 8000e68:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <SystemCoreClockUpdate+0xcc>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <SystemCoreClockUpdate+0xdc>)
 8000e76:	5cd3      	ldrb	r3, [r2, r3]
 8000e78:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <SystemCoreClockUpdate+0xd0>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <SystemCoreClockUpdate+0xd0>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	007a1200 	.word	0x007a1200
 8000ea0:	003d0900 	.word	0x003d0900
 8000ea4:	08005e74 	.word	0x08005e74

08000ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eac:	f7ff ff7a 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <LoopForever+0xe>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	; (8000ef4 <LoopForever+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f004 ff95 	bl	8005e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eda:	f7ff f975 	bl	80001c8 <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eec:	08005eb4 	.word	0x08005eb4
  ldr r2, =_sbss
 8000ef0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ef4:	200001ec 	.word	0x200001ec

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x28>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f001 f98b 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fdc4 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 f9a3 	bl	8002292 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f001 f96b 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	200001e8 	.word	0x200001e8

08000fb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200001e8 	.word	0x200001e8

08000fc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09a      	sub	sp, #104	; 0x68
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e172      	b.n	80012ce <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d176      	bne.n	80010e8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d152      	bne.n	80010a8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fd65 	bl	8000aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d13b      	bne.n	80010a8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 ff0d 	bl	8001e50 <ADC_Disable>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d12f      	bne.n	80010a8 <HAL_ADC_Init+0xe0>
 8001048:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800104c:	2b00      	cmp	r3, #0
 800104e:	d12b      	bne.n	80010a8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	f043 0202 	orr.w	r2, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001072:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001082:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001084:	4b94      	ldr	r3, [pc, #592]	; (80012d8 <HAL_ADC_Init+0x310>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a94      	ldr	r2, [pc, #592]	; (80012dc <HAL_ADC_Init+0x314>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9a      	lsrs	r2, r3, #18
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800109a:	e002      	b.n	80010a2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	3b01      	subs	r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f9      	bne.n	800109c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010c4:	d110      	bne.n	80010e8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f023 0312 	bic.w	r3, r3, #18
 80010ce:	f043 0210 	orr.w	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f040 80df 	bne.w	80012b4 <HAL_ADC_Init+0x2ec>
 80010f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 80da 	bne.w	80012b4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 80d2 	bne.w	80012b4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001118:	f043 0202 	orr.w	r2, r3, #2
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001120:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_ADC_Init+0x318>)
 8001122:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800112c:	d102      	bne.n	8001134 <HAL_ADC_Init+0x16c>
 800112e:	4b6d      	ldr	r3, [pc, #436]	; (80012e4 <HAL_ADC_Init+0x31c>)
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e002      	b.n	800113a <HAL_ADC_Init+0x172>
 8001134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001138:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_ADC_Init+0x192>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_ADC_Init+0x192>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_ADC_Init+0x194>
 800115a:	2300      	movs	r3, #0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d11c      	bne.n	800119a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001160:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d107      	bne.n	8001182 <HAL_ADC_Init+0x1ba>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_ADC_Init+0x1ba>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_ADC_Init+0x1bc>
 8001182:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001184:	2b00      	cmp	r3, #0
 8001186:	d108      	bne.n	800119a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	431a      	orrs	r2, r3
 8001196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001198:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7e5b      	ldrb	r3, [r3, #25]
 800119e:	035b      	lsls	r3, r3, #13
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011a4:	2a01      	cmp	r2, #1
 80011a6:	d002      	beq.n	80011ae <HAL_ADC_Init+0x1e6>
 80011a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ac:	e000      	b.n	80011b0 <HAL_ADC_Init+0x1e8>
 80011ae:	2200      	movs	r2, #0
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4313      	orrs	r3, r2
 80011be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011c0:	4313      	orrs	r3, r2
 80011c2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d11b      	bne.n	8001206 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7e5b      	ldrb	r3, [r3, #25]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	3b01      	subs	r3, #1
 80011dc:	045a      	lsls	r2, r3, #17
 80011de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011e0:	4313      	orrs	r3, r2
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	663b      	str	r3, [r7, #96]	; 0x60
 80011e8:	e00d      	b.n	8001206 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011f2:	f043 0220 	orr.w	r2, r3, #32
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f043 0201 	orr.w	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	2b01      	cmp	r3, #1
 800120c:	d007      	beq.n	800121e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	4313      	orrs	r3, r2
 8001218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800121a:	4313      	orrs	r3, r2
 800121c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b00      	cmp	r3, #0
 800122a:	d114      	bne.n	8001256 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800123a:	f023 0302 	bic.w	r3, r3, #2
 800123e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e1b      	ldrb	r3, [r3, #24]
 8001244:	039a      	lsls	r2, r3, #14
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4313      	orrs	r3, r2
 8001250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001252:	4313      	orrs	r3, r2
 8001254:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_ADC_Init+0x320>)
 800125e:	4013      	ands	r3, r2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001266:	430b      	orrs	r3, r1
 8001268:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10c      	bne.n	800128c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f023 010f 	bic.w	r1, r3, #15
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
 800128a:	e007      	b.n	800129c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 020f 	bic.w	r2, r2, #15
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f023 0303 	bic.w	r3, r3, #3
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
 80012b2:	e00a      	b.n	80012ca <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f023 0312 	bic.w	r3, r3, #18
 80012bc:	f043 0210 	orr.w	r2, r3, #16
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80012ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3768      	adds	r7, #104	; 0x68
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	50000300 	.word	0x50000300
 80012e4:	50000100 	.word	0x50000100
 80012e8:	fff0c007 	.word	0xfff0c007

080012ec <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 809c 	bne.w	8001440 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Start+0x2a>
 8001312:	2302      	movs	r3, #2
 8001314:	e097      	b.n	8001446 <HAL_ADC_Start+0x15a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fd32 	bl	8001d88 <ADC_Enable>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 8083 	bne.w	8001436 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <HAL_ADC_Start+0x164>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <HAL_ADC_Start+0x6e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001358:	d115      	bne.n	8001386 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d027      	beq.n	80013c4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800137c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001384:	e01e      	b.n	80013c4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800139a:	d004      	beq.n	80013a6 <HAL_ADC_Start+0xba>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <HAL_ADC_Start+0x168>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d10e      	bne.n	80013c4 <HAL_ADC_Start+0xd8>
 80013a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013d0:	d106      	bne.n	80013e0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f023 0206 	bic.w	r2, r3, #6
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
 80013de:	e002      	b.n	80013e6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	221c      	movs	r2, #28
 80013f4:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_ADC_Start+0x164>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d010      	beq.n	8001424 <HAL_ADC_Start+0x138>
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_ADC_Start+0x164>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	2b05      	cmp	r3, #5
 800140c:	d00a      	beq.n	8001424 <HAL_ADC_Start+0x138>
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_ADC_Start+0x164>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	2b09      	cmp	r3, #9
 8001418:	d004      	beq.n	8001424 <HAL_ADC_Start+0x138>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001422:	d10f      	bne.n	8001444 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0204 	orr.w	r2, r2, #4
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	e006      	b.n	8001444 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800143e:	e001      	b.n	8001444 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001440:	2302      	movs	r3, #2
 8001442:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	50000300 	.word	0x50000300
 8001454:	50000100 	.word	0x50000100

08001458 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Stop+0x1a>
 800146e:	2302      	movs	r3, #2
 8001470:	e023      	b.n	80014ba <HAL_ADC_Stop+0x62>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800147a:	216c      	movs	r1, #108	; 0x6c
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fd4d 	bl	8001f1c <ADC_ConversionStop>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d111      	bne.n	80014b0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fcdf 	bl	8001e50 <ADC_Disable>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d102      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80014da:	2308      	movs	r3, #8
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e02e      	b.n	800153e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e0:	4b5e      	ldr	r3, [pc, #376]	; (800165c <HAL_ADC_PollForConversion+0x198>)
 80014e2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d112      	bne.n	8001516 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d11d      	bne.n	800153a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f043 0220 	orr.w	r2, r3, #32
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e09d      	b.n	8001652 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e08b      	b.n	8001652 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800153a:	230c      	movs	r3, #12
 800153c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_ADC_PollForConversion+0x198>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_ADC_PollForConversion+0x90>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001552:	d104      	bne.n	800155e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	e003      	b.n	8001566 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800155e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001566:	f7ff fd23 	bl	8000fb0 <HAL_GetTick>
 800156a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800156c:	e021      	b.n	80015b2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d01d      	beq.n	80015b2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_ADC_PollForConversion+0xc8>
 800157c:	f7ff fd18 	bl	8000fb0 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d212      	bcs.n	80015b2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10b      	bne.n	80015b2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f043 0204 	orr.w	r2, r3, #4
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e04f      	b.n	8001652 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0d6      	beq.n	800156e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d131      	bne.n	800163e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d12c      	bne.n	800163e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d125      	bne.n	800163e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d112      	bne.n	8001626 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d112      	bne.n	800163e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
 8001624:	e00b      	b.n	800163e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f043 0220 	orr.w	r2, r3, #32
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	50000300 	.word	0x50000300

08001660 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800167c:	b480      	push	{r7}
 800167e:	b09b      	sub	sp, #108	; 0x6c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADC_ConfigChannel+0x22>
 800169a:	2302      	movs	r3, #2
 800169c:	e2a4      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x56c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 8288 	bne.w	8001bc6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d81c      	bhi.n	80016f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	461a      	mov	r2, r3
 80016d2:	231f      	movs	r3, #31
 80016d4:	4093      	lsls	r3, r2
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4019      	ands	r1, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa00 f203 	lsl.w	r2, r0, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30
 80016f6:	e063      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d81e      	bhi.n	800173e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3b1e      	subs	r3, #30
 8001714:	221f      	movs	r2, #31
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	4019      	ands	r1, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	3b1e      	subs	r3, #30
 8001730:	fa00 f203 	lsl.w	r2, r0, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
 800173c:	e040      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b0e      	cmp	r3, #14
 8001744:	d81e      	bhi.n	8001784 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	3b3c      	subs	r3, #60	; 0x3c
 800175a:	221f      	movs	r2, #31
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	4019      	ands	r1, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	3b3c      	subs	r3, #60	; 0x3c
 8001776:	fa00 f203 	lsl.w	r2, r0, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
 8001782:	e01d      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	3b5a      	subs	r3, #90	; 0x5a
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	4019      	ands	r1, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	3b5a      	subs	r3, #90	; 0x5a
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80e5 	bne.w	800199a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d91c      	bls.n	8001812 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6999      	ldr	r1, [r3, #24]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	3b1e      	subs	r3, #30
 80017ea:	2207      	movs	r2, #7
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4019      	ands	r1, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6898      	ldr	r0, [r3, #8]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	3b1e      	subs	r3, #30
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	619a      	str	r2, [r3, #24]
 8001810:	e019      	b.n	8001846 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6959      	ldr	r1, [r3, #20]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	2207      	movs	r2, #7
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	4019      	ands	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6898      	ldr	r0, [r3, #8]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	fa00 f203 	lsl.w	r2, r0, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	3b01      	subs	r3, #1
 8001864:	2b03      	cmp	r3, #3
 8001866:	d84f      	bhi.n	8001908 <HAL_ADC_ConfigChannel+0x28c>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_ADC_ConfigChannel+0x1f4>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001881 	.word	0x08001881
 8001874:	080018a3 	.word	0x080018a3
 8001878:	080018c5 	.word	0x080018c5
 800187c:	080018e7 	.word	0x080018e7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001886:	4b94      	ldr	r3, [pc, #592]	; (8001ad8 <HAL_ADC_ConfigChannel+0x45c>)
 8001888:	4013      	ands	r3, r2
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	0691      	lsls	r1, r2, #26
 8001890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001892:	430a      	orrs	r2, r1
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800189e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018a0:	e07e      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018a8:	4b8b      	ldr	r3, [pc, #556]	; (8001ad8 <HAL_ADC_ConfigChannel+0x45c>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	0691      	lsls	r1, r2, #26
 80018b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018b4:	430a      	orrs	r2, r1
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018c0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018c2:	e06d      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018ca:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <HAL_ADC_ConfigChannel+0x45c>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	0691      	lsls	r1, r2, #26
 80018d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018d6:	430a      	orrs	r2, r1
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018e2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018e4:	e05c      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018ec:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <HAL_ADC_ConfigChannel+0x45c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	0691      	lsls	r1, r2, #26
 80018f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018f8:	430a      	orrs	r2, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001904:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001906:	e04b      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800192a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	069b      	lsls	r3, r3, #26
 800193c:	429a      	cmp	r2, r3
 800193e:	d107      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800194e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	069b      	lsls	r3, r3, #26
 8001960:	429a      	cmp	r2, r3
 8001962:	d107      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001972:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800197a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	069b      	lsls	r3, r3, #26
 8001984:	429a      	cmp	r2, r3
 8001986:	d10a      	bne.n	800199e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001996:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001998:	e001      	b.n	800199e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800199a:	bf00      	nop
 800199c:	e000      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x324>
      break;
 800199e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x344>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x344>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x346>
 80019c0:	2300      	movs	r3, #0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 810a 	bne.w	8001bdc <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d00f      	beq.n	80019f0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	400a      	ands	r2, r1
 80019ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019ee:	e049      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2201      	movs	r2, #1
 80019fe:	409a      	lsls	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b09      	cmp	r3, #9
 8001a10:	d91c      	bls.n	8001a4c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6999      	ldr	r1, [r3, #24]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	3b1b      	subs	r3, #27
 8001a24:	2207      	movs	r2, #7
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4019      	ands	r1, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6898      	ldr	r0, [r3, #8]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b1b      	subs	r3, #27
 8001a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	619a      	str	r2, [r3, #24]
 8001a4a:	e01b      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6959      	ldr	r1, [r3, #20]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2207      	movs	r2, #7
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4019      	ands	r1, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6898      	ldr	r0, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_ADC_ConfigChannel+0x460>)
 8001a86:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d015      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001aa0:	2b11      	cmp	r3, #17
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ab4:	2b12      	cmp	r3, #18
 8001ab6:	f040 8091 	bne.w	8001bdc <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 808a 	bne.w	8001bdc <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad0:	d108      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x468>
 8001ad2:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_ADC_ConfigChannel+0x464>)
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e008      	b.n	8001aea <HAL_ADC_ConfigChannel+0x46e>
 8001ad8:	83fff000 	.word	0x83fff000
 8001adc:	50000300 	.word	0x50000300
 8001ae0:	50000100 	.word	0x50000100
 8001ae4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ae8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d108      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x48e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x48e>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x490>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d150      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d010      	beq.n	8001b38 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x4b6>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x4b6>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x4b8>
 8001b32:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d13c      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d11d      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x500>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b48:	d118      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b56:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_ADC_ConfigChannel+0x578>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <HAL_ADC_ConfigChannel+0x57c>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	0c9a      	lsrs	r2, r3, #18
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b6c:	e002      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f9      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b7a:	e02e      	b.n	8001bda <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b11      	cmp	r3, #17
 8001b82:	d10b      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x520>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b8c:	d106      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b98:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b9a:	e01e      	b.n	8001bda <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b12      	cmp	r3, #18
 8001ba2:	d11a      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bb0:	e013      	b.n	8001bda <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001bc4:	e00a      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f043 0220 	orr.w	r2, r3, #32
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001bd8:	e000      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bda:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001be4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	376c      	adds	r7, #108	; 0x6c
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b099      	sub	sp, #100	; 0x64
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c14:	d102      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c16:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	e002      	b.n	8001c22 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001c1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c20:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0a2      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e09b      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d17f      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d179      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5c:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001c5e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d040      	beq.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c7a:	035b      	lsls	r3, r3, #13
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c82:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d15c      	bne.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001cc6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d14b      	bne.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cd4:	f023 030f 	bic.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6811      	ldr	r1, [r2, #0]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	6892      	ldr	r2, [r2, #8]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ce6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ce8:	e03c      	b.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d108      	bne.n	8001d16 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001d16:	2300      	movs	r3, #0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d123      	bne.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001d38:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d112      	bne.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d46:	f023 030f 	bic.w	r3, r3, #15
 8001d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d4c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d4e:	e009      	b.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d62:	e000      	b.n	8001d66 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d64:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d72:	4618      	mov	r0, r3
 8001d74:	3764      	adds	r7, #100	; 0x64
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	50000100 	.word	0x50000100
 8001d84:	50000300 	.word	0x50000300

08001d88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d108      	bne.n	8001db4 <ADC_Enable+0x2c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <ADC_Enable+0x2c>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <ADC_Enable+0x2e>
 8001db4:	2300      	movs	r3, #0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d143      	bne.n	8001e42 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <ADC_Enable+0xc4>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f043 0210 	orr.w	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e02f      	b.n	8001e44 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001df4:	f7ff f8dc 	bl	8000fb0 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dfa:	e01b      	b.n	8001e34 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dfc:	f7ff f8d8 	bl	8000fb0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d914      	bls.n	8001e34 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d00d      	beq.n	8001e34 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f043 0210 	orr.w	r2, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e007      	b.n	8001e44 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d1dc      	bne.n	8001dfc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	8000003f 	.word	0x8000003f

08001e50 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d108      	bne.n	8001e7c <ADC_Disable+0x2c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <ADC_Disable+0x2c>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <ADC_Disable+0x2e>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d047      	beq.n	8001f12 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030d 	and.w	r3, r3, #13
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10f      	bne.n	8001eb0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0202 	orr.w	r2, r2, #2
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff f882 	bl	8000fb0 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eae:	e029      	b.n	8001f04 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f043 0210 	orr.w	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e023      	b.n	8001f14 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ecc:	f7ff f870 	bl	8000fb0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d914      	bls.n	8001f04 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10d      	bne.n	8001f04 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f043 0210 	orr.w	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e007      	b.n	8001f14 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d0dc      	beq.n	8001ecc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 809b 	beq.w	8002078 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f50:	d12a      	bne.n	8001fa8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d126      	bne.n	8001fa8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d122      	bne.n	8001fa8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001f62:	230c      	movs	r3, #12
 8001f64:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f66:	e014      	b.n	8001f92 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4a46      	ldr	r2, [pc, #280]	; (8002084 <ADC_ConversionStop+0x168>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d90d      	bls.n	8001f8c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0210 	orr.w	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e076      	b.n	800207a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d1e3      	bne.n	8001f68 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b60      	cmp	r3, #96	; 0x60
 8001fac:	d015      	beq.n	8001fda <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d10e      	bne.n	8001fda <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d015      	beq.n	800200c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d10e      	bne.n	800200c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b60      	cmp	r3, #96	; 0x60
 8002010:	d005      	beq.n	800201e <ADC_ConversionStop+0x102>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b6c      	cmp	r3, #108	; 0x6c
 8002016:	d105      	bne.n	8002024 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002018:	230c      	movs	r3, #12
 800201a:	617b      	str	r3, [r7, #20]
        break;
 800201c:	e005      	b.n	800202a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800201e:	2308      	movs	r3, #8
 8002020:	617b      	str	r3, [r7, #20]
        break;
 8002022:	e002      	b.n	800202a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002024:	2304      	movs	r3, #4
 8002026:	617b      	str	r3, [r7, #20]
        break;
 8002028:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800202a:	f7fe ffc1 	bl	8000fb0 <HAL_GetTick>
 800202e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002030:	e01b      	b.n	800206a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002032:	f7fe ffbd 	bl	8000fb0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b0b      	cmp	r3, #11
 800203e:	d914      	bls.n	800206a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00d      	beq.n	800206a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e007      	b.n	800207a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1dc      	bne.n	8002032 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	000993ff 	.word	0x000993ff

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff29 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff3e 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff8e 	bl	800217c <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff31 	bl	80020ec <__NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffa2 	bl	80021e4 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e014      	b.n	80022e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	791b      	ldrb	r3, [r3, #4]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7fe fc49 	bl	8000b64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	795b      	ldrb	r3, [r3, #5]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_DAC_ConfigChannel+0x20>
 800230c:	2302      	movs	r3, #2
 800230e:	e04e      	b.n	80023ae <HAL_DAC_ConfigChannel+0xbe>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2202      	movs	r2, #2
 800231a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a24      	ldr	r2, [pc, #144]	; (80023bc <HAL_DAC_ConfigChannel+0xcc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d112      	bne.n	8002354 <HAL_DAC_ConfigChannel+0x64>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10f      	bne.n	8002354 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002334:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4013      	ands	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e00e      	b.n	8002372 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002354:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4013      	ands	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6819      	ldr	r1, [r3, #0]
 800238e:	22c0      	movs	r2, #192	; 0xc0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	400a      	ands	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40007400 	.word	0x40007400

080023c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e037      	b.n	8002446 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9b7 	bl	800279c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}  
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_DMA_Start_IT+0x20>
 800246a:	2302      	movs	r3, #2
 800246c:	e04a      	b.n	8002504 <HAL_DMA_Start_IT+0xb6>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800247c:	2b01      	cmp	r3, #1
 800247e:	d13a      	bne.n	80024f6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f94b 	bl	8002740 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 020e 	orr.w	r2, r2, #14
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e00f      	b.n	80024e4 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 020a 	orr.w	r2, r2, #10
 80024d2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0204 	bic.w	r2, r2, #4
 80024e2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e005      	b.n	8002502 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002502:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800251a:	2b02      	cmp	r3, #2
 800251c:	d008      	beq.n	8002530 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2204      	movs	r2, #4
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e020      	b.n	8002572 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 020e 	bic.w	r2, r2, #14
 800253e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f202 	lsl.w	r2, r1, r2
 800255e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002590:	2b02      	cmp	r3, #2
 8002592:	d005      	beq.n	80025a0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2204      	movs	r2, #4
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e027      	b.n	80025f0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 020e 	bic.w	r2, r2, #14
 80025ae:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f202 	lsl.w	r2, r1, r2
 80025ce:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
    } 
  }
  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2204      	movs	r2, #4
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d024      	beq.n	800266c <HAL_DMA_IRQHandler+0x72>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01f      	beq.n	800266c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	2104      	movs	r1, #4
 8002654:	fa01 f202 	lsl.w	r2, r1, r2
 8002658:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d06a      	beq.n	8002738 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800266a:	e065      	b.n	8002738 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	2202      	movs	r2, #2
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02c      	beq.n	80026d6 <HAL_DMA_IRQHandler+0xdc>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d027      	beq.n	80026d6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020a 	bic.w	r2, r2, #10
 80026a2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	2102      	movs	r1, #2
 80026b6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ba:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d035      	beq.n	8002738 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80026d4:	e030      	b.n	8002738 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2208      	movs	r2, #8
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d028      	beq.n	8002738 <HAL_DMA_IRQHandler+0x13e>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d023      	beq.n	8002738 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 020e 	bic.w	r2, r2, #14
 80026fe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	2b00      	cmp	r3, #0
 800272c:	d004      	beq.n	8002738 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
    }
  }
}  
 8002736:	e7ff      	b.n	8002738 <HAL_DMA_IRQHandler+0x13e>
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d108      	bne.n	8002780 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800277e:	e007      	b.n	8002790 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	60da      	str	r2, [r3, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <DMA_CalcBaseAndBitshift+0x34>)
 80027ac:	4413      	add	r3, r2
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <DMA_CalcBaseAndBitshift+0x38>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <DMA_CalcBaseAndBitshift+0x3c>)
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	bffdfff8 	.word	0xbffdfff8
 80027d4:	cccccccd 	.word	0xcccccccd
 80027d8:	40020000 	.word	0x40020000

080027dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ea:	e14e      	b.n	8002a8a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2101      	movs	r1, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8140 	beq.w	8002a84 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d005      	beq.n	800281c <HAL_GPIO_Init+0x40>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d130      	bne.n	800287e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002852:	2201      	movs	r2, #1
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 0201 	and.w	r2, r3, #1
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b03      	cmp	r3, #3
 8002888:	d017      	beq.n	80028ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d123      	bne.n	800290e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	6939      	ldr	r1, [r7, #16]
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0203 	and.w	r2, r3, #3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 809a 	beq.w	8002a84 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002950:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <HAL_GPIO_Init+0x2cc>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a54      	ldr	r2, [pc, #336]	; (8002aa8 <HAL_GPIO_Init+0x2cc>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_GPIO_Init+0x2cc>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <HAL_GPIO_Init+0x2d0>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002992:	d013      	beq.n	80029bc <HAL_GPIO_Init+0x1e0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a46      	ldr	r2, [pc, #280]	; (8002ab0 <HAL_GPIO_Init+0x2d4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00d      	beq.n	80029b8 <HAL_GPIO_Init+0x1dc>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a45      	ldr	r2, [pc, #276]	; (8002ab4 <HAL_GPIO_Init+0x2d8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <HAL_GPIO_Init+0x1d8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a44      	ldr	r2, [pc, #272]	; (8002ab8 <HAL_GPIO_Init+0x2dc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_GPIO_Init+0x1d4>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e006      	b.n	80029be <HAL_GPIO_Init+0x1e2>
 80029b0:	2305      	movs	r3, #5
 80029b2:	e004      	b.n	80029be <HAL_GPIO_Init+0x1e2>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x1e2>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_Init+0x1e2>
 80029bc:	2300      	movs	r3, #0
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ce:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_GPIO_Init+0x2d0>)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a54:	4a19      	ldr	r2, [pc, #100]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a7e:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3301      	adds	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f aea9 	bne.w	80027ec <HAL_GPIO_Init+0x10>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	48000400 	.word	0x48000400
 8002ab4:	48000800 	.word	0x48000800
 8002ab8:	48000c00 	.word	0x48000c00
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002adc:	e002      	b.n	8002ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f001 b823 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 817d 	beq.w	8002e26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b2c:	4bbc      	ldr	r3, [pc, #752]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d00c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b38:	4bb9      	ldr	r3, [pc, #740]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d15c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x10e>
 8002b44:	4bb6      	ldr	r3, [pc, #728]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d155      	bne.n	8002bfe <HAL_RCC_OscConfig+0x10e>
 8002b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b56:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0x94>
 8002b7e:	4ba8      	ldr	r3, [pc, #672]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e015      	b.n	8002bb0 <HAL_RCC_OscConfig+0xc0>
 8002b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ba0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002bac:	4b9c      	ldr	r3, [pc, #624]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bb4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bb8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bbc:	fa92 f2a2 	rbit	r2, r2
 8002bc0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bc4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	f042 0220 	orr.w	r2, r2, #32
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f002 021f 	and.w	r2, r2, #31
 8002bd8:	2101      	movs	r1, #1
 8002bda:	fa01 f202 	lsl.w	r2, r1, r2
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 811f 	beq.w	8002e24 <HAL_RCC_OscConfig+0x334>
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 8116 	bne.w	8002e24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f000 bfaf 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x12e>
 8002c10:	4b83      	ldr	r3, [pc, #524]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a82      	ldr	r2, [pc, #520]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e036      	b.n	8002c8c <HAL_RCC_OscConfig+0x19c>
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x158>
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7b      	ldr	r2, [pc, #492]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b79      	ldr	r3, [pc, #484]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a78      	ldr	r2, [pc, #480]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e021      	b.n	8002c8c <HAL_RCC_OscConfig+0x19c>
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x184>
 8002c5a:	4b71      	ldr	r3, [pc, #452]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a70      	ldr	r2, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6d      	ldr	r2, [pc, #436]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0x19c>
 8002c74:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a69      	ldr	r2, [pc, #420]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a66      	ldr	r2, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c8c:	4b64      	ldr	r3, [pc, #400]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f023 020f 	bic.w	r2, r3, #15
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	495f      	ldr	r1, [pc, #380]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d059      	beq.n	8002d6a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe f97b 	bl	8000fb0 <HAL_GetTick>
 8002cba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f976 	bl	8000fb0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d902      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f000 bf43 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 8002cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cda:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002cea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_OscConfig+0x218>
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	e015      	b.n	8002d34 <HAL_RCC_OscConfig+0x244>
 8002d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d30:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d38:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f002 021f 	and.w	r2, r2, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ab      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x1d0>
 8002d68:	e05d      	b.n	8002e26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe f921 	bl	8000fb0 <HAL_GetTick>
 8002d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe f91c 	bl	8000fb0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d902      	bls.n	8002d8a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	f000 bee9 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 8002d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2cc>
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	e015      	b.n	8002de8 <HAL_RCC_OscConfig+0x2f8>
 8002dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002df0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002df4:	fa92 f2a2 	rbit	r2, r2
 8002df8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002dfc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e00:	fab2 f282 	clz	r2, r2
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	f002 021f 	and.w	r2, r2, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f202 	lsl.w	r2, r1, r2
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ab      	bne.n	8002d74 <HAL_RCC_OscConfig+0x284>
 8002e1c:	e003      	b.n	8002e26 <HAL_RCC_OscConfig+0x336>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 817d 	beq.w	8003136 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e3c:	4ba6      	ldr	r3, [pc, #664]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e48:	4ba3      	ldr	r3, [pc, #652]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d172      	bne.n	8002f3a <HAL_RCC_OscConfig+0x44a>
 8002e54:	4ba0      	ldr	r3, [pc, #640]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d16c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x44a>
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d102      	bne.n	8002e90 <HAL_RCC_OscConfig+0x3a0>
 8002e8a:	4b93      	ldr	r3, [pc, #588]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	e013      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3c8>
 8002e90:	2302      	movs	r3, #2
 8002e92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ea8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002eb4:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ebe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ec2:	fa92 f2a2 	rbit	r2, r2
 8002ec6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002eca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ece:	fab2 f282 	clz	r2, r2
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f042 0220 	orr.w	r2, r2, #32
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f002 021f 	and.w	r2, r2, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCC_OscConfig+0x410>
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d002      	beq.n	8002f00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f000 be2e 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f00:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	21f8      	movs	r1, #248	; 0xf8
 8002f16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f1e:	fa91 f1a1 	rbit	r1, r1
 8002f22:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f26:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f2a:	fab1 f181 	clz	r1, r1
 8002f2e:	b2c9      	uxtb	r1, r1
 8002f30:	408b      	lsls	r3, r1
 8002f32:	4969      	ldr	r1, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f38:	e0fd      	b.n	8003136 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8088 	beq.w	800305c <HAL_RCC_OscConfig+0x56c>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	2301      	movs	r3, #1
 8002f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe f81a 	bl	8000fb0 <HAL_GetTick>
 8002f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f82:	f7fe f815 	bl	8000fb0 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d902      	bls.n	8002f98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	f000 bde2 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002faa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d102      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4d8>
 8002fc2:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	e013      	b.n	8002ff0 <HAL_RCC_OscConfig+0x500>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fe0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ff6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ffa:	fa92 f2a2 	rbit	r2, r2
 8002ffe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003002:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003006:	fab2 f282 	clz	r2, r2
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f042 0220 	orr.w	r2, r2, #32
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f002 021f 	and.w	r2, r2, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f202 	lsl.w	r2, r1, r2
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0af      	beq.n	8002f82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	21f8      	movs	r1, #248	; 0xf8
 8003038:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003040:	fa91 f1a1 	rbit	r1, r1
 8003044:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003048:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800304c:	fab1 f181 	clz	r1, r1
 8003050:	b2c9      	uxtb	r1, r1
 8003052:	408b      	lsls	r3, r1
 8003054:	4920      	ldr	r1, [pc, #128]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
 800305a:	e06c      	b.n	8003136 <HAL_RCC_OscConfig+0x646>
 800305c:	2301      	movs	r3, #1
 800305e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800306e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800307c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fd ff92 	bl	8000fb0 <HAL_GetTick>
 800308c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7fd ff8d 	bl	8000fb0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	f000 bd5a 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d104      	bne.n	80030dc <HAL_RCC_OscConfig+0x5ec>
 80030d2:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	e015      	b.n	8003104 <HAL_RCC_OscConfig+0x614>
 80030d8:	40021000 	.word	0x40021000
 80030dc:	2302      	movs	r3, #2
 80030de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030ee:	2302      	movs	r3, #2
 80030f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003100:	4bc8      	ldr	r3, [pc, #800]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	2202      	movs	r2, #2
 8003106:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800310a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800310e:	fa92 f2a2 	rbit	r2, r2
 8003112:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003116:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800311a:	fab2 f282 	clz	r2, r2
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f042 0220 	orr.w	r2, r2, #32
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f002 021f 	and.w	r2, r2, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f202 	lsl.w	r2, r1, r2
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ad      	bne.n	8003092 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8110 	beq.w	800336c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d079      	beq.n	8003250 <HAL_RCC_OscConfig+0x760>
 800315c:	2301      	movs	r3, #1
 800315e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800316e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4bab      	ldr	r3, [pc, #684]	; (8003428 <HAL_RCC_OscConfig+0x938>)
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	2301      	movs	r3, #1
 8003184:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fd ff13 	bl	8000fb0 <HAL_GetTick>
 800318a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003190:	f7fd ff0e 	bl	8000fb0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d902      	bls.n	80031a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	f000 bcdb 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 80031a6:	2302      	movs	r3, #2
 80031a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031e4:	2202      	movs	r2, #2
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003200:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800320c:	2102      	movs	r1, #2
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	fa93 f1a3 	rbit	r1, r3
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003226:	6019      	str	r1, [r3, #0]
  return result;
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0a0      	beq.n	8003190 <HAL_RCC_OscConfig+0x6a0>
 800324e:	e08d      	b.n	800336c <HAL_RCC_OscConfig+0x87c>
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003272:	601a      	str	r2, [r3, #0]
  return result;
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800327c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	4b68      	ldr	r3, [pc, #416]	; (8003428 <HAL_RCC_OscConfig+0x938>)
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	461a      	mov	r2, r3
 800328e:	2300      	movs	r3, #0
 8003290:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fd fe8d 	bl	8000fb0 <HAL_GetTick>
 8003296:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7fd fe88 	bl	8000fb0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d902      	bls.n	80032b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	f000 bc55 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032ba:	2202      	movs	r2, #2
 80032bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa93 f2a3 	rbit	r2, r3
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032de:	2202      	movs	r2, #2
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003302:	2202      	movs	r2, #2
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800331c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800332a:	2102      	movs	r1, #2
 800332c:	6019      	str	r1, [r3, #0]
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	fa93 f1a3 	rbit	r1, r3
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003344:	6019      	str	r1, [r3, #0]
  return result;
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2101      	movs	r1, #1
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d197      	bne.n	800329c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 81a1 	beq.w	80036c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003388:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d116      	bne.n	80033c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	4b23      	ldr	r3, [pc, #140]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 800339a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339e:	61d3      	str	r3, [r2, #28]
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_RCC_OscConfig+0x93c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d11a      	bne.n	8003404 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <HAL_RCC_OscConfig+0x93c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a16      	ldr	r2, [pc, #88]	; (800342c <HAL_RCC_OscConfig+0x93c>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7fd fde9 	bl	8000fb0 <HAL_GetTick>
 80033de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	e009      	b.n	80033f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e4:	f7fd fde4 	bl	8000fb0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b64      	cmp	r3, #100	; 0x64
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e3b1      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_RCC_OscConfig+0x93c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ef      	beq.n	80033e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10d      	bne.n	8003430 <HAL_RCC_OscConfig+0x940>
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a02      	ldr	r2, [pc, #8]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e03c      	b.n	800349c <HAL_RCC_OscConfig+0x9ac>
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	10908120 	.word	0x10908120
 800342c:	40007000 	.word	0x40007000
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10c      	bne.n	800345a <HAL_RCC_OscConfig+0x96a>
 8003440:	4bc1      	ldr	r3, [pc, #772]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4ac0      	ldr	r2, [pc, #768]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	4bbe      	ldr	r3, [pc, #760]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4abd      	ldr	r2, [pc, #756]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	e020      	b.n	800349c <HAL_RCC_OscConfig+0x9ac>
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x994>
 800346a:	4bb7      	ldr	r3, [pc, #732]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4ab6      	ldr	r2, [pc, #728]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6213      	str	r3, [r2, #32]
 8003476:	4bb4      	ldr	r3, [pc, #720]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4ab3      	ldr	r2, [pc, #716]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6213      	str	r3, [r2, #32]
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x9ac>
 8003484:	4bb0      	ldr	r3, [pc, #704]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4aaf      	ldr	r2, [pc, #700]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	4bad      	ldr	r3, [pc, #692]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4aac      	ldr	r2, [pc, #688]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8081 	beq.w	80035b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fd fd7f 	bl	8000fb0 <HAL_GetTick>
 80034b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fd fd7a 	bl	8000fb0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e345      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034d8:	2202      	movs	r2, #2
 80034da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034fc:	2202      	movs	r2, #2
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	fa93 f2a3 	rbit	r2, r3
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003516:	601a      	str	r2, [r3, #0]
  return result;
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003520:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d102      	bne.n	800353c <HAL_RCC_OscConfig+0xa4c>
 8003536:	4b84      	ldr	r3, [pc, #528]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	e013      	b.n	8003564 <HAL_RCC_OscConfig+0xa74>
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003544:	2202      	movs	r2, #2
 8003546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	fa93 f2a3 	rbit	r2, r3
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	4b79      	ldr	r3, [pc, #484]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003568:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800356c:	2102      	movs	r1, #2
 800356e:	6011      	str	r1, [r2, #0]
 8003570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003574:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	fa92 f1a2 	rbit	r1, r2
 800357e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003582:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003586:	6011      	str	r1, [r2, #0]
  return result;
 8003588:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	fab2 f282 	clz	r2, r2
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	f002 021f 	and.w	r2, r2, #31
 80035a2:	2101      	movs	r1, #1
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d084      	beq.n	80034b8 <HAL_RCC_OscConfig+0x9c8>
 80035ae:	e07f      	b.n	80036b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fd fcfe 	bl	8000fb0 <HAL_GetTick>
 80035b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00b      	b.n	80035d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fd fcf9 	bl	8000fb0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e2c4      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035fe:	2202      	movs	r2, #2
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	fa93 f2a3 	rbit	r2, r3
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003618:	601a      	str	r2, [r3, #0]
  return result;
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003622:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d102      	bne.n	800363e <HAL_RCC_OscConfig+0xb4e>
 8003638:	4b43      	ldr	r3, [pc, #268]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	e013      	b.n	8003666 <HAL_RCC_OscConfig+0xb76>
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003646:	2202      	movs	r2, #2
 8003648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f2a3 	rbit	r2, r3
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800366a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800366e:	2102      	movs	r1, #2
 8003670:	6011      	str	r1, [r2, #0]
 8003672:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003676:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	fa92 f1a2 	rbit	r1, r2
 8003680:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003684:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003688:	6011      	str	r1, [r2, #0]
  return result;
 800368a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800368e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	f002 021f 	and.w	r2, r2, #31
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d184      	bne.n	80035ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8242 	beq.w	8003b5a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	f000 8213 	beq.w	8003b0a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	f040 8162 	bne.w	80039ba <HAL_RCC_OscConfig+0xeca>
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800371a:	601a      	str	r2, [r3, #0]
  return result;
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003724:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003730:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	461a      	mov	r2, r3
 8003738:	2300      	movs	r3, #0
 800373a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fd fc38 	bl	8000fb0 <HAL_GetTick>
 8003740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	e00c      	b.n	8003760 <HAL_RCC_OscConfig+0xc70>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fc30 	bl	8000fb0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1fd      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 8003760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003764:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800376c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	fa93 f2a3 	rbit	r2, r3
 800377c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003780:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003784:	601a      	str	r2, [r3, #0]
  return result;
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800378e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003790:	fab3 f383 	clz	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d102      	bne.n	80037aa <HAL_RCC_OscConfig+0xcba>
 80037a4:	4bb0      	ldr	r3, [pc, #704]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	e027      	b.n	80037fa <HAL_RCC_OscConfig+0xd0a>
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	4b9c      	ldr	r3, [pc, #624]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003802:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003806:	6011      	str	r1, [r2, #0]
 8003808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	fa92 f1a2 	rbit	r1, r2
 8003816:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800381a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800381e:	6011      	str	r1, [r2, #0]
  return result;
 8003820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003824:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d182      	bne.n	800374c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003846:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800385a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	430b      	orrs	r3, r1
 8003868:	497f      	ldr	r1, [pc, #508]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800387a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	fa93 f2a3 	rbit	r2, r3
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003892:	601a      	str	r2, [r3, #0]
  return result;
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800389c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	461a      	mov	r2, r3
 80038b0:	2301      	movs	r3, #1
 80038b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fd fb7c 	bl	8000fb0 <HAL_GetTick>
 80038b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038bc:	e009      	b.n	80038d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038be:	f7fd fb77 	bl	8000fb0 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e144      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f2a3 	rbit	r2, r3
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038f6:	601a      	str	r2, [r3, #0]
  return result;
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_RCC_OscConfig+0xe2c>
 8003916:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e027      	b.n	800396c <HAL_RCC_OscConfig+0xe7c>
 800391c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003920:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	fa93 f2a3 	rbit	r2, r3
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800394a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003970:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003974:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800397e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	fa92 f1a2 	rbit	r1, r2
 8003988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800398c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003990:	6011      	str	r1, [r2, #0]
  return result;
 8003992:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003996:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	fab2 f282 	clz	r2, r2
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	f042 0220 	orr.w	r2, r2, #32
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	f002 021f 	and.w	r2, r2, #31
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d082      	beq.n	80038be <HAL_RCC_OscConfig+0xdce>
 80039b8:	e0cf      	b.n	8003b5a <HAL_RCC_OscConfig+0x106a>
 80039ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fa93 f2a3 	rbit	r2, r3
 80039d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039de:	601a      	str	r2, [r3, #0]
  return result;
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fd fad6 	bl	8000fb0 <HAL_GetTick>
 8003a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a08:	e009      	b.n	8003a1e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fd fad1 	bl	8000fb0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e09e      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	fa93 f2a3 	rbit	r2, r3
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a42:	601a      	str	r2, [r3, #0]
  return result;
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d104      	bne.n	8003a6c <HAL_RCC_OscConfig+0xf7c>
 8003a62:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	e029      	b.n	8003abc <HAL_RCC_OscConfig+0xfcc>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	fa93 f2a3 	rbit	r2, r3
 8003aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCC_OscConfig+0x1078>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ac4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ac8:	6011      	str	r1, [r2, #0]
 8003aca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ace:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	fa92 f1a2 	rbit	r1, r2
 8003ad8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003adc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ae0:	6011      	str	r1, [r2, #0]
  return result;
 8003ae2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ae6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	fab2 f282 	clz	r2, r2
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	f042 0220 	orr.w	r2, r2, #32
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f002 021f 	and.w	r2, r2, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f202 	lsl.w	r2, r1, r2
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d180      	bne.n	8003a0a <HAL_RCC_OscConfig+0xf1a>
 8003b08:	e027      	b.n	8003b5a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e01e      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_OscConfig+0x1078>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b2a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000

08003b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b09e      	sub	sp, #120	; 0x78
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e162      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b90      	ldr	r3, [pc, #576]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d910      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	498b      	ldr	r1, [pc, #556]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b89      	ldr	r3, [pc, #548]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e14a      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b82      	ldr	r3, [pc, #520]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	497f      	ldr	r1, [pc, #508]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80dc 	beq.w	8003d98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d13c      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xf6>
 8003be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xa6>
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	e00f      	b.n	8003c32 <HAL_RCC_ClockConfig+0xc6>
 8003c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c24:	663b      	str	r3, [r7, #96]	; 0x60
 8003c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c2e:	4b67      	ldr	r3, [pc, #412]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c36:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c3a:	fa92 f2a2 	rbit	r2, r2
 8003c3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c42:	fab2 f282 	clz	r2, r2
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	f042 0220 	orr.w	r2, r2, #32
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	f002 021f 	and.w	r2, r2, #31
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f202 	lsl.w	r2, r1, r2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d17b      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0f3      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d13c      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x178>
 8003c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x128>
 8003c8e:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	e00f      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
 8003c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cbc:	fa92 f2a2 	rbit	r2, r2
 8003cc0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f042 0220 	orr.w	r2, r2, #32
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	f002 021f 	and.w	r2, r2, #31
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d13a      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0b2      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x1a0>
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	e00d      	b.n	8003d28 <HAL_RCC_ClockConfig+0x1bc>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
 8003d18:	2302      	movs	r3, #2
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2202      	movs	r2, #2
 8003d2a:	61ba      	str	r2, [r7, #24]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	fa92 f2a2 	rbit	r2, r2
 8003d32:	617a      	str	r2, [r7, #20]
  return result;
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	fab2 f282 	clz	r2, r2
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	f042 0220 	orr.w	r2, r2, #32
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f002 021f 	and.w	r2, r2, #31
 8003d46:	2101      	movs	r1, #1
 8003d48:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e079      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	491a      	ldr	r1, [pc, #104]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fd f922 	bl	8000fb0 <HAL_GetTick>
 8003d6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fd f91e 	bl	8000fb0 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e061      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d214      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	4906      	ldr	r1, [pc, #24]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e040      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	491a      	ldr	r1, [pc, #104]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4912      	ldr	r1, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e0e:	f000 f829 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e12:	4601      	mov	r1, r0
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1c:	22f0      	movs	r2, #240	; 0xf0
 8003e1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	fa92 f2a2 	rbit	r2, r2
 8003e26:	60fa      	str	r2, [r7, #12]
  return result;
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	fab2 f282 	clz	r2, r2
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	40d3      	lsrs	r3, r2
 8003e32:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <HAL_RCC_ClockConfig+0x2ec>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	fa21 f303 	lsr.w	r3, r1, r3
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HAL_RCC_ClockConfig+0x2f0>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_RCC_ClockConfig+0x2f4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd f870 	bl	8000f28 <HAL_InitTick>
  
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3778      	adds	r7, #120	; 0x78
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08005e74 	.word	0x08005e74
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000004 	.word	0x20000004

08003e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b08b      	sub	sp, #44	; 0x2c
 8003e68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e7e:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d002      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0x30>
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0x36>
 8003e92:	e03c      	b.n	8003f0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e94:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e96:	623b      	str	r3, [r7, #32]
      break;
 8003e98:	e03c      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ea0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ea4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	fa92 f2a2 	rbit	r2, r2
 8003eac:	607a      	str	r2, [r7, #4]
  return result;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	fab2 f282 	clz	r2, r2
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	40d3      	lsrs	r3, r2
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ebe:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	220f      	movs	r2, #15
 8003ec8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	fa92 f2a2 	rbit	r2, r2
 8003ed0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	fab2 f282 	clz	r2, r2
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	40d3      	lsrs	r3, r2
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
 8003ee0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eec:	4a0e      	ldr	r2, [pc, #56]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	e004      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	623b      	str	r3, [r7, #32]
      break;
 8003f0c:	e002      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f10:	623b      	str	r3, [r7, #32]
      break;
 8003f12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f14:	6a3b      	ldr	r3, [r7, #32]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	372c      	adds	r7, #44	; 0x2c
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	007a1200 	.word	0x007a1200
 8003f2c:	08005e8c 	.word	0x08005e8c
 8003f30:	08005e9c 	.word	0x08005e9c
 8003f34:	003d0900 	.word	0x003d0900

08003f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000000 	.word	0x20000000

08003f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f56:	f7ff ffef 	bl	8003f38 <HAL_RCC_GetHCLKFreq>
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	fa92 f2a2 	rbit	r2, r2
 8003f70:	603a      	str	r2, [r7, #0]
  return result;
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	fab2 f282 	clz	r2, r2
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	40d3      	lsrs	r3, r2
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f7e:	5cd3      	ldrb	r3, [r2, r3]
 8003f80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	08005e84 	.word	0x08005e84

08003f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f9a:	f7ff ffcd 	bl	8003f38 <HAL_RCC_GetHCLKFreq>
 8003f9e:	4601      	mov	r1, r0
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003fa8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003fac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	fa92 f2a2 	rbit	r2, r2
 8003fb4:	603a      	str	r2, [r7, #0]
  return result;
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	fab2 f282 	clz	r2, r2
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	40d3      	lsrs	r3, r2
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fc2:	5cd3      	ldrb	r3, [r2, r3]
 8003fc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	08005e84 	.word	0x08005e84

08003fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b092      	sub	sp, #72	; 0x48
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80cd 	beq.w	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffc:	4b8e      	ldr	r3, [pc, #568]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10e      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004008:	4b8b      	ldr	r3, [pc, #556]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4a8a      	ldr	r2, [pc, #552]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	61d3      	str	r3, [r2, #28]
 8004014:	4b88      	ldr	r3, [pc, #544]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b85      	ldr	r3, [pc, #532]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d118      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004032:	4b82      	ldr	r3, [pc, #520]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a81      	ldr	r2, [pc, #516]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fc ffb7 	bl	8000fb0 <HAL_GetTick>
 8004042:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	e008      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004046:	f7fc ffb3 	bl	8000fb0 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b64      	cmp	r3, #100	; 0x64
 8004052:	d901      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0ea      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004058:	4b78      	ldr	r3, [pc, #480]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004064:	4b74      	ldr	r3, [pc, #464]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d07d      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800407e:	429a      	cmp	r2, r3
 8004080:	d076      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004082:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004090:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b66      	ldr	r3, [pc, #408]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	461a      	mov	r2, r3
 80040ac:	2301      	movs	r3, #1
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040c0:	fab3 f383 	clz	r3, r3
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	4b5d      	ldr	r3, [pc, #372]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040d4:	4a58      	ldr	r2, [pc, #352]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d045      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fc ff64 	bl	8000fb0 <HAL_GetTick>
 80040e8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ea:	e00a      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fc ff60 	bl	8000fb0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e095      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004102:	2302      	movs	r3, #2
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
 800410e:	2302      	movs	r3, #2
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	61fb      	str	r3, [r7, #28]
  return result;
 800411a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f043 0302 	orr.w	r3, r3, #2
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d102      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004130:	4b41      	ldr	r3, [pc, #260]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	e007      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004136:	2302      	movs	r3, #2
 8004138:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2202      	movs	r2, #2
 8004148:	613a      	str	r2, [r7, #16]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	fa92 f2a2 	rbit	r2, r2
 8004150:	60fa      	str	r2, [r7, #12]
  return result;
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	fab2 f282 	clz	r2, r2
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	f002 021f 	and.w	r2, r2, #31
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0bd      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004170:	4b31      	ldr	r3, [pc, #196]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	492e      	ldr	r1, [pc, #184]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	4313      	orrs	r3, r2
 8004180:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004182:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418a:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004194:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a2:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	4922      	ldr	r1, [pc, #136]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	f023 0210 	bic.w	r2, r3, #16
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	491a      	ldr	r1, [pc, #104]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041de:	4b16      	ldr	r3, [pc, #88]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	4913      	ldr	r1, [pc, #76]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	490b      	ldr	r1, [pc, #44]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	4313      	orrs	r3, r2
 800420c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	4904      	ldr	r1, [pc, #16]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004228:	4313      	orrs	r3, r2
 800422a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3748      	adds	r7, #72	; 0x48
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
 8004240:	10908100 	.word	0x10908100

08004244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e049      	b.n	80042ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fcb8 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f000 f9da 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e040      	b.n	800438e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <HAL_TIM_Base_Start_IT+0xa8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x58>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d009      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x58>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <HAL_TIM_Base_Start_IT+0xac>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x58>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a17      	ldr	r2, [pc, #92]	; (80043a4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d115      	bne.n	8004378 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004354:	4013      	ands	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b06      	cmp	r3, #6
 800435c:	d015      	beq.n	800438a <HAL_TIM_Base_Start_IT+0x96>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d011      	beq.n	800438a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004376:	e008      	b.n	800438a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e000      	b.n	800438c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40014000 	.word	0x40014000
 80043a8:	00010007 	.word	0x00010007

080043ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0202 	mvn.w	r2, #2
 80043d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f905 	bl	80045fe <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8f7 	bl	80045ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f908 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0204 	mvn.w	r2, #4
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8db 	bl	80045fe <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8cd 	bl	80045ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f8de 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b08      	cmp	r3, #8
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0208 	mvn.w	r2, #8
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8b1 	bl	80045fe <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8a3 	bl	80045ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8b4 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0210 	mvn.w	r2, #16
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2208      	movs	r2, #8
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f887 	bl	80045fe <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f879 	bl	80045ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f88a 	bl	8004612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0201 	mvn.w	r2, #1
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc f930 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f960 	bl	800481c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d10e      	bne.n	800458a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d107      	bne.n	800458a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f953 	bl	8004830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d10e      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d107      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f838 	bl	8004626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d10e      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0220 	mvn.w	r2, #32
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f913 	bl	8004808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a32      	ldr	r2, [pc, #200]	; (8004718 <TIM_Base_SetConfig+0xdc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d007      	beq.n	8004664 <TIM_Base_SetConfig+0x28>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d003      	beq.n	8004664 <TIM_Base_SetConfig+0x28>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a2f      	ldr	r2, [pc, #188]	; (800471c <TIM_Base_SetConfig+0xe0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d108      	bne.n	8004676 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a27      	ldr	r2, [pc, #156]	; (8004718 <TIM_Base_SetConfig+0xdc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_Base_SetConfig+0x6a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d00f      	beq.n	80046a6 <TIM_Base_SetConfig+0x6a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a24      	ldr	r2, [pc, #144]	; (800471c <TIM_Base_SetConfig+0xe0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x6a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a23      	ldr	r2, [pc, #140]	; (8004720 <TIM_Base_SetConfig+0xe4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x6a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a22      	ldr	r2, [pc, #136]	; (8004724 <TIM_Base_SetConfig+0xe8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x6a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a21      	ldr	r2, [pc, #132]	; (8004728 <TIM_Base_SetConfig+0xec>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <TIM_Base_SetConfig+0xdc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00b      	beq.n	80046fc <TIM_Base_SetConfig+0xc0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <TIM_Base_SetConfig+0xe4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <TIM_Base_SetConfig+0xc0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0d      	ldr	r2, [pc, #52]	; (8004724 <TIM_Base_SetConfig+0xe8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0xc0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <TIM_Base_SetConfig+0xec>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40000400 	.word	0x40000400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004740:	2302      	movs	r3, #2
 8004742:	e054      	b.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d108      	bne.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004774:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00e      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d009      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a13      	ldr	r2, [pc, #76]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a11      	ldr	r2, [pc, #68]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10c      	bne.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40014000 	.word	0x40014000

08004808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e040      	b.n	80048d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc f9e0 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fbfc 	bl	8005080 <UART_SetConfig>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e022      	b.n	80048d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fd26 	bl	80052ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fdad 	bl	8005430 <UART_CheckIdleState>
 80048d6:	4603      	mov	r3, r0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d132      	bne.n	800495e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_UART_Receive_IT+0x24>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e02b      	b.n	8004960 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d018      	beq.n	800494e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	613b      	str	r3, [r7, #16]
   return(result);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	61bb      	str	r3, [r7, #24]
   return(result);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e6      	bne.n	800491c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	461a      	mov	r2, r3
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fe7b 	bl	8005650 <UART_Start_Receive_IT>
 800495a:	4603      	mov	r3, r0
 800495c:	e000      	b.n	8004960 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
  }
}
 8004960:	4618      	mov	r0, r3
 8004962:	3728      	adds	r7, #40	; 0x28
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497a:	2b20      	cmp	r3, #32
 800497c:	d165      	bne.n	8004a4a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_UART_Transmit_DMA+0x22>
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e05e      	b.n	8004a4c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2221      	movs	r2, #33	; 0x21
 80049b0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d027      	beq.n	8004a0a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	4a25      	ldr	r2, [pc, #148]	; (8004a54 <HAL_UART_Transmit_DMA+0xec>)
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	4a24      	ldr	r2, [pc, #144]	; (8004a58 <HAL_UART_Transmit_DMA+0xf0>)
 80049c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <HAL_UART_Transmit_DMA+0xf4>)
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	2200      	movs	r2, #0
 80049d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e2:	4619      	mov	r1, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3328      	adds	r3, #40	; 0x28
 80049ea:	461a      	mov	r2, r3
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	f7fd fd2e 	bl	800244e <HAL_DMA_Start_IT>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2210      	movs	r2, #16
 80049fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e020      	b.n	8004a4c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2240      	movs	r2, #64	; 0x40
 8004a10:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	613b      	str	r3, [r7, #16]
   return(result);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	623a      	str	r2, [r7, #32]
 8004a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	69f9      	ldr	r1, [r7, #28]
 8004a38:	6a3a      	ldr	r2, [r7, #32]
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e000      	b.n	8004a4c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3728      	adds	r7, #40	; 0x28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	080058f1 	.word	0x080058f1
 8004a58:	08005985 	.word	0x08005985
 8004a5c:	080059a1 	.word	0x080059a1

08004a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b0ba      	sub	sp, #232	; 0xe8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a8e:	4013      	ands	r3, r2
 8004a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d115      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00f      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 82ab 	beq.w	8005014 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
      }
      return;
 8004ac6:	e2a5      	b.n	8005014 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8117 	beq.w	8004d00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ade:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ae2:	4b85      	ldr	r3, [pc, #532]	; (8004cf8 <HAL_UART_IRQHandler+0x298>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 810a 	beq.w	8004d00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d011      	beq.n	8004b1c <HAL_UART_IRQHandler+0xbc>
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b12:	f043 0201 	orr.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d011      	beq.n	8004b4c <HAL_UART_IRQHandler+0xec>
 8004b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b42:	f043 0204 	orr.w	r2, r3, #4
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d011      	beq.n	8004b7c <HAL_UART_IRQHandler+0x11c>
 8004b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b72:	f043 0202 	orr.w	r2, r3, #2
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d017      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bae:	f043 0208 	orr.w	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d012      	beq.n	8004bea <HAL_UART_IRQHandler+0x18a>
 8004bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00c      	beq.n	8004bea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be0:	f043 0220 	orr.w	r2, r3, #32
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8211 	beq.w	8005018 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00d      	beq.n	8004c1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d005      	beq.n	8004c42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04f      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fdf0 	bl	8005828 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d141      	bne.n	8004cda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1d9      	bne.n	8004c56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d013      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cae:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <HAL_UART_IRQHandler+0x29c>)
 8004cb0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd fc61 	bl	800257e <HAL_DMA_Abort_IT>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d017      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	e00f      	b.n	8004cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f9be 	bl	8005054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e00b      	b.n	8004cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9ba 	bl	8005054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	e007      	b.n	8004cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9b6 	bl	8005054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004cf0:	e192      	b.n	8005018 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf2:	bf00      	nop
    return;
 8004cf4:	e190      	b.n	8005018 <HAL_UART_IRQHandler+0x5b8>
 8004cf6:	bf00      	nop
 8004cf8:	04000120 	.word	0x04000120
 8004cfc:	08005a1f 	.word	0x08005a1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	f040 814b 	bne.w	8004fa0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8144 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 813d 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2210      	movs	r2, #16
 8004d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	f040 80b5 	bne.w	8004ea8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8164 	beq.w	800501c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	f080 815c 	bcs.w	800501c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	f000 8086 	beq.w	8004e86 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004da4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004da8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004db0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1da      	bne.n	8004d7a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004de8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004df0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e1      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3308      	adds	r3, #8
 8004e20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e3      	bne.n	8004e00 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e56:	f023 0310 	bic.w	r3, r3, #16
 8004e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e4      	bne.n	8004e46 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fd fb43 	bl	800250c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8e1 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ea6:	e0b9      	b.n	800501c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80ab 	beq.w	8005020 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80a6 	beq.w	8005020 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e4      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e3      	bne.n	8004f0a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0310 	bic.w	r3, r3, #16
 8004f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	69b9      	ldr	r1, [r7, #24]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	617b      	str	r3, [r7, #20]
   return(result);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e4      	bne.n	8004f56 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f865 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f9e:	e03f      	b.n	8005020 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <HAL_UART_IRQHandler+0x56a>
 8004fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 ff13 	bl	8005dee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fc8:	e02d      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01c      	beq.n	8005024 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
    }
    return;
 8004ff2:	e017      	b.n	8005024 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d012      	beq.n	8005026 <HAL_UART_IRQHandler+0x5c6>
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fd1c 	bl	8005a4a <UART_EndTransmit_IT>
    return;
 8005012:	e008      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005014:	bf00      	nop
 8005016:	e006      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005018:	bf00      	nop
 800501a:	e004      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
      return;
 800501c:	bf00      	nop
 800501e:	e002      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005024:	bf00      	nop
  }

}
 8005026:	37e8      	adds	r7, #232	; 0xe8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b8a      	ldr	r3, [pc, #552]	; (80052d4 <UART_SetConfig+0x254>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a78      	ldr	r2, [pc, #480]	; (80052d8 <UART_SetConfig+0x258>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d120      	bne.n	800513e <UART_SetConfig+0xbe>
 80050fc:	4b77      	ldr	r3, [pc, #476]	; (80052dc <UART_SetConfig+0x25c>)
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b03      	cmp	r3, #3
 8005106:	d817      	bhi.n	8005138 <UART_SetConfig+0xb8>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x90>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005121 	.word	0x08005121
 8005114:	0800512d 	.word	0x0800512d
 8005118:	08005133 	.word	0x08005133
 800511c:	08005127 	.word	0x08005127
 8005120:	2300      	movs	r3, #0
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e01d      	b.n	8005162 <UART_SetConfig+0xe2>
 8005126:	2302      	movs	r3, #2
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e01a      	b.n	8005162 <UART_SetConfig+0xe2>
 800512c:	2304      	movs	r3, #4
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e017      	b.n	8005162 <UART_SetConfig+0xe2>
 8005132:	2308      	movs	r3, #8
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e014      	b.n	8005162 <UART_SetConfig+0xe2>
 8005138:	2310      	movs	r3, #16
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e011      	b.n	8005162 <UART_SetConfig+0xe2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a67      	ldr	r2, [pc, #412]	; (80052e0 <UART_SetConfig+0x260>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d102      	bne.n	800514e <UART_SetConfig+0xce>
 8005148:	2300      	movs	r3, #0
 800514a:	77fb      	strb	r3, [r7, #31]
 800514c:	e009      	b.n	8005162 <UART_SetConfig+0xe2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a64      	ldr	r2, [pc, #400]	; (80052e4 <UART_SetConfig+0x264>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d102      	bne.n	800515e <UART_SetConfig+0xde>
 8005158:	2300      	movs	r3, #0
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e001      	b.n	8005162 <UART_SetConfig+0xe2>
 800515e:	2310      	movs	r3, #16
 8005160:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800516a:	d15a      	bne.n	8005222 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800516c:	7ffb      	ldrb	r3, [r7, #31]
 800516e:	2b08      	cmp	r3, #8
 8005170:	d827      	bhi.n	80051c2 <UART_SetConfig+0x142>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <UART_SetConfig+0xf8>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	0800519d 	.word	0x0800519d
 800517c:	080051a5 	.word	0x080051a5
 8005180:	080051ad 	.word	0x080051ad
 8005184:	080051c3 	.word	0x080051c3
 8005188:	080051b3 	.word	0x080051b3
 800518c:	080051c3 	.word	0x080051c3
 8005190:	080051c3 	.word	0x080051c3
 8005194:	080051c3 	.word	0x080051c3
 8005198:	080051bb 	.word	0x080051bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800519c:	f7fe fed8 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 80051a0:	61b8      	str	r0, [r7, #24]
        break;
 80051a2:	e013      	b.n	80051cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a4:	f7fe fef6 	bl	8003f94 <HAL_RCC_GetPCLK2Freq>
 80051a8:	61b8      	str	r0, [r7, #24]
        break;
 80051aa:	e00f      	b.n	80051cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051ac:	4b4e      	ldr	r3, [pc, #312]	; (80052e8 <UART_SetConfig+0x268>)
 80051ae:	61bb      	str	r3, [r7, #24]
        break;
 80051b0:	e00c      	b.n	80051cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b2:	f7fe fe57 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 80051b6:	61b8      	str	r0, [r7, #24]
        break;
 80051b8:	e008      	b.n	80051cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051be:	61bb      	str	r3, [r7, #24]
        break;
 80051c0:	e004      	b.n	80051cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	77bb      	strb	r3, [r7, #30]
        break;
 80051ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d074      	beq.n	80052bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	005a      	lsls	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	441a      	add	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	d916      	bls.n	800521c <UART_SetConfig+0x19c>
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f4:	d212      	bcs.n	800521c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f023 030f 	bic.w	r3, r3, #15
 80051fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	b29a      	uxth	r2, r3
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	4313      	orrs	r3, r2
 8005210:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	89fa      	ldrh	r2, [r7, #14]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	e04f      	b.n	80052bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	77bb      	strb	r3, [r7, #30]
 8005220:	e04c      	b.n	80052bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005222:	7ffb      	ldrb	r3, [r7, #31]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d828      	bhi.n	800527a <UART_SetConfig+0x1fa>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <UART_SetConfig+0x1b0>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005255 	.word	0x08005255
 8005234:	0800525d 	.word	0x0800525d
 8005238:	08005265 	.word	0x08005265
 800523c:	0800527b 	.word	0x0800527b
 8005240:	0800526b 	.word	0x0800526b
 8005244:	0800527b 	.word	0x0800527b
 8005248:	0800527b 	.word	0x0800527b
 800524c:	0800527b 	.word	0x0800527b
 8005250:	08005273 	.word	0x08005273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005254:	f7fe fe7c 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 8005258:	61b8      	str	r0, [r7, #24]
        break;
 800525a:	e013      	b.n	8005284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800525c:	f7fe fe9a 	bl	8003f94 <HAL_RCC_GetPCLK2Freq>
 8005260:	61b8      	str	r0, [r7, #24]
        break;
 8005262:	e00f      	b.n	8005284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005264:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <UART_SetConfig+0x268>)
 8005266:	61bb      	str	r3, [r7, #24]
        break;
 8005268:	e00c      	b.n	8005284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800526a:	f7fe fdfb 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 800526e:	61b8      	str	r0, [r7, #24]
        break;
 8005270:	e008      	b.n	8005284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005276:	61bb      	str	r3, [r7, #24]
        break;
 8005278:	e004      	b.n	8005284 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	77bb      	strb	r3, [r7, #30]
        break;
 8005282:	bf00      	nop
    }

    if (pclk != 0U)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d018      	beq.n	80052bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	085a      	lsrs	r2, r3, #1
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	441a      	add	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b0f      	cmp	r3, #15
 80052a2:	d909      	bls.n	80052b8 <UART_SetConfig+0x238>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052aa:	d205      	bcs.n	80052b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60da      	str	r2, [r3, #12]
 80052b6:	e001      	b.n	80052bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	efff69f3 	.word	0xefff69f3
 80052d8:	40013800 	.word	0x40013800
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40004400 	.word	0x40004400
 80052e4:	40004800 	.word	0x40004800
 80052e8:	007a1200 	.word	0x007a1200

080052ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01a      	beq.n	8005402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ea:	d10a      	bne.n	8005402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]
  }
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b098      	sub	sp, #96	; 0x60
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005440:	f7fb fdb6 	bl	8000fb0 <HAL_GetTick>
 8005444:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b08      	cmp	r3, #8
 8005452:	d12e      	bne.n	80054b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545c:	2200      	movs	r2, #0
 800545e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f88c 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d021      	beq.n	80054b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005482:	653b      	str	r3, [r7, #80]	; 0x50
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548c:	647b      	str	r3, [r7, #68]	; 0x44
 800548e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e6      	bne.n	800546e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e062      	b.n	8005578 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d149      	bne.n	8005554 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c8:	2200      	movs	r2, #0
 80054ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f856 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d03c      	beq.n	8005554 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	623b      	str	r3, [r7, #32]
   return(result);
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
 80054fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	60fb      	str	r3, [r7, #12]
   return(result);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800552c:	61fa      	str	r2, [r7, #28]
 800552e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	69b9      	ldr	r1, [r7, #24]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	617b      	str	r3, [r7, #20]
   return(result);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e011      	b.n	8005578 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3758      	adds	r7, #88	; 0x58
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005590:	e049      	b.n	8005626 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d045      	beq.n	8005626 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fb fd09 	bl	8000fb0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e048      	b.n	8005646 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d031      	beq.n	8005626 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d110      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2208      	movs	r2, #8
 80055d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f925 	bl	8005828 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2208      	movs	r2, #8
 80055e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e029      	b.n	8005646 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	d111      	bne.n	8005626 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800560a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f90b 	bl	8005828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e00f      	b.n	8005646 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	429a      	cmp	r2, r3
 8005642:	d0a6      	beq.n	8005592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005650:	b480      	push	{r7}
 8005652:	b097      	sub	sp, #92	; 0x5c
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	4613      	mov	r3, r2
 800565c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005682:	d10e      	bne.n	80056a2 <UART_Start_Receive_IT+0x52>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <UART_Start_Receive_IT+0x48>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005692:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005696:	e02d      	b.n	80056f4 <UART_Start_Receive_IT+0xa4>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	22ff      	movs	r2, #255	; 0xff
 800569c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056a0:	e028      	b.n	80056f4 <UART_Start_Receive_IT+0xa4>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10d      	bne.n	80056c6 <UART_Start_Receive_IT+0x76>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <UART_Start_Receive_IT+0x6c>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056ba:	e01b      	b.n	80056f4 <UART_Start_Receive_IT+0xa4>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	227f      	movs	r2, #127	; 0x7f
 80056c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056c4:	e016      	b.n	80056f4 <UART_Start_Receive_IT+0xa4>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ce:	d10d      	bne.n	80056ec <UART_Start_Receive_IT+0x9c>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <UART_Start_Receive_IT+0x92>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	227f      	movs	r2, #127	; 0x7f
 80056dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056e0:	e008      	b.n	80056f4 <UART_Start_Receive_IT+0xa4>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	223f      	movs	r2, #63	; 0x3f
 80056e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056ea:	e003      	b.n	80056f4 <UART_Start_Receive_IT+0xa4>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2222      	movs	r2, #34	; 0x22
 8005700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	657b      	str	r3, [r7, #84]	; 0x54
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005724:	64ba      	str	r2, [r7, #72]	; 0x48
 8005726:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800572a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e5      	bne.n	8005704 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005740:	d107      	bne.n	8005752 <UART_Start_Receive_IT+0x102>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <UART_Start_Receive_IT+0x184>)
 800574e:	669a      	str	r2, [r3, #104]	; 0x68
 8005750:	e002      	b.n	8005758 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a20      	ldr	r2, [pc, #128]	; (80057d8 <UART_Start_Receive_IT+0x188>)
 8005756:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d019      	beq.n	8005794 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e6      	bne.n	8005760 <UART_Start_Receive_IT+0x110>
 8005792:	e018      	b.n	80057c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	613b      	str	r3, [r7, #16]
   return(result);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f043 0320 	orr.w	r3, r3, #32
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b2:	623b      	str	r3, [r7, #32]
 80057b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	69f9      	ldr	r1, [r7, #28]
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e6      	bne.n	8005794 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	375c      	adds	r7, #92	; 0x5c
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	08005c47 	.word	0x08005c47
 80057d8:	08005a9f 	.word	0x08005a9f

080057dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b089      	sub	sp, #36	; 0x24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6979      	ldr	r1, [r7, #20]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	613b      	str	r3, [r7, #16]
   return(result);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e6      	bne.n	80057e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800581c:	bf00      	nop
 800581e:	3724      	adds	r7, #36	; 0x24
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b095      	sub	sp, #84	; 0x54
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584e:	643b      	str	r3, [r7, #64]	; 0x40
 8005850:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e6      	bne.n	8005830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	61fb      	str	r3, [r7, #28]
   return(result);
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589a:	2b01      	cmp	r3, #1
 800589c:	d118      	bne.n	80058d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f023 0310 	bic.w	r3, r3, #16
 80058b2:	647b      	str	r3, [r7, #68]	; 0x44
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6979      	ldr	r1, [r7, #20]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058e4:	bf00      	nop
 80058e6:	3754      	adds	r7, #84	; 0x54
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b090      	sub	sp, #64	; 0x40
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b20      	cmp	r3, #32
 8005904:	d037      	beq.n	8005976 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005908:	2200      	movs	r2, #0
 800590a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800590e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	623b      	str	r3, [r7, #32]
   return(result);
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005924:	63bb      	str	r3, [r7, #56]	; 0x38
 8005926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800592e:	633a      	str	r2, [r7, #48]	; 0x30
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e5      	bne.n	800590e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
 8005958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	69b9      	ldr	r1, [r7, #24]
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	617b      	str	r3, [r7, #20]
   return(result);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e6      	bne.n	8005942 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005974:	e002      	b.n	800597c <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8005976:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005978:	f7ff fb58 	bl	800502c <HAL_UART_TxCpltCallback>
}
 800597c:	bf00      	nop
 800597e:	3740      	adds	r7, #64	; 0x40
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff fb54 	bl	8005040 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d109      	bne.n	80059de <UART_DMAError+0x3e>
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b21      	cmp	r3, #33	; 0x21
 80059ce:	d106      	bne.n	80059de <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80059d8:	6978      	ldr	r0, [r7, #20]
 80059da:	f7ff feff 	bl	80057dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d109      	bne.n	8005a00 <UART_DMAError+0x60>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b22      	cmp	r3, #34	; 0x22
 80059f0:	d106      	bne.n	8005a00 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80059fa:	6978      	ldr	r0, [r7, #20]
 80059fc:	f7ff ff14 	bl	8005828 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a06:	f043 0210 	orr.w	r2, r3, #16
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a10:	6978      	ldr	r0, [r7, #20]
 8005a12:	f7ff fb1f 	bl	8005054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a16:	bf00      	nop
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff fb09 	bl	8005054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b088      	sub	sp, #32
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e6      	bne.n	8005a52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff facb 	bl	800502c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a96:	bf00      	nop
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b09c      	sub	sp, #112	; 0x70
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005aac:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ab6:	2b22      	cmp	r3, #34	; 0x22
 8005ab8:	f040 80b9 	bne.w	8005c2e <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ac2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ac6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005aca:	b2d9      	uxtb	r1, r3
 8005acc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	400a      	ands	r2, r1
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 809c 	bne.w	8005c3e <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e6      	bne.n	8005b06 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b58:	647a      	str	r2, [r7, #68]	; 0x44
 8005b5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e5      	bne.n	8005b38 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d018      	beq.n	8005bc0 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bac:	633b      	str	r3, [r7, #48]	; 0x30
 8005bae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d12e      	bne.n	8005c26 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0310 	bic.w	r3, r3, #16
 8005be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e6      	bne.n	8005bce <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b10      	cmp	r3, #16
 8005c0c:	d103      	bne.n	8005c16 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2210      	movs	r2, #16
 8005c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff fa22 	bl	8005068 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c24:	e00b      	b.n	8005c3e <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fa fef6 	bl	8000a18 <HAL_UART_RxCpltCallback>
}
 8005c2c:	e007      	b.n	8005c3e <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0208 	orr.w	r2, r2, #8
 8005c3c:	619a      	str	r2, [r3, #24]
}
 8005c3e:	bf00      	nop
 8005c40:	3770      	adds	r7, #112	; 0x70
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b09c      	sub	sp, #112	; 0x70
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c54:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c5e:	2b22      	cmp	r3, #34	; 0x22
 8005c60:	f040 80b9 	bne.w	8005dd6 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c6a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c72:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c74:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005c78:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 809c 	bne.w	8005de6 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc2:	667b      	str	r3, [r7, #100]	; 0x64
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8005cce:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e6      	bne.n	8005cae <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	f023 0301 	bic.w	r3, r3, #1
 8005cf6:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d00:	643a      	str	r2, [r7, #64]	; 0x40
 8005d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e5      	bne.n	8005ce0 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d018      	beq.n	8005d68 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d56:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e6      	bne.n	8005d36 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d12e      	bne.n	8005dce <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f023 0310 	bic.w	r3, r3, #16
 8005d8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	613b      	str	r3, [r7, #16]
   return(result);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e6      	bne.n	8005d76 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d103      	bne.n	8005dbe <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2210      	movs	r2, #16
 8005dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff f94e 	bl	8005068 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dcc:	e00b      	b.n	8005de6 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fa fe22 	bl	8000a18 <HAL_UART_RxCpltCallback>
}
 8005dd4:	e007      	b.n	8005de6 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0208 	orr.w	r2, r2, #8
 8005de4:	619a      	str	r2, [r3, #24]
}
 8005de6:	bf00      	nop
 8005de8:	3770      	adds	r7, #112	; 0x70
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <__libc_init_array>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4d0d      	ldr	r5, [pc, #52]	; (8005e3c <__libc_init_array+0x38>)
 8005e08:	4c0d      	ldr	r4, [pc, #52]	; (8005e40 <__libc_init_array+0x3c>)
 8005e0a:	1b64      	subs	r4, r4, r5
 8005e0c:	10a4      	asrs	r4, r4, #2
 8005e0e:	2600      	movs	r6, #0
 8005e10:	42a6      	cmp	r6, r4
 8005e12:	d109      	bne.n	8005e28 <__libc_init_array+0x24>
 8005e14:	4d0b      	ldr	r5, [pc, #44]	; (8005e44 <__libc_init_array+0x40>)
 8005e16:	4c0c      	ldr	r4, [pc, #48]	; (8005e48 <__libc_init_array+0x44>)
 8005e18:	f000 f820 	bl	8005e5c <_init>
 8005e1c:	1b64      	subs	r4, r4, r5
 8005e1e:	10a4      	asrs	r4, r4, #2
 8005e20:	2600      	movs	r6, #0
 8005e22:	42a6      	cmp	r6, r4
 8005e24:	d105      	bne.n	8005e32 <__libc_init_array+0x2e>
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2c:	4798      	blx	r3
 8005e2e:	3601      	adds	r6, #1
 8005e30:	e7ee      	b.n	8005e10 <__libc_init_array+0xc>
 8005e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e36:	4798      	blx	r3
 8005e38:	3601      	adds	r6, #1
 8005e3a:	e7f2      	b.n	8005e22 <__libc_init_array+0x1e>
 8005e3c:	08005eac 	.word	0x08005eac
 8005e40:	08005eac 	.word	0x08005eac
 8005e44:	08005eac 	.word	0x08005eac
 8005e48:	08005eb0 	.word	0x08005eb0

08005e4c <memset>:
 8005e4c:	4402      	add	r2, r0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d100      	bne.n	8005e56 <memset+0xa>
 8005e54:	4770      	bx	lr
 8005e56:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5a:	e7f9      	b.n	8005e50 <memset+0x4>

08005e5c <_init>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr

08005e68 <_fini>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	bf00      	nop
 8005e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6e:	bc08      	pop	{r3}
 8005e70:	469e      	mov	lr, r3
 8005e72:	4770      	bx	lr
