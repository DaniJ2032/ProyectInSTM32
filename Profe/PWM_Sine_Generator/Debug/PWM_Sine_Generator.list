
PWM_Sine_Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004430  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08004540  08004540  00014540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004948  08004948  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004948  08004948  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004948  08004948  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  0800495c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800495c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086d5  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001839  00000000  00000000  0002874d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  00029f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000789  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016770  00000000  00000000  0002b0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a7e6  00000000  00000000  00041841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000842ec  00000000  00000000  0004c027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c64  00000000  00000000  000d0314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d2f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004528 	.word	0x08004528

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004528 	.word	0x08004528

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__aeabi_d2uiz>:
 8000884:	004a      	lsls	r2, r1, #1
 8000886:	d211      	bcs.n	80008ac <__aeabi_d2uiz+0x28>
 8000888:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800088c:	d211      	bcs.n	80008b2 <__aeabi_d2uiz+0x2e>
 800088e:	d50d      	bpl.n	80008ac <__aeabi_d2uiz+0x28>
 8000890:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000894:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000898:	d40e      	bmi.n	80008b8 <__aeabi_d2uiz+0x34>
 800089a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800089e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008a6:	fa23 f002 	lsr.w	r0, r3, r2
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d102      	bne.n	80008be <__aeabi_d2uiz+0x3a>
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	4770      	bx	lr
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	4770      	bx	lr

080008c4 <__aeabi_d2f>:
 80008c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008cc:	bf24      	itt	cs
 80008ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008d6:	d90d      	bls.n	80008f4 <__aeabi_d2f+0x30>
 80008d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008ec:	bf08      	it	eq
 80008ee:	f020 0001 	biceq.w	r0, r0, #1
 80008f2:	4770      	bx	lr
 80008f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008f8:	d121      	bne.n	800093e <__aeabi_d2f+0x7a>
 80008fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008fe:	bfbc      	itt	lt
 8000900:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000904:	4770      	bxlt	lr
 8000906:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800090e:	f1c2 0218 	rsb	r2, r2, #24
 8000912:	f1c2 0c20 	rsb	ip, r2, #32
 8000916:	fa10 f30c 	lsls.w	r3, r0, ip
 800091a:	fa20 f002 	lsr.w	r0, r0, r2
 800091e:	bf18      	it	ne
 8000920:	f040 0001 	orrne.w	r0, r0, #1
 8000924:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000928:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800092c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000930:	ea40 000c 	orr.w	r0, r0, ip
 8000934:	fa23 f302 	lsr.w	r3, r3, r2
 8000938:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800093c:	e7cc      	b.n	80008d8 <__aeabi_d2f+0x14>
 800093e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000942:	d107      	bne.n	8000954 <__aeabi_d2f+0x90>
 8000944:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000948:	bf1e      	ittt	ne
 800094a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800094e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000952:	4770      	bxne	lr
 8000954:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000958:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800095c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <__aeabi_frsub>:
 8000964:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000968:	e002      	b.n	8000970 <__addsf3>
 800096a:	bf00      	nop

0800096c <__aeabi_fsub>:
 800096c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000970 <__addsf3>:
 8000970:	0042      	lsls	r2, r0, #1
 8000972:	bf1f      	itttt	ne
 8000974:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000978:	ea92 0f03 	teqne	r2, r3
 800097c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000980:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000984:	d06a      	beq.n	8000a5c <__addsf3+0xec>
 8000986:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800098a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800098e:	bfc1      	itttt	gt
 8000990:	18d2      	addgt	r2, r2, r3
 8000992:	4041      	eorgt	r1, r0
 8000994:	4048      	eorgt	r0, r1
 8000996:	4041      	eorgt	r1, r0
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	2b19      	cmp	r3, #25
 800099e:	bf88      	it	hi
 80009a0:	4770      	bxhi	lr
 80009a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ae:	bf18      	it	ne
 80009b0:	4240      	negne	r0, r0
 80009b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009be:	bf18      	it	ne
 80009c0:	4249      	negne	r1, r1
 80009c2:	ea92 0f03 	teq	r2, r3
 80009c6:	d03f      	beq.n	8000a48 <__addsf3+0xd8>
 80009c8:	f1a2 0201 	sub.w	r2, r2, #1
 80009cc:	fa41 fc03 	asr.w	ip, r1, r3
 80009d0:	eb10 000c 	adds.w	r0, r0, ip
 80009d4:	f1c3 0320 	rsb	r3, r3, #32
 80009d8:	fa01 f103 	lsl.w	r1, r1, r3
 80009dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009e0:	d502      	bpl.n	80009e8 <__addsf3+0x78>
 80009e2:	4249      	negs	r1, r1
 80009e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009ec:	d313      	bcc.n	8000a16 <__addsf3+0xa6>
 80009ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009f2:	d306      	bcc.n	8000a02 <__addsf3+0x92>
 80009f4:	0840      	lsrs	r0, r0, #1
 80009f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009fa:	f102 0201 	add.w	r2, r2, #1
 80009fe:	2afe      	cmp	r2, #254	; 0xfe
 8000a00:	d251      	bcs.n	8000aa6 <__addsf3+0x136>
 8000a02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a0a:	bf08      	it	eq
 8000a0c:	f020 0001 	biceq.w	r0, r0, #1
 8000a10:	ea40 0003 	orr.w	r0, r0, r3
 8000a14:	4770      	bx	lr
 8000a16:	0049      	lsls	r1, r1, #1
 8000a18:	eb40 0000 	adc.w	r0, r0, r0
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	bf28      	it	cs
 8000a20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a24:	d2ed      	bcs.n	8000a02 <__addsf3+0x92>
 8000a26:	fab0 fc80 	clz	ip, r0
 8000a2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a36:	bfaa      	itet	ge
 8000a38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a3c:	4252      	neglt	r2, r2
 8000a3e:	4318      	orrge	r0, r3
 8000a40:	bfbc      	itt	lt
 8000a42:	40d0      	lsrlt	r0, r2
 8000a44:	4318      	orrlt	r0, r3
 8000a46:	4770      	bx	lr
 8000a48:	f092 0f00 	teq	r2, #0
 8000a4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a50:	bf06      	itte	eq
 8000a52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a56:	3201      	addeq	r2, #1
 8000a58:	3b01      	subne	r3, #1
 8000a5a:	e7b5      	b.n	80009c8 <__addsf3+0x58>
 8000a5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6a:	d021      	beq.n	8000ab0 <__addsf3+0x140>
 8000a6c:	ea92 0f03 	teq	r2, r3
 8000a70:	d004      	beq.n	8000a7c <__addsf3+0x10c>
 8000a72:	f092 0f00 	teq	r2, #0
 8000a76:	bf08      	it	eq
 8000a78:	4608      	moveq	r0, r1
 8000a7a:	4770      	bx	lr
 8000a7c:	ea90 0f01 	teq	r0, r1
 8000a80:	bf1c      	itt	ne
 8000a82:	2000      	movne	r0, #0
 8000a84:	4770      	bxne	lr
 8000a86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a8a:	d104      	bne.n	8000a96 <__addsf3+0x126>
 8000a8c:	0040      	lsls	r0, r0, #1
 8000a8e:	bf28      	it	cs
 8000a90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a9a:	bf3c      	itt	cc
 8000a9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bxcc	lr
 8000aa2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	4770      	bx	lr
 8000ab0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ab4:	bf16      	itet	ne
 8000ab6:	4608      	movne	r0, r1
 8000ab8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000abc:	4601      	movne	r1, r0
 8000abe:	0242      	lsls	r2, r0, #9
 8000ac0:	bf06      	itte	eq
 8000ac2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ac6:	ea90 0f01 	teqeq	r0, r1
 8000aca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_ui2f>:
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e004      	b.n	8000ae0 <__aeabi_i2f+0x8>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_i2f>:
 8000ad8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000adc:	bf48      	it	mi
 8000ade:	4240      	negmi	r0, r0
 8000ae0:	ea5f 0c00 	movs.w	ip, r0
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000aec:	4601      	mov	r1, r0
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	e01c      	b.n	8000b2e <__aeabi_l2f+0x2a>

08000af4 <__aeabi_ul2f>:
 8000af4:	ea50 0201 	orrs.w	r2, r0, r1
 8000af8:	bf08      	it	eq
 8000afa:	4770      	bxeq	lr
 8000afc:	f04f 0300 	mov.w	r3, #0
 8000b00:	e00a      	b.n	8000b18 <__aeabi_l2f+0x14>
 8000b02:	bf00      	nop

08000b04 <__aeabi_l2f>:
 8000b04:	ea50 0201 	orrs.w	r2, r0, r1
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__aeabi_l2f+0x14>
 8000b12:	4240      	negs	r0, r0
 8000b14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b18:	ea5f 0c01 	movs.w	ip, r1
 8000b1c:	bf02      	ittt	eq
 8000b1e:	4684      	moveq	ip, r0
 8000b20:	4601      	moveq	r1, r0
 8000b22:	2000      	moveq	r0, #0
 8000b24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b28:	bf08      	it	eq
 8000b2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b32:	fabc f28c 	clz	r2, ip
 8000b36:	3a08      	subs	r2, #8
 8000b38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b3c:	db10      	blt.n	8000b60 <__aeabi_l2f+0x5c>
 8000b3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b42:	4463      	add	r3, ip
 8000b44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b50:	fa20 f202 	lsr.w	r2, r0, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f102 0220 	add.w	r2, r2, #32
 8000b64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b70:	fa21 f202 	lsr.w	r2, r1, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b7e:	4770      	bx	lr

08000b80 <__gesf2>:
 8000b80:	f04f 3cff 	mov.w	ip, #4294967295
 8000b84:	e006      	b.n	8000b94 <__cmpsf2+0x4>
 8000b86:	bf00      	nop

08000b88 <__lesf2>:
 8000b88:	f04f 0c01 	mov.w	ip, #1
 8000b8c:	e002      	b.n	8000b94 <__cmpsf2+0x4>
 8000b8e:	bf00      	nop

08000b90 <__cmpsf2>:
 8000b90:	f04f 0c01 	mov.w	ip, #1
 8000b94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba4:	bf18      	it	ne
 8000ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000baa:	d011      	beq.n	8000bd0 <__cmpsf2+0x40>
 8000bac:	b001      	add	sp, #4
 8000bae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bb2:	bf18      	it	ne
 8000bb4:	ea90 0f01 	teqne	r0, r1
 8000bb8:	bf58      	it	pl
 8000bba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bbe:	bf88      	it	hi
 8000bc0:	17c8      	asrhi	r0, r1, #31
 8000bc2:	bf38      	it	cc
 8000bc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc8:	bf18      	it	ne
 8000bca:	f040 0001 	orrne.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd4:	d102      	bne.n	8000bdc <__cmpsf2+0x4c>
 8000bd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bda:	d105      	bne.n	8000be8 <__cmpsf2+0x58>
 8000bdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000be0:	d1e4      	bne.n	8000bac <__cmpsf2+0x1c>
 8000be2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be6:	d0e1      	beq.n	8000bac <__cmpsf2+0x1c>
 8000be8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_cfrcmple>:
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4661      	mov	r1, ip
 8000bf6:	e7ff      	b.n	8000bf8 <__aeabi_cfcmpeq>

08000bf8 <__aeabi_cfcmpeq>:
 8000bf8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bfa:	f7ff ffc9 	bl	8000b90 <__cmpsf2>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	bf48      	it	mi
 8000c02:	f110 0f00 	cmnmi.w	r0, #0
 8000c06:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c08 <__aeabi_fcmpeq>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff fff4 	bl	8000bf8 <__aeabi_cfcmpeq>
 8000c10:	bf0c      	ite	eq
 8000c12:	2001      	moveq	r0, #1
 8000c14:	2000      	movne	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_fcmplt>:
 8000c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c20:	f7ff ffea 	bl	8000bf8 <__aeabi_cfcmpeq>
 8000c24:	bf34      	ite	cc
 8000c26:	2001      	movcc	r0, #1
 8000c28:	2000      	movcs	r0, #0
 8000c2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2e:	bf00      	nop

08000c30 <__aeabi_fcmple>:
 8000c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c34:	f7ff ffe0 	bl	8000bf8 <__aeabi_cfcmpeq>
 8000c38:	bf94      	ite	ls
 8000c3a:	2001      	movls	r0, #1
 8000c3c:	2000      	movhi	r0, #0
 8000c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c42:	bf00      	nop

08000c44 <__aeabi_fcmpge>:
 8000c44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c48:	f7ff ffd2 	bl	8000bf0 <__aeabi_cfrcmple>
 8000c4c:	bf94      	ite	ls
 8000c4e:	2001      	movls	r0, #1
 8000c50:	2000      	movhi	r0, #0
 8000c52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c56:	bf00      	nop

08000c58 <__aeabi_fcmpgt>:
 8000c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c5c:	f7ff ffc8 	bl	8000bf0 <__aeabi_cfrcmple>
 8000c60:	bf34      	ite	cc
 8000c62:	2001      	movcc	r0, #1
 8000c64:	2000      	movcs	r0, #0
 8000c66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6a:	bf00      	nop

08000c6c <__aeabi_f2iz>:
 8000c6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c74:	d30f      	bcc.n	8000c96 <__aeabi_f2iz+0x2a>
 8000c76:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c7e:	d90d      	bls.n	8000c9c <__aeabi_f2iz+0x30>
 8000c80:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c88:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c90:	bf18      	it	ne
 8000c92:	4240      	negne	r0, r0
 8000c94:	4770      	bx	lr
 8000c96:	f04f 0000 	mov.w	r0, #0
 8000c9a:	4770      	bx	lr
 8000c9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_f2iz+0x3a>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d105      	bne.n	8000cb2 <__aeabi_f2iz+0x46>
 8000ca6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000caa:	bf08      	it	eq
 8000cac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cb0:	4770      	bx	lr
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b0e7      	sub	sp, #412	; 0x19c
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 faff 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f877 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc6:	f000 f985 	bl	8000fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cca:	f000 f965 	bl	8000f98 <MX_DMA_Init>
  MX_TIM3_Init();
 8000cce:	f000 f8b7 	bl	8000e40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  for(uint8_t i=0; i<200; i++){
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000cd8:	e052      	b.n	8000d80 <main+0xc8>
	  angle = ASR*(float)i;
 8000cda:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fef6 	bl	8000ad0 <__aeabi_ui2f>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd74 	bl	80007d4 <__aeabi_f2d>
 8000cec:	a32a      	add	r3, pc, #168	; (adr r3, 8000d98 <main+0xe0>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	f7ff fa2d 	bl	8000150 <__aeabi_dmul>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f7ff fde1 	bl	80008c4 <__aeabi_d2f>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	  IV[i] = (uint16_t) rint(100 + 99*sinf(angle*(PI/180)));
 8000d08:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8000d0c:	f7ff fd62 	bl	80007d4 <__aeabi_f2d>
 8000d10:	a323      	add	r3, pc, #140	; (adr r3, 8000da0 <main+0xe8>)
 8000d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d16:	f7ff fa1b 	bl	8000150 <__aeabi_dmul>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fdcf 	bl	80008c4 <__aeabi_d2f>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fda1 	bl	8003870 <sinf>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	491d      	ldr	r1, [pc, #116]	; (8000da8 <main+0xf0>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fb36 	bl	80003a4 <__aeabi_fmul>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	491c      	ldr	r1, [pc, #112]	; (8000dac <main+0xf4>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe17 	bl	8000970 <__addsf3>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd45 	bl	80007d4 <__aeabi_f2d>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f002 fdc7 	bl	80038e4 <rint>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	f897 4197 	ldrb.w	r4, [r7, #407]	; 0x197
 8000d5e:	4610      	mov	r0, r2
 8000d60:	4619      	mov	r1, r3
 8000d62:	f7ff fd8f 	bl	8000884 <__aeabi_d2uiz>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000d6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000d72:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for(uint8_t i=0; i<200; i++){
 8000d76:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000d80:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000d84:	2bc7      	cmp	r3, #199	; 0xc7
 8000d86:	d9a8      	bls.n	8000cda <main+0x22>
  }
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)IV, 200);
 8000d88:	463a      	mov	r2, r7
 8000d8a:	23c8      	movs	r3, #200	; 0xc8
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4808      	ldr	r0, [pc, #32]	; (8000db0 <main+0xf8>)
 8000d90:	f001 fc16 	bl	80025c0 <HAL_TIM_PWM_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <main+0xdc>
 8000d96:	bf00      	nop
 8000d98:	cccccccd 	.word	0xcccccccd
 8000d9c:	3ffccccc 	.word	0x3ffccccc
 8000da0:	a50de270 	.word	0xa50de270
 8000da4:	3f91df45 	.word	0x3f91df45
 8000da8:	42c60000 	.word	0x42c60000
 8000dac:	42c80000 	.word	0x42c80000
 8000db0:	20000028 	.word	0x20000028

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b090      	sub	sp, #64	; 0x40
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fd28 	bl	8003818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000df2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 ff59 	bl	8001cb4 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e08:	f000 f930 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2302      	movs	r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 f9c6 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e32:	f000 f91b 	bl	800106c <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3740      	adds	r7, #64	; 0x40
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b092      	sub	sp, #72	; 0x48
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e80:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000e82:	4a42      	ldr	r2, [pc, #264]	; (8000f8c <MX_TIM3_Init+0x14c>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8000e86:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000e88:	2217      	movs	r2, #23
 8000e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000e94:	22c7      	movs	r2, #199	; 0xc7
 8000e96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea6:	4838      	ldr	r0, [pc, #224]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000ea8:	f001 fae2 	bl	8002470 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000eb2:	f000 f8db 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4831      	ldr	r0, [pc, #196]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000ec4:	f001 fee8 	bl	8002c98 <HAL_TIM_ConfigClockSource>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ece:	f000 f8cd 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed2:	482d      	ldr	r0, [pc, #180]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000ed4:	f001 fb1b 	bl	800250e <HAL_TIM_PWM_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000ede:	f000 f8c5 	bl	800106c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4825      	ldr	r0, [pc, #148]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000ef2:	f001 ff98 	bl	8002e26 <HAL_TIM_SlaveConfigSynchro>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000efc:	f000 f8b6 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481e      	ldr	r0, [pc, #120]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000f10:	f002 fc12 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000f1a:	f000 f8a7 	bl	800106c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1e:	2360      	movs	r3, #96	; 0x60
 8000f20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000f36:	f001 fded 	bl	8002b14 <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f40:	f000 f894 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_TIM3_Init+0x150>)
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <MX_TIM3_Init+0x154>)
 8000f48:	601a      	str	r2, [r3, #0]
  hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_TIM3_Init+0x150>)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	605a      	str	r2, [r3, #4]
  hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_TIM3_Init+0x150>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_TIM3_Init+0x150>)
 8000f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5c:	611a      	str	r2, [r3, #16]
  hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_TIM3_Init+0x150>)
 8000f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f64:	615a      	str	r2, [r3, #20]
  hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_TIM3_Init+0x150>)
 8000f68:	2220      	movs	r2, #32
 8000f6a:	619a      	str	r2, [r3, #24]
  hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_TIM3_Init+0x150>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim3_ch1_trig);
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM3_Init+0x150>)
 8000f74:	f000 fb14 	bl	80015a0 <HAL_DMA_Init>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <MX_TIM3_Init+0x148>)
 8000f7a:	f000 f907 	bl	800118c <HAL_TIM_MspPostInit>

}
 8000f7e:	bf00      	nop
 8000f80:	3748      	adds	r7, #72	; 0x48
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000028 	.word	0x20000028
 8000f8c:	40000400 	.word	0x40000400
 8000f90:	20000070 	.word	0x20000070
 8000f94:	4002006c 	.word	0x4002006c

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6153      	str	r3, [r2, #20]
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_DMA_Init+0x38>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2010      	movs	r0, #16
 8000fbc:	f000 fab9 	bl	8001532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fc0:	2010      	movs	r0, #16
 8000fc2:	f000 fad2 	bl	800156a <HAL_NVIC_EnableIRQ>

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_GPIO_Init+0x90>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <MX_GPIO_Init+0x90>)
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_GPIO_Init+0x90>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0310 	and.w	r3, r3, #16
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_GPIO_Init+0x90>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a17      	ldr	r2, [pc, #92]	; (8001064 <MX_GPIO_Init+0x90>)
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_GPIO_Init+0x90>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_GPIO_Init+0x90>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <MX_GPIO_Init+0x90>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_GPIO_Init+0x90>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_GPIO_Init+0x94>)
 8001038:	f000 fe24 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800103c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_GPIO_Init+0x94>)
 8001056:	f000 fc91 	bl	800197c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105a:	bf00      	nop
 800105c:	3720      	adds	r7, #32
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	40011000 	.word	0x40011000

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_MspInit+0x5c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_MspInit+0x5c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x5c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_MspInit+0x5c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_MspInit+0x60>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_MspInit+0x60>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a24      	ldr	r2, [pc, #144]	; (800117c <HAL_TIM_Base_MspInit+0xa0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d141      	bne.n	8001172 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <HAL_TIM_Base_MspInit+0xa4>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a23      	ldr	r2, [pc, #140]	; (8001180 <HAL_TIM_Base_MspInit+0xa4>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_TIM_Base_MspInit+0xa4>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 8001108:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <HAL_TIM_Base_MspInit+0xac>)
 800110a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 800110e:	2210      	movs	r2, #16
 8001110:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 8001130:	2220      	movs	r2, #32
 8001132:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 800113c:	f000 fa30 	bl	80015a0 <HAL_DMA_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001146:	f7ff ff91 	bl	800106c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 800115a:	639a      	str	r2, [r3, #56]	; 0x38
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0xa8>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	201d      	movs	r0, #29
 8001168:	f000 f9e3 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800116c:	201d      	movs	r0, #29
 800116e:	f000 f9fc 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40000400 	.word	0x40000400
 8001180:	40021000 	.word	0x40021000
 8001184:	20000070 	.word	0x20000070
 8001188:	4002006c 	.word	0x4002006c

0800118c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <HAL_TIM_MspPostInit+0x58>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d117      	bne.n	80011dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_TIM_MspPostInit+0x5c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_TIM_MspPostInit+0x5c>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_TIM_MspPostInit+0x5c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_TIM_MspPostInit+0x60>)
 80011d8:	f000 fbd0 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40000400 	.word	0x40000400
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010800 	.word	0x40010800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f889 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <DMA1_Channel6_IRQHandler+0x10>)
 8001246:	f000 fa65 	bl	8001714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000070 	.word	0x20000070

08001254 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <TIM3_IRQHandler+0x10>)
 800125a:	f001 fb53 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000028 	.word	0x20000028

08001268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001274:	f7ff fff8 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800127a:	490c      	ldr	r1, [pc, #48]	; (80012ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800127c:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001290:	4c09      	ldr	r4, [pc, #36]	; (80012b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129e:	f002 fac3 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012a2:	f7ff fd09 	bl	8000cb8 <main>
  bx lr
 80012a6:	4770      	bx	lr
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012b0:	08004950 	.word	0x08004950
  ldr r2, =_sbss
 80012b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b8:	200000b8 	.word	0x200000b8

080012bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC1_2_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x28>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x28>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f923 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	200f      	movs	r0, #15
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fecc 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f93b 	bl	8001586 <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f903 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	20000008 	.word	0x20000008
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x1c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x20>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a03      	ldr	r2, [pc, #12]	; (800136c <HAL_IncTick+0x20>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000008 	.word	0x20000008
 800136c:	200000b4 	.word	0x200000b4

08001370 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b02      	ldr	r3, [pc, #8]	; (8001380 <HAL_GetTick+0x10>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	200000b4 	.word	0x200000b4

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4906      	ldr	r1, [pc, #24]	; (800141c <__NVIC_EnableIRQ+0x34>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	; (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff90 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff2d 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff42 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff90 	bl	8001474 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5f 	bl	8001420 <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff35 	bl	80013e8 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e043      	b.n	800163e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_DMA_Init+0xa8>)
 80015be:	4413      	add	r3, r2
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <HAL_DMA_Init+0xac>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	009a      	lsls	r2, r3, #2
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <HAL_DMA_Init+0xb0>)
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	bffdfff8 	.word	0xbffdfff8
 800164c:	cccccccd 	.word	0xcccccccd
 8001650:	40020000 	.word	0x40020000

08001654 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_DMA_Start_IT+0x20>
 8001670:	2302      	movs	r3, #2
 8001672:	e04b      	b.n	800170c <HAL_DMA_Start_IT+0xb8>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d13a      	bne.n	80016fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2202      	movs	r2, #2
 800168c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f937 	bl	8001920 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 020e 	orr.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	e00f      	b.n	80016ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0204 	bic.w	r2, r2, #4
 80016da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 020a 	orr.w	r2, r2, #10
 80016ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e005      	b.n	800170a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001706:	2302      	movs	r3, #2
 8001708:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800170a:	7dfb      	ldrb	r3, [r7, #23]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2204      	movs	r2, #4
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d04f      	beq.n	80017dc <HAL_DMA_IRQHandler+0xc8>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d04a      	beq.n	80017dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0204 	bic.w	r2, r2, #4
 8001762:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a66      	ldr	r2, [pc, #408]	; (8001904 <HAL_DMA_IRQHandler+0x1f0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d029      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xae>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a65      	ldr	r2, [pc, #404]	; (8001908 <HAL_DMA_IRQHandler+0x1f4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d022      	beq.n	80017be <HAL_DMA_IRQHandler+0xaa>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a63      	ldr	r2, [pc, #396]	; (800190c <HAL_DMA_IRQHandler+0x1f8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d01a      	beq.n	80017b8 <HAL_DMA_IRQHandler+0xa4>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a62      	ldr	r2, [pc, #392]	; (8001910 <HAL_DMA_IRQHandler+0x1fc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d012      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x9e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a60      	ldr	r2, [pc, #384]	; (8001914 <HAL_DMA_IRQHandler+0x200>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00a      	beq.n	80017ac <HAL_DMA_IRQHandler+0x98>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a5f      	ldr	r2, [pc, #380]	; (8001918 <HAL_DMA_IRQHandler+0x204>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d102      	bne.n	80017a6 <HAL_DMA_IRQHandler+0x92>
 80017a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a4:	e00e      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017aa:	e00b      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017b0:	e008      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b6:	e005      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017bc:	e002      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017be:	2340      	movs	r3, #64	; 0x40
 80017c0:	e000      	b.n	80017c4 <HAL_DMA_IRQHandler+0xb0>
 80017c2:	2304      	movs	r3, #4
 80017c4:	4a55      	ldr	r2, [pc, #340]	; (800191c <HAL_DMA_IRQHandler+0x208>)
 80017c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8094 	beq.w	80018fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017da:	e08e      	b.n	80018fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2202      	movs	r2, #2
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d056      	beq.n	800189a <HAL_DMA_IRQHandler+0x186>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d051      	beq.n	800189a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10b      	bne.n	800181c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020a 	bic.w	r2, r2, #10
 8001812:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a38      	ldr	r2, [pc, #224]	; (8001904 <HAL_DMA_IRQHandler+0x1f0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d029      	beq.n	800187a <HAL_DMA_IRQHandler+0x166>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a37      	ldr	r2, [pc, #220]	; (8001908 <HAL_DMA_IRQHandler+0x1f4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d022      	beq.n	8001876 <HAL_DMA_IRQHandler+0x162>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a35      	ldr	r2, [pc, #212]	; (800190c <HAL_DMA_IRQHandler+0x1f8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01a      	beq.n	8001870 <HAL_DMA_IRQHandler+0x15c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a34      	ldr	r2, [pc, #208]	; (8001910 <HAL_DMA_IRQHandler+0x1fc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d012      	beq.n	800186a <HAL_DMA_IRQHandler+0x156>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_DMA_IRQHandler+0x200>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00a      	beq.n	8001864 <HAL_DMA_IRQHandler+0x150>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a31      	ldr	r2, [pc, #196]	; (8001918 <HAL_DMA_IRQHandler+0x204>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d102      	bne.n	800185e <HAL_DMA_IRQHandler+0x14a>
 8001858:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800185c:	e00e      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 800185e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001862:	e00b      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 8001864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001868:	e008      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 800186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186e:	e005      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 8001870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001874:	e002      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 8001876:	2320      	movs	r3, #32
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x168>
 800187a:	2302      	movs	r3, #2
 800187c:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_DMA_IRQHandler+0x208>)
 800187e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	d034      	beq.n	80018fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001898:	e02f      	b.n	80018fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2208      	movs	r2, #8
 80018a0:	409a      	lsls	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d028      	beq.n	80018fc <HAL_DMA_IRQHandler+0x1e8>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d023      	beq.n	80018fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 020e 	bic.w	r2, r2, #14
 80018c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
    }
  }
  return;
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
}
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40020008 	.word	0x40020008
 8001908:	4002001c 	.word	0x4002001c
 800190c:	40020030 	.word	0x40020030
 8001910:	40020044 	.word	0x40020044
 8001914:	40020058 	.word	0x40020058
 8001918:	4002006c 	.word	0x4002006c
 800191c:	40020000 	.word	0x40020000

08001920 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d108      	bne.n	8001960 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800195e:	e007      	b.n	8001970 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	e169      	b.n	8001c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001990:	2201      	movs	r2, #1
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 8158 	bne.w	8001c5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a9a      	ldr	r2, [pc, #616]	; (8001c1c <HAL_GPIO_Init+0x2a0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d05e      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019b8:	4a98      	ldr	r2, [pc, #608]	; (8001c1c <HAL_GPIO_Init+0x2a0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d875      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019be:	4a98      	ldr	r2, [pc, #608]	; (8001c20 <HAL_GPIO_Init+0x2a4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d058      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019c4:	4a96      	ldr	r2, [pc, #600]	; (8001c20 <HAL_GPIO_Init+0x2a4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d86f      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019ca:	4a96      	ldr	r2, [pc, #600]	; (8001c24 <HAL_GPIO_Init+0x2a8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d052      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019d0:	4a94      	ldr	r2, [pc, #592]	; (8001c24 <HAL_GPIO_Init+0x2a8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d869      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019d6:	4a94      	ldr	r2, [pc, #592]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d04c      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019dc:	4a92      	ldr	r2, [pc, #584]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d863      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019e2:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d046      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019e8:	4a90      	ldr	r2, [pc, #576]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d85d      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d82a      	bhi.n	8001a48 <HAL_GPIO_Init+0xcc>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d859      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <HAL_GPIO_Init+0x80>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a77 	.word	0x08001a77
 8001a00:	08001a51 	.word	0x08001a51
 8001a04:	08001a63 	.word	0x08001a63
 8001a08:	08001aa5 	.word	0x08001aa5
 8001a0c:	08001aab 	.word	0x08001aab
 8001a10:	08001aab 	.word	0x08001aab
 8001a14:	08001aab 	.word	0x08001aab
 8001a18:	08001aab 	.word	0x08001aab
 8001a1c:	08001aab 	.word	0x08001aab
 8001a20:	08001aab 	.word	0x08001aab
 8001a24:	08001aab 	.word	0x08001aab
 8001a28:	08001aab 	.word	0x08001aab
 8001a2c:	08001aab 	.word	0x08001aab
 8001a30:	08001aab 	.word	0x08001aab
 8001a34:	08001aab 	.word	0x08001aab
 8001a38:	08001aab 	.word	0x08001aab
 8001a3c:	08001aab 	.word	0x08001aab
 8001a40:	08001a59 	.word	0x08001a59
 8001a44:	08001a6d 	.word	0x08001a6d
 8001a48:	4a79      	ldr	r2, [pc, #484]	; (8001c30 <HAL_GPIO_Init+0x2b4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a4e:	e02c      	b.n	8001aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e029      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e024      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	3308      	adds	r3, #8
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e01f      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	330c      	adds	r3, #12
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e01a      	b.n	8001aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e013      	b.n	8001aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	611a      	str	r2, [r3, #16]
          break;
 8001a96:	e009      	b.n	8001aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	615a      	str	r2, [r3, #20]
          break;
 8001aa2:	e003      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x130>
          break;
 8001aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d801      	bhi.n	8001ab6 <HAL_GPIO_Init+0x13a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	e001      	b.n	8001aba <HAL_GPIO_Init+0x13e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d802      	bhi.n	8001ac8 <HAL_GPIO_Init+0x14c>
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x152>
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	3b08      	subs	r3, #8
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	6a39      	ldr	r1, [r7, #32]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80b1 	beq.w	8001c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001afc:	4b4d      	ldr	r3, [pc, #308]	; (8001c34 <HAL_GPIO_Init+0x2b8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a4c      	ldr	r2, [pc, #304]	; (8001c34 <HAL_GPIO_Init+0x2b8>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_GPIO_Init+0x2b8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b14:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <HAL_GPIO_Init+0x2bc>)
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a40      	ldr	r2, [pc, #256]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d013      	beq.n	8001b68 <HAL_GPIO_Init+0x1ec>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <HAL_GPIO_Init+0x2c4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00d      	beq.n	8001b64 <HAL_GPIO_Init+0x1e8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3e      	ldr	r2, [pc, #248]	; (8001c44 <HAL_GPIO_Init+0x2c8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d007      	beq.n	8001b60 <HAL_GPIO_Init+0x1e4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_GPIO_Init+0x1e0>
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e006      	b.n	8001b6a <HAL_GPIO_Init+0x1ee>
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	e004      	b.n	8001b6a <HAL_GPIO_Init+0x1ee>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x1ee>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_GPIO_Init+0x1ee>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6c:	f002 0203 	and.w	r2, r2, #3
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4093      	lsls	r3, r2
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7a:	492f      	ldr	r1, [pc, #188]	; (8001c38 <HAL_GPIO_Init+0x2bc>)
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	492c      	ldr	r1, [pc, #176]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4928      	ldr	r1, [pc, #160]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4922      	ldr	r1, [pc, #136]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	491e      	ldr	r1, [pc, #120]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4918      	ldr	r1, [pc, #96]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4914      	ldr	r1, [pc, #80]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d021      	beq.n	8001c50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e021      	b.n	8001c5e <HAL_GPIO_Init+0x2e2>
 8001c1a:	bf00      	nop
 8001c1c:	10320000 	.word	0x10320000
 8001c20:	10310000 	.word	0x10310000
 8001c24:	10220000 	.word	0x10220000
 8001c28:	10210000 	.word	0x10210000
 8001c2c:	10120000 	.word	0x10120000
 8001c30:	10110000 	.word	0x10110000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	40010c00 	.word	0x40010c00
 8001c44:	40011000 	.word	0x40011000
 8001c48:	40011400 	.word	0x40011400
 8001c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	4909      	ldr	r1, [pc, #36]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	3301      	adds	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f47f ae8e 	bne.w	8001990 <HAL_GPIO_Init+0x14>
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	372c      	adds	r7, #44	; 0x2c
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca0:	e003      	b.n	8001caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e272      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8087 	beq.w	8001de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d00c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce0:	4b8f      	ldr	r3, [pc, #572]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d112      	bne.n	8001d12 <HAL_RCC_OscConfig+0x5e>
 8001cec:	4b8c      	ldr	r3, [pc, #560]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf8:	d10b      	bne.n	8001d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfa:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d06c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x12c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d168      	bne.n	8001de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e24c      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x76>
 8001d1c:	4b80      	ldr	r3, [pc, #512]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a7f      	ldr	r2, [pc, #508]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	e02e      	b.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x98>
 8001d32:	4b7b      	ldr	r3, [pc, #492]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a7a      	ldr	r2, [pc, #488]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b78      	ldr	r3, [pc, #480]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a77      	ldr	r2, [pc, #476]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0xbc>
 8001d56:	4b72      	ldr	r3, [pc, #456]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a71      	ldr	r2, [pc, #452]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xd4>
 8001d70:	4b6b      	ldr	r3, [pc, #428]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a6a      	ldr	r2, [pc, #424]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a67      	ldr	r2, [pc, #412]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff faee 	bl	8001370 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff faea 	bl	8001370 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e200      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe4>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fada 	bl	8001370 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fad6 	bl	8001370 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1ec      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x10c>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d063      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dee:	4b4c      	ldr	r3, [pc, #304]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dfa:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x18c>
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x176>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1c0      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4939      	ldr	r1, [pc, #228]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fa8f 	bl	8001370 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fa8b 	bl	8001370 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1a1      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4927      	ldr	r1, [pc, #156]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fa6e 	bl	8001370 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff fa6a 	bl	8001370 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e180      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03a      	beq.n	8001f38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d019      	beq.n	8001efe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fa4e 	bl	8001370 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fa4a 	bl	8001370 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e160      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f000 fa9c 	bl	8002434 <RCC_Delay>
 8001efc:	e01c      	b.n	8001f38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_RCC_OscConfig+0x274>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f04:	f7ff fa34 	bl	8001370 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0a:	e00f      	b.n	8001f2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fa30 	bl	8001370 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d908      	bls.n	8001f2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e146      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	42420000 	.word	0x42420000
 8001f28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	4b92      	ldr	r3, [pc, #584]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1e9      	bne.n	8001f0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a6 	beq.w	8002092 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4a:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a87      	ldr	r2, [pc, #540]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b85      	ldr	r3, [pc, #532]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x4c8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d118      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <HAL_RCC_OscConfig+0x4c8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7e      	ldr	r2, [pc, #504]	; (800217c <HAL_RCC_OscConfig+0x4c8>)
 8001f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f9f1 	bl	8001370 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f92:	f7ff f9ed 	bl	8001370 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b64      	cmp	r3, #100	; 0x64
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e103      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	4b75      	ldr	r3, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x4c8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x312>
 8001fb8:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	e02d      	b.n	8002022 <HAL_RCC_OscConfig+0x36e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x334>
 8001fce:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a69      	ldr	r2, [pc, #420]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a66      	ldr	r2, [pc, #408]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	e01c      	b.n	8002022 <HAL_RCC_OscConfig+0x36e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_OscConfig+0x356>
 8001ff0:	4b61      	ldr	r3, [pc, #388]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a60      	ldr	r2, [pc, #384]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a5d      	ldr	r2, [pc, #372]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	e00b      	b.n	8002022 <HAL_RCC_OscConfig+0x36e>
 800200a:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a5a      	ldr	r2, [pc, #360]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	4b58      	ldr	r3, [pc, #352]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d015      	beq.n	8002056 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7ff f9a1 	bl	8001370 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff f99d 	bl	8001370 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0b1      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ee      	beq.n	8002032 <HAL_RCC_OscConfig+0x37e>
 8002054:	e014      	b.n	8002080 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7ff f98b 	bl	8001370 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff f987 	bl	8001370 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e09b      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ee      	bne.n	800205e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4a3b      	ldr	r2, [pc, #236]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d061      	beq.n	800216c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d146      	bne.n	800213e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7ff f95b 	bl	8001370 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020be:	f7ff f957 	bl	8001370 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e06d      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d108      	bne.n	80020f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	4921      	ldr	r1, [pc, #132]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a19      	ldr	r1, [r3, #32]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	430b      	orrs	r3, r1
 800210a:	491b      	ldr	r1, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7ff f92b 	bl	8001370 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff f927 	bl	8001370 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e03d      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x46a>
 800213c:	e035      	b.n	80021aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff f914 	bl	8001370 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff f910 	bl	8001370 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e026      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x498>
 800216a:	e01e      	b.n	80021aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d107      	bne.n	8002184 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e019      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
 8002180:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x500>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	429a      	cmp	r2, r3
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0d0      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d910      	bls.n	80021fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b67      	ldr	r3, [pc, #412]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 0207 	bic.w	r2, r3, #7
 80021e2:	4965      	ldr	r1, [pc, #404]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0b8      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002214:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a58      	ldr	r2, [pc, #352]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800221e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b50      	ldr	r3, [pc, #320]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	494d      	ldr	r1, [pc, #308]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d040      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d115      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e07f      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b41      	ldr	r3, [pc, #260]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e073      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b3d      	ldr	r3, [pc, #244]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06b      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4936      	ldr	r1, [pc, #216]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7ff f862 	bl	8001370 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7ff f85e 	bl	8001370 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e053      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d210      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0207 	bic.w	r2, r3, #7
 80022ee:	4922      	ldr	r1, [pc, #136]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e032      	b.n	800236e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4916      	ldr	r1, [pc, #88]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	490e      	ldr	r1, [pc, #56]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002346:	f000 f821 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800234a:	4602      	mov	r2, r0
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	490a      	ldr	r1, [pc, #40]	; (8002380 <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	5ccb      	ldrb	r3, [r1, r3]
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1cc>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1d0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe ffc0 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40022000 	.word	0x40022000
 800237c:	40021000 	.word	0x40021000
 8002380:	08004540 	.word	0x08004540
 8002384:	20000000 	.word	0x20000000
 8002388:	20000004 	.word	0x20000004

0800238c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x30>
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ba:	e027      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 80023be:	613b      	str	r3, [r7, #16]
      break;
 80023c0:	e027      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d010      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_GetSysClockFreq+0x94>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	0c5b      	lsrs	r3, r3, #17
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	4a11      	ldr	r2, [pc, #68]	; (800242c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ee:	fb03 f202 	mul.w	r2, r3, r2
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e004      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	613b      	str	r3, [r7, #16]
      break;
 800240a:	e002      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetSysClockFreq+0x98>)
 800240e:	613b      	str	r3, [r7, #16]
      break;
 8002410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002412:	693b      	ldr	r3, [r7, #16]
}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	007a1200 	.word	0x007a1200
 8002428:	08004550 	.word	0x08004550
 800242c:	08004560 	.word	0x08004560
 8002430:	003d0900 	.word	0x003d0900

08002434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <RCC_Delay+0x34>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <RCC_Delay+0x38>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002450:	bf00      	nop
  }
  while (Delay --);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e5a      	subs	r2, r3, #1
 8002456:	60fa      	str	r2, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f9      	bne.n	8002450 <RCC_Delay+0x1c>
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000000 	.word	0x20000000
 800246c:	10624dd3 	.word	0x10624dd3

08002470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e041      	b.n	8002506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fe20 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f000 fe0c 	bl	80030cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e041      	b.n	80025a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f839 	bl	80025ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2202      	movs	r2, #2
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3304      	adds	r3, #4
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f000 fdbd 	bl	80030cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e022      	b.n	8002632 <HAL_TIM_PWM_Start_DMA+0x72>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d109      	bne.n	8002606 <HAL_TIM_PWM_Start_DMA+0x46>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e015      	b.n	8002632 <HAL_TIM_PWM_Start_DMA+0x72>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d109      	bne.n	8002620 <HAL_TIM_PWM_Start_DMA+0x60>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e008      	b.n	8002632 <HAL_TIM_PWM_Start_DMA+0x72>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
 8002638:	e153      	b.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_TIM_PWM_Start_DMA+0x94>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e022      	b.n	800269a <HAL_TIM_PWM_Start_DMA+0xda>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d109      	bne.n	800266e <HAL_TIM_PWM_Start_DMA+0xae>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e015      	b.n	800269a <HAL_TIM_PWM_Start_DMA+0xda>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d109      	bne.n	8002688 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e008      	b.n	800269a <HAL_TIM_PWM_Start_DMA+0xda>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d024      	beq.n	80026e8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_TIM_PWM_Start_DMA+0xea>
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e119      	b.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <HAL_TIM_PWM_Start_DMA+0xfe>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026bc:	e016      	b.n	80026ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_PWM_Start_DMA+0x10e>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026cc:	e00e      	b.n	80026ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d104      	bne.n	80026de <HAL_TIM_PWM_Start_DMA+0x11e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026dc:	e006      	b.n	80026ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026e6:	e001      	b.n	80026ec <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0fa      	b.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	f200 80ae 	bhi.w	8002850 <HAL_TIM_PWM_Start_DMA+0x290>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	08002731 	.word	0x08002731
 8002700:	08002851 	.word	0x08002851
 8002704:	08002851 	.word	0x08002851
 8002708:	08002851 	.word	0x08002851
 800270c:	08002779 	.word	0x08002779
 8002710:	08002851 	.word	0x08002851
 8002714:	08002851 	.word	0x08002851
 8002718:	08002851 	.word	0x08002851
 800271c:	080027c1 	.word	0x080027c1
 8002720:	08002851 	.word	0x08002851
 8002724:	08002851 	.word	0x08002851
 8002728:	08002851 	.word	0x08002851
 800272c:	08002809 	.word	0x08002809
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	4a6d      	ldr	r2, [pc, #436]	; (80028ec <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	4a6c      	ldr	r2, [pc, #432]	; (80028f0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	4a6b      	ldr	r2, [pc, #428]	; (80028f4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002746:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3334      	adds	r3, #52	; 0x34
 8002754:	461a      	mov	r2, r3
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	f7fe ff7c 	bl	8001654 <HAL_DMA_Start_IT>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0bd      	b.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002774:	60da      	str	r2, [r3, #12]
      break;
 8002776:	e06e      	b.n	8002856 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <HAL_TIM_PWM_Start_DMA+0x32c>)
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	4a5a      	ldr	r2, [pc, #360]	; (80028f0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	4a59      	ldr	r2, [pc, #356]	; (80028f4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800278e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3338      	adds	r3, #56	; 0x38
 800279c:	461a      	mov	r2, r3
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	f7fe ff58 	bl	8001654 <HAL_DMA_Start_IT>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e099      	b.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027bc:	60da      	str	r2, [r3, #12]
      break;
 80027be:	e04a      	b.n	8002856 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_TIM_PWM_Start_DMA+0x32c>)
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_TIM_PWM_Start_DMA+0x330>)
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_TIM_PWM_Start_DMA+0x334>)
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	333c      	adds	r3, #60	; 0x3c
 80027e4:	461a      	mov	r2, r3
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	f7fe ff34 	bl	8001654 <HAL_DMA_Start_IT>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e075      	b.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002804:	60da      	str	r2, [r3, #12]
      break;
 8002806:	e026      	b.n	8002856 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4a37      	ldr	r2, [pc, #220]	; (80028ec <HAL_TIM_PWM_Start_DMA+0x32c>)
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a36      	ldr	r2, [pc, #216]	; (80028f0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	4a35      	ldr	r2, [pc, #212]	; (80028f4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800281e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3340      	adds	r3, #64	; 0x40
 800282c:	461a      	mov	r2, r3
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	f7fe ff10 	bl	8001654 <HAL_DMA_Start_IT>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e051      	b.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800284c:	60da      	str	r2, [r3, #12]
      break;
 800284e:	e002      	b.n	8002856 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	75fb      	strb	r3, [r7, #23]
      break;
 8002854:	bf00      	nop
  }

  if (status == HAL_OK)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d141      	bne.n	80028e0 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 ff42 	bl	80036ee <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d107      	bne.n	8002884 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <HAL_TIM_PWM_Start_DMA+0x338>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00e      	beq.n	80028ac <HAL_TIM_PWM_Start_DMA+0x2ec>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002896:	d009      	beq.n	80028ac <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_TIM_PWM_Start_DMA+0x33c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_TIM_PWM_Start_DMA+0x2ec>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_TIM_PWM_Start_DMA+0x340>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d010      	beq.n	80028e0 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ce:	e007      	b.n	80028e0 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	08002fbb 	.word	0x08002fbb
 80028f0:	08003063 	.word	0x08003063
 80028f4:	08002f29 	.word	0x08002f29
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800

08002904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d122      	bne.n	8002960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d11b      	bne.n	8002960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0202 	mvn.w	r2, #2
 8002930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fac1 	bl	8002ece <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fab4 	bl	8002ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fac3 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b04      	cmp	r3, #4
 800296c:	d122      	bne.n	80029b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d11b      	bne.n	80029b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0204 	mvn.w	r2, #4
 8002984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa97 	bl	8002ece <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa8a 	bl	8002ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fa99 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d122      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d11b      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0208 	mvn.w	r2, #8
 80029d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2204      	movs	r2, #4
 80029de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa6d 	bl	8002ece <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa60 	bl	8002ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fa6f 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d122      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d11b      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0210 	mvn.w	r2, #16
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2208      	movs	r2, #8
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa43 	bl	8002ece <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa36 	bl	8002ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa45 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0201 	mvn.w	r2, #1
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa11 	bl	8002eaa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa0:	2b80      	cmp	r3, #128	; 0x80
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fea9 	bl	8003806 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b40      	cmp	r3, #64	; 0x40
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa12 	bl	8002f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0220 	mvn.w	r2, #32
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fe74 	bl	80037f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e0ae      	b.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	f200 809f 	bhi.w	8002c80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b7d 	.word	0x08002b7d
 8002b4c:	08002c81 	.word	0x08002c81
 8002b50:	08002c81 	.word	0x08002c81
 8002b54:	08002c81 	.word	0x08002c81
 8002b58:	08002bbd 	.word	0x08002bbd
 8002b5c:	08002c81 	.word	0x08002c81
 8002b60:	08002c81 	.word	0x08002c81
 8002b64:	08002c81 	.word	0x08002c81
 8002b68:	08002bff 	.word	0x08002bff
 8002b6c:	08002c81 	.word	0x08002c81
 8002b70:	08002c81 	.word	0x08002c81
 8002b74:	08002c81 	.word	0x08002c81
 8002b78:	08002c3f 	.word	0x08002c3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fb04 	bl	8003190 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0208 	orr.w	r2, r2, #8
 8002b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0204 	bic.w	r2, r2, #4
 8002ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6999      	ldr	r1, [r3, #24]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	619a      	str	r2, [r3, #24]
      break;
 8002bba:	e064      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fb4a 	bl	800325c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6999      	ldr	r1, [r3, #24]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	021a      	lsls	r2, r3, #8
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	619a      	str	r2, [r3, #24]
      break;
 8002bfc:	e043      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fb93 	bl	8003330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0208 	orr.w	r2, r2, #8
 8002c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0204 	bic.w	r2, r2, #4
 8002c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69d9      	ldr	r1, [r3, #28]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	61da      	str	r2, [r3, #28]
      break;
 8002c3c:	e023      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fbdd 	bl	8003404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69d9      	ldr	r1, [r3, #28]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	021a      	lsls	r2, r3, #8
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	61da      	str	r2, [r3, #28]
      break;
 8002c7e:	e002      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
      break;
 8002c84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0b4      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x186>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cec:	d03e      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0xd4>
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf2:	f200 8087 	bhi.w	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfa:	f000 8086 	beq.w	8002e0a <HAL_TIM_ConfigClockSource+0x172>
 8002cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d02:	d87f      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b70      	cmp	r3, #112	; 0x70
 8002d06:	d01a      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0xa6>
 8002d08:	2b70      	cmp	r3, #112	; 0x70
 8002d0a:	d87b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b60      	cmp	r3, #96	; 0x60
 8002d0e:	d050      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d10:	2b60      	cmp	r3, #96	; 0x60
 8002d12:	d877      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b50      	cmp	r3, #80	; 0x50
 8002d16:	d03c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xfa>
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d873      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d058      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d86f      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b30      	cmp	r3, #48	; 0x30
 8002d26:	d064      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d28:	2b30      	cmp	r3, #48	; 0x30
 8002d2a:	d86b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d060      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d867      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d05a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	e062      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d4e:	f000 fcaf 	bl	80036b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	609a      	str	r2, [r3, #8]
      break;
 8002d6a:	e04f      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d7c:	f000 fc98 	bl	80036b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d8e:	609a      	str	r2, [r3, #8]
      break;
 8002d90:	e03c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 fc0f 	bl	80035c2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2150      	movs	r1, #80	; 0x50
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fc66 	bl	800367c <TIM_ITRx_SetConfig>
      break;
 8002db0:	e02c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 fc2d 	bl	800361e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2160      	movs	r1, #96	; 0x60
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fc56 	bl	800367c <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e01c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 fbef 	bl	80035c2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2140      	movs	r1, #64	; 0x40
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fc46 	bl	800367c <TIM_ITRx_SetConfig>
      break;
 8002df0:	e00c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 fc3d 	bl	800367c <TIM_ITRx_SetConfig>
      break;
 8002e02:	e003      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
      break;
 8002e08:	e000      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_SlaveConfigSynchro+0x18>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e031      	b.n	8002ea2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fb25 	bl	80034a0 <TIM_SlaveTimer_SetConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e018      	b.n	8002ea2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e8e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d107      	bne.n	8002f50 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f4e:	e02a      	b.n	8002fa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d107      	bne.n	8002f6a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f68:	e01d      	b.n	8002fa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d107      	bne.n	8002f84 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2204      	movs	r2, #4
 8002f78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f82:	e010      	b.n	8002fa6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d107      	bne.n	8002f9e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2208      	movs	r2, #8
 8002f92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f9c:	e003      	b.n	8002fa6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff ffb5 	bl	8002f16 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	771a      	strb	r2, [r3, #28]
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d10b      	bne.n	8002fea <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d136      	bne.n	800304e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe8:	e031      	b.n	800304e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d10b      	bne.n	800300c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d125      	bne.n	800304e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300a:	e020      	b.n	800304e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d10b      	bne.n	800302e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2204      	movs	r2, #4
 800301a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d114      	bne.n	800304e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302c:	e00f      	b.n	800304e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d10a      	bne.n	800304e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2208      	movs	r2, #8
 800303c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff ff46 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	771a      	strb	r2, [r3, #28]
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d103      	bne.n	8003082 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	771a      	strb	r2, [r3, #28]
 8003080:	e019      	b.n	80030b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d103      	bne.n	8003094 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2202      	movs	r2, #2
 8003090:	771a      	strb	r2, [r3, #28]
 8003092:	e010      	b.n	80030b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d103      	bne.n	80030a6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2204      	movs	r2, #4
 80030a2:	771a      	strb	r2, [r3, #28]
 80030a4:	e007      	b.n	80030b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d102      	bne.n	80030b6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2208      	movs	r2, #8
 80030b4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff ff1b 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	771a      	strb	r2, [r3, #28]
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a29      	ldr	r2, [pc, #164]	; (8003184 <TIM_Base_SetConfig+0xb8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00b      	beq.n	80030fc <TIM_Base_SetConfig+0x30>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d007      	beq.n	80030fc <TIM_Base_SetConfig+0x30>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a26      	ldr	r2, [pc, #152]	; (8003188 <TIM_Base_SetConfig+0xbc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_Base_SetConfig+0x30>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a25      	ldr	r2, [pc, #148]	; (800318c <TIM_Base_SetConfig+0xc0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d108      	bne.n	800310e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <TIM_Base_SetConfig+0xb8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00b      	beq.n	800312e <TIM_Base_SetConfig+0x62>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d007      	beq.n	800312e <TIM_Base_SetConfig+0x62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a19      	ldr	r2, [pc, #100]	; (8003188 <TIM_Base_SetConfig+0xbc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_Base_SetConfig+0x62>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <TIM_Base_SetConfig+0xc0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d108      	bne.n	8003140 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a07      	ldr	r2, [pc, #28]	; (8003184 <TIM_Base_SetConfig+0xb8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d103      	bne.n	8003174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	615a      	str	r2, [r3, #20]
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800

08003190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f023 0201 	bic.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 0302 	bic.w	r3, r3, #2
 80031d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <TIM_OC1_SetConfig+0xc8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d10c      	bne.n	8003206 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0308 	bic.w	r3, r3, #8
 80031f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f023 0304 	bic.w	r3, r3, #4
 8003204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a13      	ldr	r2, [pc, #76]	; (8003258 <TIM_OC1_SetConfig+0xc8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d111      	bne.n	8003232 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	621a      	str	r2, [r3, #32]
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40012c00 	.word	0x40012c00

0800325c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f023 0210 	bic.w	r2, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f023 0320 	bic.w	r3, r3, #32
 80032a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <TIM_OC2_SetConfig+0xd0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10d      	bne.n	80032d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <TIM_OC2_SetConfig+0xd0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d113      	bne.n	8003308 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	40012c00 	.word	0x40012c00

08003330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <TIM_OC3_SetConfig+0xd0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10d      	bne.n	80033aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <TIM_OC3_SetConfig+0xd0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d113      	bne.n	80033da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40012c00 	.word	0x40012c00

08003404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800344e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	031b      	lsls	r3, r3, #12
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0f      	ldr	r2, [pc, #60]	; (800349c <TIM_OC4_SetConfig+0x98>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d109      	bne.n	8003478 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40012c00 	.word	0x40012c00

080034a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f023 0307 	bic.w	r3, r3, #7
 80034ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b70      	cmp	r3, #112	; 0x70
 80034e8:	d01a      	beq.n	8003520 <TIM_SlaveTimer_SetConfig+0x80>
 80034ea:	2b70      	cmp	r3, #112	; 0x70
 80034ec:	d860      	bhi.n	80035b0 <TIM_SlaveTimer_SetConfig+0x110>
 80034ee:	2b60      	cmp	r3, #96	; 0x60
 80034f0:	d054      	beq.n	800359c <TIM_SlaveTimer_SetConfig+0xfc>
 80034f2:	2b60      	cmp	r3, #96	; 0x60
 80034f4:	d85c      	bhi.n	80035b0 <TIM_SlaveTimer_SetConfig+0x110>
 80034f6:	2b50      	cmp	r3, #80	; 0x50
 80034f8:	d046      	beq.n	8003588 <TIM_SlaveTimer_SetConfig+0xe8>
 80034fa:	2b50      	cmp	r3, #80	; 0x50
 80034fc:	d858      	bhi.n	80035b0 <TIM_SlaveTimer_SetConfig+0x110>
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d019      	beq.n	8003536 <TIM_SlaveTimer_SetConfig+0x96>
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d854      	bhi.n	80035b0 <TIM_SlaveTimer_SetConfig+0x110>
 8003506:	2b30      	cmp	r3, #48	; 0x30
 8003508:	d055      	beq.n	80035b6 <TIM_SlaveTimer_SetConfig+0x116>
 800350a:	2b30      	cmp	r3, #48	; 0x30
 800350c:	d850      	bhi.n	80035b0 <TIM_SlaveTimer_SetConfig+0x110>
 800350e:	2b20      	cmp	r3, #32
 8003510:	d051      	beq.n	80035b6 <TIM_SlaveTimer_SetConfig+0x116>
 8003512:	2b20      	cmp	r3, #32
 8003514:	d84c      	bhi.n	80035b0 <TIM_SlaveTimer_SetConfig+0x110>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04d      	beq.n	80035b6 <TIM_SlaveTimer_SetConfig+0x116>
 800351a:	2b10      	cmp	r3, #16
 800351c:	d04b      	beq.n	80035b6 <TIM_SlaveTimer_SetConfig+0x116>
 800351e:	e047      	b.n	80035b0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003530:	f000 f8be 	bl	80036b0 <TIM_ETR_SetConfig>
      break;
 8003534:	e040      	b.n	80035b8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d101      	bne.n	8003542 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e03b      	b.n	80035ba <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003568:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	4313      	orrs	r3, r2
 8003574:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	621a      	str	r2, [r3, #32]
      break;
 8003586:	e017      	b.n	80035b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003594:	461a      	mov	r2, r3
 8003596:	f000 f814 	bl	80035c2 <TIM_TI1_ConfigInputStage>
      break;
 800359a:	e00d      	b.n	80035b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a8:	461a      	mov	r2, r3
 80035aa:	f000 f838 	bl	800361e <TIM_TI2_ConfigInputStage>
      break;
 80035ae:	e003      	b.n	80035b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	75fb      	strb	r3, [r7, #23]
      break;
 80035b4:	e000      	b.n	80035b8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80035b6:	bf00      	nop
  }

  return status;
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b087      	sub	sp, #28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 0201 	bic.w	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 030a 	bic.w	r3, r3, #10
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361e:	b480      	push	{r7}
 8003620:	b087      	sub	sp, #28
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f023 0210 	bic.w	r2, r3, #16
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	031b      	lsls	r3, r3, #12
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800365a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	f043 0307 	orr.w	r3, r3, #7
 800369e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b087      	sub	sp, #28
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	2201      	movs	r2, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	43db      	mvns	r3, r3
 8003710:	401a      	ands	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1a      	ldr	r2, [r3, #32]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	621a      	str	r2, [r3, #32]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
	...

08003738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e046      	b.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00e      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379c:	d009      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a10      	ldr	r2, [pc, #64]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10c      	bne.n	80037cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800

080037f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <memset>:
 8003818:	4603      	mov	r3, r0
 800381a:	4402      	add	r2, r0
 800381c:	4293      	cmp	r3, r2
 800381e:	d100      	bne.n	8003822 <memset+0xa>
 8003820:	4770      	bx	lr
 8003822:	f803 1b01 	strb.w	r1, [r3], #1
 8003826:	e7f9      	b.n	800381c <memset+0x4>

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	2600      	movs	r6, #0
 800382c:	4d0c      	ldr	r5, [pc, #48]	; (8003860 <__libc_init_array+0x38>)
 800382e:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	f000 fe76 	bl	8004528 <_init>
 800383c:	2600      	movs	r6, #0
 800383e:	4d0a      	ldr	r5, [pc, #40]	; (8003868 <__libc_init_array+0x40>)
 8003840:	4c0a      	ldr	r4, [pc, #40]	; (800386c <__libc_init_array+0x44>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	08004948 	.word	0x08004948
 8003864:	08004948 	.word	0x08004948
 8003868:	08004948 	.word	0x08004948
 800386c:	0800494c 	.word	0x0800494c

08003870 <sinf>:
 8003870:	b507      	push	{r0, r1, r2, lr}
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <sinf+0x70>)
 8003874:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003878:	4293      	cmp	r3, r2
 800387a:	4601      	mov	r1, r0
 800387c:	dc06      	bgt.n	800388c <sinf+0x1c>
 800387e:	2200      	movs	r2, #0
 8003880:	2100      	movs	r1, #0
 8003882:	b003      	add	sp, #12
 8003884:	f85d eb04 	ldr.w	lr, [sp], #4
 8003888:	f000 b936 	b.w	8003af8 <__kernel_sinf>
 800388c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003890:	db04      	blt.n	800389c <sinf+0x2c>
 8003892:	f7fd f86b 	bl	800096c <__aeabi_fsub>
 8003896:	b003      	add	sp, #12
 8003898:	f85d fb04 	ldr.w	pc, [sp], #4
 800389c:	4669      	mov	r1, sp
 800389e:	f000 f9a1 	bl	8003be4 <__ieee754_rem_pio2f>
 80038a2:	f000 0003 	and.w	r0, r0, #3
 80038a6:	2801      	cmp	r0, #1
 80038a8:	d008      	beq.n	80038bc <sinf+0x4c>
 80038aa:	2802      	cmp	r0, #2
 80038ac:	d00b      	beq.n	80038c6 <sinf+0x56>
 80038ae:	b990      	cbnz	r0, 80038d6 <sinf+0x66>
 80038b0:	2201      	movs	r2, #1
 80038b2:	9901      	ldr	r1, [sp, #4]
 80038b4:	9800      	ldr	r0, [sp, #0]
 80038b6:	f000 f91f 	bl	8003af8 <__kernel_sinf>
 80038ba:	e7ec      	b.n	8003896 <sinf+0x26>
 80038bc:	9901      	ldr	r1, [sp, #4]
 80038be:	9800      	ldr	r0, [sp, #0]
 80038c0:	f000 f89a 	bl	80039f8 <__kernel_cosf>
 80038c4:	e7e7      	b.n	8003896 <sinf+0x26>
 80038c6:	2201      	movs	r2, #1
 80038c8:	9901      	ldr	r1, [sp, #4]
 80038ca:	9800      	ldr	r0, [sp, #0]
 80038cc:	f000 f914 	bl	8003af8 <__kernel_sinf>
 80038d0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80038d4:	e7df      	b.n	8003896 <sinf+0x26>
 80038d6:	9901      	ldr	r1, [sp, #4]
 80038d8:	9800      	ldr	r0, [sp, #0]
 80038da:	f000 f88d 	bl	80039f8 <__kernel_cosf>
 80038de:	e7f7      	b.n	80038d0 <sinf+0x60>
 80038e0:	3f490fd8 	.word	0x3f490fd8

080038e4 <rint>:
 80038e4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80038e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ea:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 80038ee:	2e13      	cmp	r6, #19
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	460d      	mov	r5, r1
 80038f6:	4604      	mov	r4, r0
 80038f8:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80038fc:	dc5a      	bgt.n	80039b4 <rint+0xd0>
 80038fe:	2e00      	cmp	r6, #0
 8003900:	da2e      	bge.n	8003960 <rint+0x7c>
 8003902:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003906:	4301      	orrs	r1, r0
 8003908:	d026      	beq.n	8003958 <rint+0x74>
 800390a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800390e:	430c      	orrs	r4, r1
 8003910:	4263      	negs	r3, r4
 8003912:	4323      	orrs	r3, r4
 8003914:	0c6a      	lsrs	r2, r5, #17
 8003916:	0b1b      	lsrs	r3, r3, #12
 8003918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800391c:	0452      	lsls	r2, r2, #17
 800391e:	ea43 0102 	orr.w	r1, r3, r2
 8003922:	460b      	mov	r3, r1
 8003924:	4932      	ldr	r1, [pc, #200]	; (80039f0 <rint+0x10c>)
 8003926:	4602      	mov	r2, r0
 8003928:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800392c:	e9d1 6700 	ldrd	r6, r7, [r1]
 8003930:	4639      	mov	r1, r7
 8003932:	4630      	mov	r0, r6
 8003934:	f7fc fdf0 	bl	8000518 <__adddf3>
 8003938:	e9cd 0100 	strd	r0, r1, [sp]
 800393c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003940:	463b      	mov	r3, r7
 8003942:	4632      	mov	r2, r6
 8003944:	f7fc fde6 	bl	8000514 <__aeabi_dsub>
 8003948:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 800394c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003950:	ea43 0705 	orr.w	r7, r3, r5
 8003954:	4602      	mov	r2, r0
 8003956:	463b      	mov	r3, r7
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	b003      	add	sp, #12
 800395e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003960:	4924      	ldr	r1, [pc, #144]	; (80039f4 <rint+0x110>)
 8003962:	4131      	asrs	r1, r6
 8003964:	ea03 0001 	and.w	r0, r3, r1
 8003968:	4310      	orrs	r0, r2
 800396a:	d0f5      	beq.n	8003958 <rint+0x74>
 800396c:	084b      	lsrs	r3, r1, #1
 800396e:	ea05 0151 	and.w	r1, r5, r1, lsr #1
 8003972:	430c      	orrs	r4, r1
 8003974:	d00a      	beq.n	800398c <rint+0xa8>
 8003976:	ea25 0303 	bic.w	r3, r5, r3
 800397a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800397e:	f1a6 0213 	sub.w	r2, r6, #19
 8003982:	4254      	negs	r4, r2
 8003984:	4154      	adcs	r4, r2
 8003986:	4135      	asrs	r5, r6
 8003988:	07e4      	lsls	r4, r4, #31
 800398a:	431d      	orrs	r5, r3
 800398c:	4918      	ldr	r1, [pc, #96]	; (80039f0 <rint+0x10c>)
 800398e:	462b      	mov	r3, r5
 8003990:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8003994:	4622      	mov	r2, r4
 8003996:	e9d1 4500 	ldrd	r4, r5, [r1]
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f7fc fdbb 	bl	8000518 <__adddf3>
 80039a2:	e9cd 0100 	strd	r0, r1, [sp]
 80039a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039aa:	4622      	mov	r2, r4
 80039ac:	462b      	mov	r3, r5
 80039ae:	f7fc fdb1 	bl	8000514 <__aeabi_dsub>
 80039b2:	e006      	b.n	80039c2 <rint+0xde>
 80039b4:	2e33      	cmp	r6, #51	; 0x33
 80039b6:	dd07      	ble.n	80039c8 <rint+0xe4>
 80039b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80039bc:	d1cc      	bne.n	8003958 <rint+0x74>
 80039be:	f7fc fdab 	bl	8000518 <__adddf3>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	e7c7      	b.n	8003958 <rint+0x74>
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295
 80039cc:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80039d0:	fa21 f10c 	lsr.w	r1, r1, ip
 80039d4:	4201      	tst	r1, r0
 80039d6:	d0bf      	beq.n	8003958 <rint+0x74>
 80039d8:	084b      	lsrs	r3, r1, #1
 80039da:	ea10 0151 	ands.w	r1, r0, r1, lsr #1
 80039de:	bf1f      	itttt	ne
 80039e0:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80039e4:	ea20 0303 	bicne.w	r3, r0, r3
 80039e8:	fa44 f40c 	asrne.w	r4, r4, ip
 80039ec:	431c      	orrne	r4, r3
 80039ee:	e7cd      	b.n	800398c <rint+0xa8>
 80039f0:	08004568 	.word	0x08004568
 80039f4:	000fffff 	.word	0x000fffff

080039f8 <__kernel_cosf>:
 80039f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003a00:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003a04:	4606      	mov	r6, r0
 8003a06:	4688      	mov	r8, r1
 8003a08:	da03      	bge.n	8003a12 <__kernel_cosf+0x1a>
 8003a0a:	f7fd f92f 	bl	8000c6c <__aeabi_f2iz>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d05c      	beq.n	8003acc <__kernel_cosf+0xd4>
 8003a12:	4631      	mov	r1, r6
 8003a14:	4630      	mov	r0, r6
 8003a16:	f7fc fcc5 	bl	80003a4 <__aeabi_fmul>
 8003a1a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a1e:	4605      	mov	r5, r0
 8003a20:	f7fc fcc0 	bl	80003a4 <__aeabi_fmul>
 8003a24:	492b      	ldr	r1, [pc, #172]	; (8003ad4 <__kernel_cosf+0xdc>)
 8003a26:	4607      	mov	r7, r0
 8003a28:	4628      	mov	r0, r5
 8003a2a:	f7fc fcbb 	bl	80003a4 <__aeabi_fmul>
 8003a2e:	492a      	ldr	r1, [pc, #168]	; (8003ad8 <__kernel_cosf+0xe0>)
 8003a30:	f7fc ff9e 	bl	8000970 <__addsf3>
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7fc fcb5 	bl	80003a4 <__aeabi_fmul>
 8003a3a:	4928      	ldr	r1, [pc, #160]	; (8003adc <__kernel_cosf+0xe4>)
 8003a3c:	f7fc ff96 	bl	800096c <__aeabi_fsub>
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc fcaf 	bl	80003a4 <__aeabi_fmul>
 8003a46:	4926      	ldr	r1, [pc, #152]	; (8003ae0 <__kernel_cosf+0xe8>)
 8003a48:	f7fc ff92 	bl	8000970 <__addsf3>
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	f7fc fca9 	bl	80003a4 <__aeabi_fmul>
 8003a52:	4924      	ldr	r1, [pc, #144]	; (8003ae4 <__kernel_cosf+0xec>)
 8003a54:	f7fc ff8a 	bl	800096c <__aeabi_fsub>
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f7fc fca3 	bl	80003a4 <__aeabi_fmul>
 8003a5e:	4922      	ldr	r1, [pc, #136]	; (8003ae8 <__kernel_cosf+0xf0>)
 8003a60:	f7fc ff86 	bl	8000970 <__addsf3>
 8003a64:	4629      	mov	r1, r5
 8003a66:	f7fc fc9d 	bl	80003a4 <__aeabi_fmul>
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	f7fc fc9a 	bl	80003a4 <__aeabi_fmul>
 8003a70:	4641      	mov	r1, r8
 8003a72:	4605      	mov	r5, r0
 8003a74:	4630      	mov	r0, r6
 8003a76:	f7fc fc95 	bl	80003a4 <__aeabi_fmul>
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f7fc ff75 	bl	800096c <__aeabi_fsub>
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <__kernel_cosf+0xf4>)
 8003a84:	4605      	mov	r5, r0
 8003a86:	429c      	cmp	r4, r3
 8003a88:	dc0a      	bgt.n	8003aa0 <__kernel_cosf+0xa8>
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	f7fc ff6d 	bl	800096c <__aeabi_fsub>
 8003a92:	4601      	mov	r1, r0
 8003a94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003a98:	f7fc ff68 	bl	800096c <__aeabi_fsub>
 8003a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <__kernel_cosf+0xf8>)
 8003aa2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	bfcc      	ite	gt
 8003aaa:	4c12      	ldrgt	r4, [pc, #72]	; (8003af4 <__kernel_cosf+0xfc>)
 8003aac:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	f7fc ff5b 	bl	800096c <__aeabi_fsub>
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	4606      	mov	r6, r0
 8003aba:	4638      	mov	r0, r7
 8003abc:	f7fc ff56 	bl	800096c <__aeabi_fsub>
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7fc ff53 	bl	800096c <__aeabi_fsub>
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	4630      	mov	r0, r6
 8003aca:	e7e5      	b.n	8003a98 <__kernel_cosf+0xa0>
 8003acc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ad0:	e7e4      	b.n	8003a9c <__kernel_cosf+0xa4>
 8003ad2:	bf00      	nop
 8003ad4:	ad47d74e 	.word	0xad47d74e
 8003ad8:	310f74f6 	.word	0x310f74f6
 8003adc:	3493f27c 	.word	0x3493f27c
 8003ae0:	37d00d01 	.word	0x37d00d01
 8003ae4:	3ab60b61 	.word	0x3ab60b61
 8003ae8:	3d2aaaab 	.word	0x3d2aaaab
 8003aec:	3e999999 	.word	0x3e999999
 8003af0:	3f480000 	.word	0x3f480000
 8003af4:	3e900000 	.word	0x3e900000

08003af8 <__kernel_sinf>:
 8003af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003afc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003b00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003b04:	4604      	mov	r4, r0
 8003b06:	460f      	mov	r7, r1
 8003b08:	4691      	mov	r9, r2
 8003b0a:	da03      	bge.n	8003b14 <__kernel_sinf+0x1c>
 8003b0c:	f7fd f8ae 	bl	8000c6c <__aeabi_f2iz>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d035      	beq.n	8003b80 <__kernel_sinf+0x88>
 8003b14:	4621      	mov	r1, r4
 8003b16:	4620      	mov	r0, r4
 8003b18:	f7fc fc44 	bl	80003a4 <__aeabi_fmul>
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7fc fc3f 	bl	80003a4 <__aeabi_fmul>
 8003b26:	4929      	ldr	r1, [pc, #164]	; (8003bcc <__kernel_sinf+0xd4>)
 8003b28:	4606      	mov	r6, r0
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7fc fc3a 	bl	80003a4 <__aeabi_fmul>
 8003b30:	4927      	ldr	r1, [pc, #156]	; (8003bd0 <__kernel_sinf+0xd8>)
 8003b32:	f7fc ff1b 	bl	800096c <__aeabi_fsub>
 8003b36:	4629      	mov	r1, r5
 8003b38:	f7fc fc34 	bl	80003a4 <__aeabi_fmul>
 8003b3c:	4925      	ldr	r1, [pc, #148]	; (8003bd4 <__kernel_sinf+0xdc>)
 8003b3e:	f7fc ff17 	bl	8000970 <__addsf3>
 8003b42:	4629      	mov	r1, r5
 8003b44:	f7fc fc2e 	bl	80003a4 <__aeabi_fmul>
 8003b48:	4923      	ldr	r1, [pc, #140]	; (8003bd8 <__kernel_sinf+0xe0>)
 8003b4a:	f7fc ff0f 	bl	800096c <__aeabi_fsub>
 8003b4e:	4629      	mov	r1, r5
 8003b50:	f7fc fc28 	bl	80003a4 <__aeabi_fmul>
 8003b54:	4921      	ldr	r1, [pc, #132]	; (8003bdc <__kernel_sinf+0xe4>)
 8003b56:	f7fc ff0b 	bl	8000970 <__addsf3>
 8003b5a:	4680      	mov	r8, r0
 8003b5c:	f1b9 0f00 	cmp.w	r9, #0
 8003b60:	d111      	bne.n	8003b86 <__kernel_sinf+0x8e>
 8003b62:	4601      	mov	r1, r0
 8003b64:	4628      	mov	r0, r5
 8003b66:	f7fc fc1d 	bl	80003a4 <__aeabi_fmul>
 8003b6a:	491d      	ldr	r1, [pc, #116]	; (8003be0 <__kernel_sinf+0xe8>)
 8003b6c:	f7fc fefe 	bl	800096c <__aeabi_fsub>
 8003b70:	4631      	mov	r1, r6
 8003b72:	f7fc fc17 	bl	80003a4 <__aeabi_fmul>
 8003b76:	4601      	mov	r1, r0
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7fc fef9 	bl	8000970 <__addsf3>
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4620      	mov	r0, r4
 8003b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b86:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f7fc fc0a 	bl	80003a4 <__aeabi_fmul>
 8003b90:	4641      	mov	r1, r8
 8003b92:	4681      	mov	r9, r0
 8003b94:	4630      	mov	r0, r6
 8003b96:	f7fc fc05 	bl	80003a4 <__aeabi_fmul>
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	4648      	mov	r0, r9
 8003b9e:	f7fc fee5 	bl	800096c <__aeabi_fsub>
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f7fc fbfe 	bl	80003a4 <__aeabi_fmul>
 8003ba8:	4639      	mov	r1, r7
 8003baa:	f7fc fedf 	bl	800096c <__aeabi_fsub>
 8003bae:	490c      	ldr	r1, [pc, #48]	; (8003be0 <__kernel_sinf+0xe8>)
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f7fc fbf6 	bl	80003a4 <__aeabi_fmul>
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f7fc fed8 	bl	8000970 <__addsf3>
 8003bc0:	4601      	mov	r1, r0
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7fc fed2 	bl	800096c <__aeabi_fsub>
 8003bc8:	e7d9      	b.n	8003b7e <__kernel_sinf+0x86>
 8003bca:	bf00      	nop
 8003bcc:	2f2ec9d3 	.word	0x2f2ec9d3
 8003bd0:	32d72f34 	.word	0x32d72f34
 8003bd4:	3638ef1b 	.word	0x3638ef1b
 8003bd8:	39500d01 	.word	0x39500d01
 8003bdc:	3c088889 	.word	0x3c088889
 8003be0:	3e2aaaab 	.word	0x3e2aaaab

08003be4 <__ieee754_rem_pio2f>:
 8003be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be8:	4aa0      	ldr	r2, [pc, #640]	; (8003e6c <__ieee754_rem_pio2f+0x288>)
 8003bea:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003bee:	4296      	cmp	r6, r2
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	4682      	mov	sl, r0
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	dc04      	bgt.n	8003c02 <__ieee754_rem_pio2f+0x1e>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6008      	str	r0, [r1, #0]
 8003bfc:	604b      	str	r3, [r1, #4]
 8003bfe:	2500      	movs	r5, #0
 8003c00:	e01a      	b.n	8003c38 <__ieee754_rem_pio2f+0x54>
 8003c02:	4a9b      	ldr	r2, [pc, #620]	; (8003e70 <__ieee754_rem_pio2f+0x28c>)
 8003c04:	4296      	cmp	r6, r2
 8003c06:	dc4b      	bgt.n	8003ca0 <__ieee754_rem_pio2f+0xbc>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	499a      	ldr	r1, [pc, #616]	; (8003e74 <__ieee754_rem_pio2f+0x290>)
 8003c0c:	4f9a      	ldr	r7, [pc, #616]	; (8003e78 <__ieee754_rem_pio2f+0x294>)
 8003c0e:	f026 060f 	bic.w	r6, r6, #15
 8003c12:	dd23      	ble.n	8003c5c <__ieee754_rem_pio2f+0x78>
 8003c14:	f7fc feaa 	bl	800096c <__aeabi_fsub>
 8003c18:	42be      	cmp	r6, r7
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	d010      	beq.n	8003c40 <__ieee754_rem_pio2f+0x5c>
 8003c1e:	4997      	ldr	r1, [pc, #604]	; (8003e7c <__ieee754_rem_pio2f+0x298>)
 8003c20:	f7fc fea4 	bl	800096c <__aeabi_fsub>
 8003c24:	4601      	mov	r1, r0
 8003c26:	6020      	str	r0, [r4, #0]
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f7fc fe9f 	bl	800096c <__aeabi_fsub>
 8003c2e:	4993      	ldr	r1, [pc, #588]	; (8003e7c <__ieee754_rem_pio2f+0x298>)
 8003c30:	f7fc fe9c 	bl	800096c <__aeabi_fsub>
 8003c34:	2501      	movs	r5, #1
 8003c36:	6060      	str	r0, [r4, #4]
 8003c38:	4628      	mov	r0, r5
 8003c3a:	b007      	add	sp, #28
 8003c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c40:	498f      	ldr	r1, [pc, #572]	; (8003e80 <__ieee754_rem_pio2f+0x29c>)
 8003c42:	f7fc fe93 	bl	800096c <__aeabi_fsub>
 8003c46:	498f      	ldr	r1, [pc, #572]	; (8003e84 <__ieee754_rem_pio2f+0x2a0>)
 8003c48:	4605      	mov	r5, r0
 8003c4a:	f7fc fe8f 	bl	800096c <__aeabi_fsub>
 8003c4e:	4601      	mov	r1, r0
 8003c50:	6020      	str	r0, [r4, #0]
 8003c52:	4628      	mov	r0, r5
 8003c54:	f7fc fe8a 	bl	800096c <__aeabi_fsub>
 8003c58:	498a      	ldr	r1, [pc, #552]	; (8003e84 <__ieee754_rem_pio2f+0x2a0>)
 8003c5a:	e7e9      	b.n	8003c30 <__ieee754_rem_pio2f+0x4c>
 8003c5c:	f7fc fe88 	bl	8000970 <__addsf3>
 8003c60:	42be      	cmp	r6, r7
 8003c62:	4605      	mov	r5, r0
 8003c64:	d00e      	beq.n	8003c84 <__ieee754_rem_pio2f+0xa0>
 8003c66:	4985      	ldr	r1, [pc, #532]	; (8003e7c <__ieee754_rem_pio2f+0x298>)
 8003c68:	f7fc fe82 	bl	8000970 <__addsf3>
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	6020      	str	r0, [r4, #0]
 8003c70:	4628      	mov	r0, r5
 8003c72:	f7fc fe7b 	bl	800096c <__aeabi_fsub>
 8003c76:	4981      	ldr	r1, [pc, #516]	; (8003e7c <__ieee754_rem_pio2f+0x298>)
 8003c78:	f7fc fe7a 	bl	8000970 <__addsf3>
 8003c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c80:	6060      	str	r0, [r4, #4]
 8003c82:	e7d9      	b.n	8003c38 <__ieee754_rem_pio2f+0x54>
 8003c84:	497e      	ldr	r1, [pc, #504]	; (8003e80 <__ieee754_rem_pio2f+0x29c>)
 8003c86:	f7fc fe73 	bl	8000970 <__addsf3>
 8003c8a:	497e      	ldr	r1, [pc, #504]	; (8003e84 <__ieee754_rem_pio2f+0x2a0>)
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	f7fc fe6f 	bl	8000970 <__addsf3>
 8003c92:	4601      	mov	r1, r0
 8003c94:	6020      	str	r0, [r4, #0]
 8003c96:	4628      	mov	r0, r5
 8003c98:	f7fc fe68 	bl	800096c <__aeabi_fsub>
 8003c9c:	4979      	ldr	r1, [pc, #484]	; (8003e84 <__ieee754_rem_pio2f+0x2a0>)
 8003c9e:	e7eb      	b.n	8003c78 <__ieee754_rem_pio2f+0x94>
 8003ca0:	4a79      	ldr	r2, [pc, #484]	; (8003e88 <__ieee754_rem_pio2f+0x2a4>)
 8003ca2:	4296      	cmp	r6, r2
 8003ca4:	f300 8091 	bgt.w	8003dca <__ieee754_rem_pio2f+0x1e6>
 8003ca8:	f000 f8fa 	bl	8003ea0 <fabsf>
 8003cac:	4977      	ldr	r1, [pc, #476]	; (8003e8c <__ieee754_rem_pio2f+0x2a8>)
 8003cae:	4607      	mov	r7, r0
 8003cb0:	f7fc fb78 	bl	80003a4 <__aeabi_fmul>
 8003cb4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003cb8:	f7fc fe5a 	bl	8000970 <__addsf3>
 8003cbc:	f7fc ffd6 	bl	8000c6c <__aeabi_f2iz>
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	f7fc ff09 	bl	8000ad8 <__aeabi_i2f>
 8003cc6:	496b      	ldr	r1, [pc, #428]	; (8003e74 <__ieee754_rem_pio2f+0x290>)
 8003cc8:	4681      	mov	r9, r0
 8003cca:	f7fc fb6b 	bl	80003a4 <__aeabi_fmul>
 8003cce:	4601      	mov	r1, r0
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f7fc fe4b 	bl	800096c <__aeabi_fsub>
 8003cd6:	4969      	ldr	r1, [pc, #420]	; (8003e7c <__ieee754_rem_pio2f+0x298>)
 8003cd8:	4680      	mov	r8, r0
 8003cda:	4648      	mov	r0, r9
 8003cdc:	f7fc fb62 	bl	80003a4 <__aeabi_fmul>
 8003ce0:	2d1f      	cmp	r5, #31
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	dc0c      	bgt.n	8003d00 <__ieee754_rem_pio2f+0x11c>
 8003ce6:	4a6a      	ldr	r2, [pc, #424]	; (8003e90 <__ieee754_rem_pio2f+0x2ac>)
 8003ce8:	1e69      	subs	r1, r5, #1
 8003cea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003cee:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <__ieee754_rem_pio2f+0x11c>
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	f7fc fe37 	bl	800096c <__aeabi_fsub>
 8003cfe:	e00b      	b.n	8003d18 <__ieee754_rem_pio2f+0x134>
 8003d00:	4639      	mov	r1, r7
 8003d02:	4640      	mov	r0, r8
 8003d04:	f7fc fe32 	bl	800096c <__aeabi_fsub>
 8003d08:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003d0c:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8003d16:	dc01      	bgt.n	8003d1c <__ieee754_rem_pio2f+0x138>
 8003d18:	6020      	str	r0, [r4, #0]
 8003d1a:	e026      	b.n	8003d6a <__ieee754_rem_pio2f+0x186>
 8003d1c:	4958      	ldr	r1, [pc, #352]	; (8003e80 <__ieee754_rem_pio2f+0x29c>)
 8003d1e:	4648      	mov	r0, r9
 8003d20:	f7fc fb40 	bl	80003a4 <__aeabi_fmul>
 8003d24:	4607      	mov	r7, r0
 8003d26:	4601      	mov	r1, r0
 8003d28:	4640      	mov	r0, r8
 8003d2a:	f7fc fe1f 	bl	800096c <__aeabi_fsub>
 8003d2e:	4601      	mov	r1, r0
 8003d30:	4606      	mov	r6, r0
 8003d32:	4640      	mov	r0, r8
 8003d34:	f7fc fe1a 	bl	800096c <__aeabi_fsub>
 8003d38:	4639      	mov	r1, r7
 8003d3a:	f7fc fe17 	bl	800096c <__aeabi_fsub>
 8003d3e:	4607      	mov	r7, r0
 8003d40:	4950      	ldr	r1, [pc, #320]	; (8003e84 <__ieee754_rem_pio2f+0x2a0>)
 8003d42:	4648      	mov	r0, r9
 8003d44:	f7fc fb2e 	bl	80003a4 <__aeabi_fmul>
 8003d48:	4639      	mov	r1, r7
 8003d4a:	f7fc fe0f 	bl	800096c <__aeabi_fsub>
 8003d4e:	4601      	mov	r1, r0
 8003d50:	4607      	mov	r7, r0
 8003d52:	4630      	mov	r0, r6
 8003d54:	f7fc fe0a 	bl	800096c <__aeabi_fsub>
 8003d58:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003d5c:	ebab 0b03 	sub.w	fp, fp, r3
 8003d60:	f1bb 0f19 	cmp.w	fp, #25
 8003d64:	dc16      	bgt.n	8003d94 <__ieee754_rem_pio2f+0x1b0>
 8003d66:	46b0      	mov	r8, r6
 8003d68:	6020      	str	r0, [r4, #0]
 8003d6a:	6826      	ldr	r6, [r4, #0]
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	4631      	mov	r1, r6
 8003d70:	f7fc fdfc 	bl	800096c <__aeabi_fsub>
 8003d74:	4639      	mov	r1, r7
 8003d76:	f7fc fdf9 	bl	800096c <__aeabi_fsub>
 8003d7a:	f1ba 0f00 	cmp.w	sl, #0
 8003d7e:	6060      	str	r0, [r4, #4]
 8003d80:	f6bf af5a 	bge.w	8003c38 <__ieee754_rem_pio2f+0x54>
 8003d84:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003d88:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003d8c:	6026      	str	r6, [r4, #0]
 8003d8e:	6060      	str	r0, [r4, #4]
 8003d90:	426d      	negs	r5, r5
 8003d92:	e751      	b.n	8003c38 <__ieee754_rem_pio2f+0x54>
 8003d94:	493f      	ldr	r1, [pc, #252]	; (8003e94 <__ieee754_rem_pio2f+0x2b0>)
 8003d96:	4648      	mov	r0, r9
 8003d98:	f7fc fb04 	bl	80003a4 <__aeabi_fmul>
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	4601      	mov	r1, r0
 8003da0:	4630      	mov	r0, r6
 8003da2:	f7fc fde3 	bl	800096c <__aeabi_fsub>
 8003da6:	4601      	mov	r1, r0
 8003da8:	4680      	mov	r8, r0
 8003daa:	4630      	mov	r0, r6
 8003dac:	f7fc fdde 	bl	800096c <__aeabi_fsub>
 8003db0:	4639      	mov	r1, r7
 8003db2:	f7fc fddb 	bl	800096c <__aeabi_fsub>
 8003db6:	4606      	mov	r6, r0
 8003db8:	4937      	ldr	r1, [pc, #220]	; (8003e98 <__ieee754_rem_pio2f+0x2b4>)
 8003dba:	4648      	mov	r0, r9
 8003dbc:	f7fc faf2 	bl	80003a4 <__aeabi_fmul>
 8003dc0:	4631      	mov	r1, r6
 8003dc2:	f7fc fdd3 	bl	800096c <__aeabi_fsub>
 8003dc6:	4607      	mov	r7, r0
 8003dc8:	e795      	b.n	8003cf6 <__ieee754_rem_pio2f+0x112>
 8003dca:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003dce:	db05      	blt.n	8003ddc <__ieee754_rem_pio2f+0x1f8>
 8003dd0:	4601      	mov	r1, r0
 8003dd2:	f7fc fdcb 	bl	800096c <__aeabi_fsub>
 8003dd6:	6060      	str	r0, [r4, #4]
 8003dd8:	6020      	str	r0, [r4, #0]
 8003dda:	e710      	b.n	8003bfe <__ieee754_rem_pio2f+0x1a>
 8003ddc:	15f7      	asrs	r7, r6, #23
 8003dde:	3f86      	subs	r7, #134	; 0x86
 8003de0:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8003de4:	4630      	mov	r0, r6
 8003de6:	f7fc ff41 	bl	8000c6c <__aeabi_f2iz>
 8003dea:	f7fc fe75 	bl	8000ad8 <__aeabi_i2f>
 8003dee:	4601      	mov	r1, r0
 8003df0:	9003      	str	r0, [sp, #12]
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7fc fdba 	bl	800096c <__aeabi_fsub>
 8003df8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003dfc:	f7fc fad2 	bl	80003a4 <__aeabi_fmul>
 8003e00:	4606      	mov	r6, r0
 8003e02:	f7fc ff33 	bl	8000c6c <__aeabi_f2iz>
 8003e06:	f7fc fe67 	bl	8000ad8 <__aeabi_i2f>
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	9004      	str	r0, [sp, #16]
 8003e0e:	4605      	mov	r5, r0
 8003e10:	4630      	mov	r0, r6
 8003e12:	f7fc fdab 	bl	800096c <__aeabi_fsub>
 8003e16:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003e1a:	f7fc fac3 	bl	80003a4 <__aeabi_fmul>
 8003e1e:	2100      	movs	r1, #0
 8003e20:	9005      	str	r0, [sp, #20]
 8003e22:	f7fc fef1 	bl	8000c08 <__aeabi_fcmpeq>
 8003e26:	b1f0      	cbz	r0, 8003e66 <__ieee754_rem_pio2f+0x282>
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f7fc feec 	bl	8000c08 <__aeabi_fcmpeq>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2302      	moveq	r3, #2
 8003e38:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <__ieee754_rem_pio2f+0x2b8>)
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	9201      	str	r2, [sp, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	a803      	add	r0, sp, #12
 8003e42:	9200      	str	r2, [sp, #0]
 8003e44:	463a      	mov	r2, r7
 8003e46:	f000 f82f 	bl	8003ea8 <__kernel_rem_pio2f>
 8003e4a:	f1ba 0f00 	cmp.w	sl, #0
 8003e4e:	4605      	mov	r5, r0
 8003e50:	f6bf aef2 	bge.w	8003c38 <__ieee754_rem_pio2f+0x54>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e5a:	6023      	str	r3, [r4, #0]
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e62:	6063      	str	r3, [r4, #4]
 8003e64:	e794      	b.n	8003d90 <__ieee754_rem_pio2f+0x1ac>
 8003e66:	2303      	movs	r3, #3
 8003e68:	e7e6      	b.n	8003e38 <__ieee754_rem_pio2f+0x254>
 8003e6a:	bf00      	nop
 8003e6c:	3f490fd8 	.word	0x3f490fd8
 8003e70:	4016cbe3 	.word	0x4016cbe3
 8003e74:	3fc90f80 	.word	0x3fc90f80
 8003e78:	3fc90fd0 	.word	0x3fc90fd0
 8003e7c:	37354443 	.word	0x37354443
 8003e80:	37354400 	.word	0x37354400
 8003e84:	2e85a308 	.word	0x2e85a308
 8003e88:	43490f80 	.word	0x43490f80
 8003e8c:	3f22f984 	.word	0x3f22f984
 8003e90:	08004578 	.word	0x08004578
 8003e94:	2e85a300 	.word	0x2e85a300
 8003e98:	248d3132 	.word	0x248d3132
 8003e9c:	080045f8 	.word	0x080045f8

08003ea0 <fabsf>:
 8003ea0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003ea4:	4770      	bx	lr
	...

08003ea8 <__kernel_rem_pio2f>:
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	b0db      	sub	sp, #364	; 0x16c
 8003eae:	9202      	str	r2, [sp, #8]
 8003eb0:	9304      	str	r3, [sp, #16]
 8003eb2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003eb4:	4bbb      	ldr	r3, [pc, #748]	; (80041a4 <__kernel_rem_pio2f+0x2fc>)
 8003eb6:	9005      	str	r0, [sp, #20]
 8003eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ebc:	9100      	str	r1, [sp, #0]
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	9b04      	ldr	r3, [sp, #16]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	9b02      	ldr	r3, [sp, #8]
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	f2c0 809b 	blt.w	8004004 <__kernel_rem_pio2f+0x15c>
 8003ece:	1edc      	subs	r4, r3, #3
 8003ed0:	bf48      	it	mi
 8003ed2:	1d1c      	addmi	r4, r3, #4
 8003ed4:	10e4      	asrs	r4, r4, #3
 8003ed6:	2500      	movs	r5, #0
 8003ed8:	f04f 0b00 	mov.w	fp, #0
 8003edc:	1c67      	adds	r7, r4, #1
 8003ede:	00fb      	lsls	r3, r7, #3
 8003ee0:	9306      	str	r3, [sp, #24]
 8003ee2:	9b02      	ldr	r3, [sp, #8]
 8003ee4:	9a03      	ldr	r2, [sp, #12]
 8003ee6:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8003eea:	9b01      	ldr	r3, [sp, #4]
 8003eec:	eba4 0802 	sub.w	r8, r4, r2
 8003ef0:	eb03 0902 	add.w	r9, r3, r2
 8003ef4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003ef6:	ae1e      	add	r6, sp, #120	; 0x78
 8003ef8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8003efc:	454d      	cmp	r5, r9
 8003efe:	f340 8083 	ble.w	8004008 <__kernel_rem_pio2f+0x160>
 8003f02:	9a04      	ldr	r2, [sp, #16]
 8003f04:	ab1e      	add	r3, sp, #120	; 0x78
 8003f06:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8003f0a:	f04f 0900 	mov.w	r9, #0
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8003f14:	9a01      	ldr	r2, [sp, #4]
 8003f16:	4591      	cmp	r9, r2
 8003f18:	f340 809e 	ble.w	8004058 <__kernel_rem_pio2f+0x1b0>
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	aa0a      	add	r2, sp, #40	; 0x28
 8003f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f24:	9308      	str	r3, [sp, #32]
 8003f26:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003f28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003f2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003f30:	9307      	str	r3, [sp, #28]
 8003f32:	ac0a      	add	r4, sp, #40	; 0x28
 8003f34:	4626      	mov	r6, r4
 8003f36:	46c3      	mov	fp, r8
 8003f38:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8003f3c:	ab5a      	add	r3, sp, #360	; 0x168
 8003f3e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8003f42:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8003f46:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8003f4a:	f1bb 0f00 	cmp.w	fp, #0
 8003f4e:	f300 8088 	bgt.w	8004062 <__kernel_rem_pio2f+0x1ba>
 8003f52:	4639      	mov	r1, r7
 8003f54:	4628      	mov	r0, r5
 8003f56:	f000 fa5b 	bl	8004410 <scalbnf>
 8003f5a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003f5e:	4605      	mov	r5, r0
 8003f60:	f7fc fa20 	bl	80003a4 <__aeabi_fmul>
 8003f64:	f000 faa0 	bl	80044a8 <floorf>
 8003f68:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003f6c:	f7fc fa1a 	bl	80003a4 <__aeabi_fmul>
 8003f70:	4601      	mov	r1, r0
 8003f72:	4628      	mov	r0, r5
 8003f74:	f7fc fcfa 	bl	800096c <__aeabi_fsub>
 8003f78:	4605      	mov	r5, r0
 8003f7a:	f7fc fe77 	bl	8000c6c <__aeabi_f2iz>
 8003f7e:	4606      	mov	r6, r0
 8003f80:	f7fc fdaa 	bl	8000ad8 <__aeabi_i2f>
 8003f84:	4601      	mov	r1, r0
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7fc fcf0 	bl	800096c <__aeabi_fsub>
 8003f8c:	2f00      	cmp	r7, #0
 8003f8e:	4681      	mov	r9, r0
 8003f90:	f340 8086 	ble.w	80040a0 <__kernel_rem_pio2f+0x1f8>
 8003f94:	f108 32ff 	add.w	r2, r8, #4294967295
 8003f98:	ab0a      	add	r3, sp, #40	; 0x28
 8003f9a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8003f9e:	f1c7 0108 	rsb	r1, r7, #8
 8003fa2:	fa45 f301 	asr.w	r3, r5, r1
 8003fa6:	441e      	add	r6, r3
 8003fa8:	408b      	lsls	r3, r1
 8003faa:	1aed      	subs	r5, r5, r3
 8003fac:	ab0a      	add	r3, sp, #40	; 0x28
 8003fae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003fb2:	f1c7 0307 	rsb	r3, r7, #7
 8003fb6:	411d      	asrs	r5, r3
 8003fb8:	2d00      	cmp	r5, #0
 8003fba:	dd7f      	ble.n	80040bc <__kernel_rem_pio2f+0x214>
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4692      	mov	sl, r2
 8003fc0:	3601      	adds	r6, #1
 8003fc2:	4590      	cmp	r8, r2
 8003fc4:	f300 80b0 	bgt.w	8004128 <__kernel_rem_pio2f+0x280>
 8003fc8:	2f00      	cmp	r7, #0
 8003fca:	dd05      	ble.n	8003fd8 <__kernel_rem_pio2f+0x130>
 8003fcc:	2f01      	cmp	r7, #1
 8003fce:	f000 80bd 	beq.w	800414c <__kernel_rem_pio2f+0x2a4>
 8003fd2:	2f02      	cmp	r7, #2
 8003fd4:	f000 80c5 	beq.w	8004162 <__kernel_rem_pio2f+0x2ba>
 8003fd8:	2d02      	cmp	r5, #2
 8003fda:	d16f      	bne.n	80040bc <__kernel_rem_pio2f+0x214>
 8003fdc:	4649      	mov	r1, r9
 8003fde:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003fe2:	f7fc fcc3 	bl	800096c <__aeabi_fsub>
 8003fe6:	4681      	mov	r9, r0
 8003fe8:	f1ba 0f00 	cmp.w	sl, #0
 8003fec:	d066      	beq.n	80040bc <__kernel_rem_pio2f+0x214>
 8003fee:	4639      	mov	r1, r7
 8003ff0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ff4:	f000 fa0c 	bl	8004410 <scalbnf>
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	4648      	mov	r0, r9
 8003ffc:	f7fc fcb6 	bl	800096c <__aeabi_fsub>
 8004000:	4681      	mov	r9, r0
 8004002:	e05b      	b.n	80040bc <__kernel_rem_pio2f+0x214>
 8004004:	2400      	movs	r4, #0
 8004006:	e766      	b.n	8003ed6 <__kernel_rem_pio2f+0x2e>
 8004008:	eb18 0f05 	cmn.w	r8, r5
 800400c:	d407      	bmi.n	800401e <__kernel_rem_pio2f+0x176>
 800400e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8004012:	f7fc fd61 	bl	8000ad8 <__aeabi_i2f>
 8004016:	f846 0b04 	str.w	r0, [r6], #4
 800401a:	3501      	adds	r5, #1
 800401c:	e76e      	b.n	8003efc <__kernel_rem_pio2f+0x54>
 800401e:	4658      	mov	r0, fp
 8004020:	e7f9      	b.n	8004016 <__kernel_rem_pio2f+0x16e>
 8004022:	9307      	str	r3, [sp, #28]
 8004024:	9b05      	ldr	r3, [sp, #20]
 8004026:	f8da 1000 	ldr.w	r1, [sl]
 800402a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800402e:	f7fc f9b9 	bl	80003a4 <__aeabi_fmul>
 8004032:	4601      	mov	r1, r0
 8004034:	4630      	mov	r0, r6
 8004036:	f7fc fc9b 	bl	8000970 <__addsf3>
 800403a:	4606      	mov	r6, r0
 800403c:	9b07      	ldr	r3, [sp, #28]
 800403e:	f108 0801 	add.w	r8, r8, #1
 8004042:	9a03      	ldr	r2, [sp, #12]
 8004044:	f1aa 0a04 	sub.w	sl, sl, #4
 8004048:	4590      	cmp	r8, r2
 800404a:	ddea      	ble.n	8004022 <__kernel_rem_pio2f+0x17a>
 800404c:	f84b 6b04 	str.w	r6, [fp], #4
 8004050:	f109 0901 	add.w	r9, r9, #1
 8004054:	3504      	adds	r5, #4
 8004056:	e75d      	b.n	8003f14 <__kernel_rem_pio2f+0x6c>
 8004058:	46aa      	mov	sl, r5
 800405a:	461e      	mov	r6, r3
 800405c:	f04f 0800 	mov.w	r8, #0
 8004060:	e7ef      	b.n	8004042 <__kernel_rem_pio2f+0x19a>
 8004062:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004066:	4628      	mov	r0, r5
 8004068:	f7fc f99c 	bl	80003a4 <__aeabi_fmul>
 800406c:	f7fc fdfe 	bl	8000c6c <__aeabi_f2iz>
 8004070:	f7fc fd32 	bl	8000ad8 <__aeabi_i2f>
 8004074:	4649      	mov	r1, r9
 8004076:	9009      	str	r0, [sp, #36]	; 0x24
 8004078:	f7fc f994 	bl	80003a4 <__aeabi_fmul>
 800407c:	4601      	mov	r1, r0
 800407e:	4628      	mov	r0, r5
 8004080:	f7fc fc74 	bl	800096c <__aeabi_fsub>
 8004084:	f7fc fdf2 	bl	8000c6c <__aeabi_f2iz>
 8004088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800408a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800408e:	f846 0b04 	str.w	r0, [r6], #4
 8004092:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8004096:	4618      	mov	r0, r3
 8004098:	f7fc fc6a 	bl	8000970 <__addsf3>
 800409c:	4605      	mov	r5, r0
 800409e:	e754      	b.n	8003f4a <__kernel_rem_pio2f+0xa2>
 80040a0:	d106      	bne.n	80040b0 <__kernel_rem_pio2f+0x208>
 80040a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80040a6:	aa0a      	add	r2, sp, #40	; 0x28
 80040a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80040ac:	11ed      	asrs	r5, r5, #7
 80040ae:	e783      	b.n	8003fb8 <__kernel_rem_pio2f+0x110>
 80040b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80040b4:	f7fc fdc6 	bl	8000c44 <__aeabi_fcmpge>
 80040b8:	4605      	mov	r5, r0
 80040ba:	bb98      	cbnz	r0, 8004124 <__kernel_rem_pio2f+0x27c>
 80040bc:	2100      	movs	r1, #0
 80040be:	4648      	mov	r0, r9
 80040c0:	f7fc fda2 	bl	8000c08 <__aeabi_fcmpeq>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	f000 8098 	beq.w	80041fa <__kernel_rem_pio2f+0x352>
 80040ca:	f108 34ff 	add.w	r4, r8, #4294967295
 80040ce:	4623      	mov	r3, r4
 80040d0:	2200      	movs	r2, #0
 80040d2:	9901      	ldr	r1, [sp, #4]
 80040d4:	428b      	cmp	r3, r1
 80040d6:	da4c      	bge.n	8004172 <__kernel_rem_pio2f+0x2ca>
 80040d8:	2a00      	cmp	r2, #0
 80040da:	d067      	beq.n	80041ac <__kernel_rem_pio2f+0x304>
 80040dc:	ab0a      	add	r3, sp, #40	; 0x28
 80040de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80040e2:	3f08      	subs	r7, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8086 	beq.w	80041f6 <__kernel_rem_pio2f+0x34e>
 80040ea:	4639      	mov	r1, r7
 80040ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80040f0:	f000 f98e 	bl	8004410 <scalbnf>
 80040f4:	46a2      	mov	sl, r4
 80040f6:	4681      	mov	r9, r0
 80040f8:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 80040fc:	af46      	add	r7, sp, #280	; 0x118
 80040fe:	f1ba 0f00 	cmp.w	sl, #0
 8004102:	f280 80af 	bge.w	8004264 <__kernel_rem_pio2f+0x3bc>
 8004106:	4627      	mov	r7, r4
 8004108:	2200      	movs	r2, #0
 800410a:	2f00      	cmp	r7, #0
 800410c:	f2c0 80d9 	blt.w	80042c2 <__kernel_rem_pio2f+0x41a>
 8004110:	a946      	add	r1, sp, #280	; 0x118
 8004112:	4690      	mov	r8, r2
 8004114:	f04f 0a00 	mov.w	sl, #0
 8004118:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <__kernel_rem_pio2f+0x300>)
 800411a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800411e:	eba4 0907 	sub.w	r9, r4, r7
 8004122:	e0c2      	b.n	80042aa <__kernel_rem_pio2f+0x402>
 8004124:	2502      	movs	r5, #2
 8004126:	e749      	b.n	8003fbc <__kernel_rem_pio2f+0x114>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	f1ba 0f00 	cmp.w	sl, #0
 800412e:	d108      	bne.n	8004142 <__kernel_rem_pio2f+0x29a>
 8004130:	b11b      	cbz	r3, 800413a <__kernel_rem_pio2f+0x292>
 8004132:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	2301      	movs	r3, #1
 800413a:	469a      	mov	sl, r3
 800413c:	3201      	adds	r2, #1
 800413e:	3404      	adds	r4, #4
 8004140:	e73f      	b.n	8003fc2 <__kernel_rem_pio2f+0x11a>
 8004142:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	4653      	mov	r3, sl
 800414a:	e7f6      	b.n	800413a <__kernel_rem_pio2f+0x292>
 800414c:	f108 32ff 	add.w	r2, r8, #4294967295
 8004150:	ab0a      	add	r3, sp, #40	; 0x28
 8004152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415a:	a90a      	add	r1, sp, #40	; 0x28
 800415c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004160:	e73a      	b.n	8003fd8 <__kernel_rem_pio2f+0x130>
 8004162:	f108 32ff 	add.w	r2, r8, #4294967295
 8004166:	ab0a      	add	r3, sp, #40	; 0x28
 8004168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004170:	e7f3      	b.n	800415a <__kernel_rem_pio2f+0x2b2>
 8004172:	a90a      	add	r1, sp, #40	; 0x28
 8004174:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004178:	3b01      	subs	r3, #1
 800417a:	430a      	orrs	r2, r1
 800417c:	e7a9      	b.n	80040d2 <__kernel_rem_pio2f+0x22a>
 800417e:	3401      	adds	r4, #1
 8004180:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004184:	2a00      	cmp	r2, #0
 8004186:	d0fa      	beq.n	800417e <__kernel_rem_pio2f+0x2d6>
 8004188:	9b04      	ldr	r3, [sp, #16]
 800418a:	aa1e      	add	r2, sp, #120	; 0x78
 800418c:	4443      	add	r3, r8
 800418e:	f108 0601 	add.w	r6, r8, #1
 8004192:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004196:	4444      	add	r4, r8
 8004198:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800419c:	42b4      	cmp	r4, r6
 800419e:	da08      	bge.n	80041b2 <__kernel_rem_pio2f+0x30a>
 80041a0:	46a0      	mov	r8, r4
 80041a2:	e6c6      	b.n	8003f32 <__kernel_rem_pio2f+0x8a>
 80041a4:	0800493c 	.word	0x0800493c
 80041a8:	08004910 	.word	0x08004910
 80041ac:	2401      	movs	r4, #1
 80041ae:	9b08      	ldr	r3, [sp, #32]
 80041b0:	e7e6      	b.n	8004180 <__kernel_rem_pio2f+0x2d8>
 80041b2:	9b07      	ldr	r3, [sp, #28]
 80041b4:	46ab      	mov	fp, r5
 80041b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80041ba:	f7fc fc8d 	bl	8000ad8 <__aeabi_i2f>
 80041be:	f04f 0a00 	mov.w	sl, #0
 80041c2:	f04f 0800 	mov.w	r8, #0
 80041c6:	6028      	str	r0, [r5, #0]
 80041c8:	9b03      	ldr	r3, [sp, #12]
 80041ca:	459a      	cmp	sl, r3
 80041cc:	dd04      	ble.n	80041d8 <__kernel_rem_pio2f+0x330>
 80041ce:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80041d2:	3504      	adds	r5, #4
 80041d4:	3601      	adds	r6, #1
 80041d6:	e7e1      	b.n	800419c <__kernel_rem_pio2f+0x2f4>
 80041d8:	9b05      	ldr	r3, [sp, #20]
 80041da:	f85b 0904 	ldr.w	r0, [fp], #-4
 80041de:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80041e2:	f7fc f8df 	bl	80003a4 <__aeabi_fmul>
 80041e6:	4601      	mov	r1, r0
 80041e8:	4640      	mov	r0, r8
 80041ea:	f7fc fbc1 	bl	8000970 <__addsf3>
 80041ee:	f10a 0a01 	add.w	sl, sl, #1
 80041f2:	4680      	mov	r8, r0
 80041f4:	e7e8      	b.n	80041c8 <__kernel_rem_pio2f+0x320>
 80041f6:	3c01      	subs	r4, #1
 80041f8:	e770      	b.n	80040dc <__kernel_rem_pio2f+0x234>
 80041fa:	9b06      	ldr	r3, [sp, #24]
 80041fc:	9a02      	ldr	r2, [sp, #8]
 80041fe:	4648      	mov	r0, r9
 8004200:	1a99      	subs	r1, r3, r2
 8004202:	f000 f905 	bl	8004410 <scalbnf>
 8004206:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800420a:	4604      	mov	r4, r0
 800420c:	f7fc fd1a 	bl	8000c44 <__aeabi_fcmpge>
 8004210:	b300      	cbz	r0, 8004254 <__kernel_rem_pio2f+0x3ac>
 8004212:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004216:	4620      	mov	r0, r4
 8004218:	f7fc f8c4 	bl	80003a4 <__aeabi_fmul>
 800421c:	f7fc fd26 	bl	8000c6c <__aeabi_f2iz>
 8004220:	f7fc fc5a 	bl	8000ad8 <__aeabi_i2f>
 8004224:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004228:	4681      	mov	r9, r0
 800422a:	f7fc f8bb 	bl	80003a4 <__aeabi_fmul>
 800422e:	4601      	mov	r1, r0
 8004230:	4620      	mov	r0, r4
 8004232:	f7fc fb9b 	bl	800096c <__aeabi_fsub>
 8004236:	f7fc fd19 	bl	8000c6c <__aeabi_f2iz>
 800423a:	ab0a      	add	r3, sp, #40	; 0x28
 800423c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004240:	4648      	mov	r0, r9
 8004242:	f7fc fd13 	bl	8000c6c <__aeabi_f2iz>
 8004246:	f108 0401 	add.w	r4, r8, #1
 800424a:	ab0a      	add	r3, sp, #40	; 0x28
 800424c:	3708      	adds	r7, #8
 800424e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004252:	e74a      	b.n	80040ea <__kernel_rem_pio2f+0x242>
 8004254:	4620      	mov	r0, r4
 8004256:	f7fc fd09 	bl	8000c6c <__aeabi_f2iz>
 800425a:	ab0a      	add	r3, sp, #40	; 0x28
 800425c:	4644      	mov	r4, r8
 800425e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004262:	e742      	b.n	80040ea <__kernel_rem_pio2f+0x242>
 8004264:	ab0a      	add	r3, sp, #40	; 0x28
 8004266:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800426a:	f7fc fc35 	bl	8000ad8 <__aeabi_i2f>
 800426e:	4649      	mov	r1, r9
 8004270:	f7fc f898 	bl	80003a4 <__aeabi_fmul>
 8004274:	4641      	mov	r1, r8
 8004276:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800427a:	4648      	mov	r0, r9
 800427c:	f7fc f892 	bl	80003a4 <__aeabi_fmul>
 8004280:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004284:	4681      	mov	r9, r0
 8004286:	e73a      	b.n	80040fe <__kernel_rem_pio2f+0x256>
 8004288:	f853 0b04 	ldr.w	r0, [r3], #4
 800428c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8004290:	9203      	str	r2, [sp, #12]
 8004292:	9302      	str	r3, [sp, #8]
 8004294:	f7fc f886 	bl	80003a4 <__aeabi_fmul>
 8004298:	4601      	mov	r1, r0
 800429a:	4640      	mov	r0, r8
 800429c:	f7fc fb68 	bl	8000970 <__addsf3>
 80042a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80042a4:	4680      	mov	r8, r0
 80042a6:	f10a 0a01 	add.w	sl, sl, #1
 80042aa:	9901      	ldr	r1, [sp, #4]
 80042ac:	458a      	cmp	sl, r1
 80042ae:	dc01      	bgt.n	80042b4 <__kernel_rem_pio2f+0x40c>
 80042b0:	45ca      	cmp	sl, r9
 80042b2:	dde9      	ble.n	8004288 <__kernel_rem_pio2f+0x3e0>
 80042b4:	ab5a      	add	r3, sp, #360	; 0x168
 80042b6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80042ba:	f849 8ca0 	str.w	r8, [r9, #-160]
 80042be:	3f01      	subs	r7, #1
 80042c0:	e723      	b.n	800410a <__kernel_rem_pio2f+0x262>
 80042c2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	dc07      	bgt.n	80042d8 <__kernel_rem_pio2f+0x430>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dc4e      	bgt.n	800436a <__kernel_rem_pio2f+0x4c2>
 80042cc:	d02e      	beq.n	800432c <__kernel_rem_pio2f+0x484>
 80042ce:	f006 0007 	and.w	r0, r6, #7
 80042d2:	b05b      	add	sp, #364	; 0x16c
 80042d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d1f7      	bne.n	80042ce <__kernel_rem_pio2f+0x426>
 80042de:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 80042e2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80042e6:	46b8      	mov	r8, r7
 80042e8:	46a2      	mov	sl, r4
 80042ea:	f1ba 0f00 	cmp.w	sl, #0
 80042ee:	dc49      	bgt.n	8004384 <__kernel_rem_pio2f+0x4dc>
 80042f0:	46a1      	mov	r9, r4
 80042f2:	f1b9 0f01 	cmp.w	r9, #1
 80042f6:	dc60      	bgt.n	80043ba <__kernel_rem_pio2f+0x512>
 80042f8:	2000      	movs	r0, #0
 80042fa:	2c01      	cmp	r4, #1
 80042fc:	dc76      	bgt.n	80043ec <__kernel_rem_pio2f+0x544>
 80042fe:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8004300:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8004302:	2d00      	cmp	r5, #0
 8004304:	d178      	bne.n	80043f8 <__kernel_rem_pio2f+0x550>
 8004306:	9900      	ldr	r1, [sp, #0]
 8004308:	600a      	str	r2, [r1, #0]
 800430a:	460a      	mov	r2, r1
 800430c:	604b      	str	r3, [r1, #4]
 800430e:	6090      	str	r0, [r2, #8]
 8004310:	e7dd      	b.n	80042ce <__kernel_rem_pio2f+0x426>
 8004312:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8004316:	f7fc fb2b 	bl	8000970 <__addsf3>
 800431a:	3c01      	subs	r4, #1
 800431c:	2c00      	cmp	r4, #0
 800431e:	daf8      	bge.n	8004312 <__kernel_rem_pio2f+0x46a>
 8004320:	b10d      	cbz	r5, 8004326 <__kernel_rem_pio2f+0x47e>
 8004322:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004326:	9b00      	ldr	r3, [sp, #0]
 8004328:	6018      	str	r0, [r3, #0]
 800432a:	e7d0      	b.n	80042ce <__kernel_rem_pio2f+0x426>
 800432c:	2000      	movs	r0, #0
 800432e:	af32      	add	r7, sp, #200	; 0xc8
 8004330:	e7f4      	b.n	800431c <__kernel_rem_pio2f+0x474>
 8004332:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8004336:	f7fc fb1b 	bl	8000970 <__addsf3>
 800433a:	f108 38ff 	add.w	r8, r8, #4294967295
 800433e:	f1b8 0f00 	cmp.w	r8, #0
 8004342:	daf6      	bge.n	8004332 <__kernel_rem_pio2f+0x48a>
 8004344:	b1ad      	cbz	r5, 8004372 <__kernel_rem_pio2f+0x4ca>
 8004346:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800434a:	9a00      	ldr	r2, [sp, #0]
 800434c:	4601      	mov	r1, r0
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8004352:	f7fc fb0b 	bl	800096c <__aeabi_fsub>
 8004356:	f04f 0801 	mov.w	r8, #1
 800435a:	4544      	cmp	r4, r8
 800435c:	da0b      	bge.n	8004376 <__kernel_rem_pio2f+0x4ce>
 800435e:	b10d      	cbz	r5, 8004364 <__kernel_rem_pio2f+0x4bc>
 8004360:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004364:	9b00      	ldr	r3, [sp, #0]
 8004366:	6058      	str	r0, [r3, #4]
 8004368:	e7b1      	b.n	80042ce <__kernel_rem_pio2f+0x426>
 800436a:	46a0      	mov	r8, r4
 800436c:	2000      	movs	r0, #0
 800436e:	af32      	add	r7, sp, #200	; 0xc8
 8004370:	e7e5      	b.n	800433e <__kernel_rem_pio2f+0x496>
 8004372:	4603      	mov	r3, r0
 8004374:	e7e9      	b.n	800434a <__kernel_rem_pio2f+0x4a2>
 8004376:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800437a:	f7fc faf9 	bl	8000970 <__addsf3>
 800437e:	f108 0801 	add.w	r8, r8, #1
 8004382:	e7ea      	b.n	800435a <__kernel_rem_pio2f+0x4b2>
 8004384:	f8d8 3000 	ldr.w	r3, [r8]
 8004388:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	9302      	str	r3, [sp, #8]
 8004392:	9201      	str	r2, [sp, #4]
 8004394:	f7fc faec 	bl	8000970 <__addsf3>
 8004398:	9a01      	ldr	r2, [sp, #4]
 800439a:	4601      	mov	r1, r0
 800439c:	4681      	mov	r9, r0
 800439e:	4610      	mov	r0, r2
 80043a0:	f7fc fae4 	bl	800096c <__aeabi_fsub>
 80043a4:	9b02      	ldr	r3, [sp, #8]
 80043a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7fc fae0 	bl	8000970 <__addsf3>
 80043b0:	f848 0904 	str.w	r0, [r8], #-4
 80043b4:	f8c8 9000 	str.w	r9, [r8]
 80043b8:	e797      	b.n	80042ea <__kernel_rem_pio2f+0x442>
 80043ba:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80043be:	f8d7 a000 	ldr.w	sl, [r7]
 80043c2:	4618      	mov	r0, r3
 80043c4:	4651      	mov	r1, sl
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	f7fc fad2 	bl	8000970 <__addsf3>
 80043cc:	9b01      	ldr	r3, [sp, #4]
 80043ce:	4601      	mov	r1, r0
 80043d0:	4680      	mov	r8, r0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fc faca 	bl	800096c <__aeabi_fsub>
 80043d8:	4651      	mov	r1, sl
 80043da:	f7fc fac9 	bl	8000970 <__addsf3>
 80043de:	f847 0904 	str.w	r0, [r7], #-4
 80043e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80043e6:	f8c7 8000 	str.w	r8, [r7]
 80043ea:	e782      	b.n	80042f2 <__kernel_rem_pio2f+0x44a>
 80043ec:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80043f0:	f7fc fabe 	bl	8000970 <__addsf3>
 80043f4:	3c01      	subs	r4, #1
 80043f6:	e780      	b.n	80042fa <__kernel_rem_pio2f+0x452>
 80043f8:	9900      	ldr	r1, [sp, #0]
 80043fa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80043fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004402:	600a      	str	r2, [r1, #0]
 8004404:	604b      	str	r3, [r1, #4]
 8004406:	460a      	mov	r2, r1
 8004408:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800440c:	e77f      	b.n	800430e <__kernel_rem_pio2f+0x466>
 800440e:	bf00      	nop

08004410 <scalbnf>:
 8004410:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4603      	mov	r3, r0
 8004418:	460d      	mov	r5, r1
 800441a:	4604      	mov	r4, r0
 800441c:	d02e      	beq.n	800447c <scalbnf+0x6c>
 800441e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004422:	d304      	bcc.n	800442e <scalbnf+0x1e>
 8004424:	4601      	mov	r1, r0
 8004426:	f7fc faa3 	bl	8000970 <__addsf3>
 800442a:	4603      	mov	r3, r0
 800442c:	e026      	b.n	800447c <scalbnf+0x6c>
 800442e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8004432:	d118      	bne.n	8004466 <scalbnf+0x56>
 8004434:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8004438:	f7fb ffb4 	bl	80003a4 <__aeabi_fmul>
 800443c:	4a17      	ldr	r2, [pc, #92]	; (800449c <scalbnf+0x8c>)
 800443e:	4603      	mov	r3, r0
 8004440:	4295      	cmp	r5, r2
 8004442:	db0c      	blt.n	800445e <scalbnf+0x4e>
 8004444:	4604      	mov	r4, r0
 8004446:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800444a:	3a19      	subs	r2, #25
 800444c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004450:	428d      	cmp	r5, r1
 8004452:	dd0a      	ble.n	800446a <scalbnf+0x5a>
 8004454:	4912      	ldr	r1, [pc, #72]	; (80044a0 <scalbnf+0x90>)
 8004456:	4618      	mov	r0, r3
 8004458:	f361 001e 	bfi	r0, r1, #0, #31
 800445c:	e000      	b.n	8004460 <scalbnf+0x50>
 800445e:	4911      	ldr	r1, [pc, #68]	; (80044a4 <scalbnf+0x94>)
 8004460:	f7fb ffa0 	bl	80003a4 <__aeabi_fmul>
 8004464:	e7e1      	b.n	800442a <scalbnf+0x1a>
 8004466:	0dd2      	lsrs	r2, r2, #23
 8004468:	e7f0      	b.n	800444c <scalbnf+0x3c>
 800446a:	1951      	adds	r1, r2, r5
 800446c:	29fe      	cmp	r1, #254	; 0xfe
 800446e:	dcf1      	bgt.n	8004454 <scalbnf+0x44>
 8004470:	2900      	cmp	r1, #0
 8004472:	dd05      	ble.n	8004480 <scalbnf+0x70>
 8004474:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8004478:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800447c:	4618      	mov	r0, r3
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	f111 0f16 	cmn.w	r1, #22
 8004484:	da01      	bge.n	800448a <scalbnf+0x7a>
 8004486:	4907      	ldr	r1, [pc, #28]	; (80044a4 <scalbnf+0x94>)
 8004488:	e7e5      	b.n	8004456 <scalbnf+0x46>
 800448a:	f101 0019 	add.w	r0, r1, #25
 800448e:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8004492:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8004496:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800449a:	e7e1      	b.n	8004460 <scalbnf+0x50>
 800449c:	ffff3cb0 	.word	0xffff3cb0
 80044a0:	7149f2ca 	.word	0x7149f2ca
 80044a4:	0da24260 	.word	0x0da24260

080044a8 <floorf>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80044ae:	3d7f      	subs	r5, #127	; 0x7f
 80044b0:	2d16      	cmp	r5, #22
 80044b2:	4601      	mov	r1, r0
 80044b4:	4604      	mov	r4, r0
 80044b6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80044ba:	dc25      	bgt.n	8004508 <floorf+0x60>
 80044bc:	2d00      	cmp	r5, #0
 80044be:	da0e      	bge.n	80044de <floorf+0x36>
 80044c0:	4916      	ldr	r1, [pc, #88]	; (800451c <floorf+0x74>)
 80044c2:	f7fc fa55 	bl	8000970 <__addsf3>
 80044c6:	2100      	movs	r1, #0
 80044c8:	f7fc fbc6 	bl	8000c58 <__aeabi_fcmpgt>
 80044cc:	b128      	cbz	r0, 80044da <floorf+0x32>
 80044ce:	2c00      	cmp	r4, #0
 80044d0:	da22      	bge.n	8004518 <floorf+0x70>
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <floorf+0x78>)
 80044d4:	2e00      	cmp	r6, #0
 80044d6:	bf18      	it	ne
 80044d8:	461c      	movne	r4, r3
 80044da:	4621      	mov	r1, r4
 80044dc:	e01a      	b.n	8004514 <floorf+0x6c>
 80044de:	4e11      	ldr	r6, [pc, #68]	; (8004524 <floorf+0x7c>)
 80044e0:	412e      	asrs	r6, r5
 80044e2:	4230      	tst	r0, r6
 80044e4:	d016      	beq.n	8004514 <floorf+0x6c>
 80044e6:	490d      	ldr	r1, [pc, #52]	; (800451c <floorf+0x74>)
 80044e8:	f7fc fa42 	bl	8000970 <__addsf3>
 80044ec:	2100      	movs	r1, #0
 80044ee:	f7fc fbb3 	bl	8000c58 <__aeabi_fcmpgt>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d0f1      	beq.n	80044da <floorf+0x32>
 80044f6:	2c00      	cmp	r4, #0
 80044f8:	bfbe      	ittt	lt
 80044fa:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80044fe:	412b      	asrlt	r3, r5
 8004500:	18e4      	addlt	r4, r4, r3
 8004502:	ea24 0406 	bic.w	r4, r4, r6
 8004506:	e7e8      	b.n	80044da <floorf+0x32>
 8004508:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800450c:	d302      	bcc.n	8004514 <floorf+0x6c>
 800450e:	f7fc fa2f 	bl	8000970 <__addsf3>
 8004512:	4601      	mov	r1, r0
 8004514:	4608      	mov	r0, r1
 8004516:	bd70      	pop	{r4, r5, r6, pc}
 8004518:	2400      	movs	r4, #0
 800451a:	e7de      	b.n	80044da <floorf+0x32>
 800451c:	7149f2ca 	.word	0x7149f2ca
 8004520:	bf800000 	.word	0xbf800000
 8004524:	007fffff 	.word	0x007fffff

08004528 <_init>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr

08004534 <_fini>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr
