
PWM_Sine_Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000443c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006600  08004550  08004550  00014550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab50  0800ab50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab50  0800ab50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab50  0800ab50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab50  0800ab50  0001ab50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab54  0800ab54  0001ab54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800ab58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  0800ab64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800ab64  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e39  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c6  00000000  00000000  00028e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001674a  00000000  00000000  0002b900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1f6  00000000  00000000  0004204a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084266  00000000  00000000  0004c240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d04a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  000d04f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004534 	.word	0x08004534

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004534 	.word	0x08004534

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__aeabi_d2uiz>:
 8000884:	004a      	lsls	r2, r1, #1
 8000886:	d211      	bcs.n	80008ac <__aeabi_d2uiz+0x28>
 8000888:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800088c:	d211      	bcs.n	80008b2 <__aeabi_d2uiz+0x2e>
 800088e:	d50d      	bpl.n	80008ac <__aeabi_d2uiz+0x28>
 8000890:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000894:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000898:	d40e      	bmi.n	80008b8 <__aeabi_d2uiz+0x34>
 800089a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800089e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008a6:	fa23 f002 	lsr.w	r0, r3, r2
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d102      	bne.n	80008be <__aeabi_d2uiz+0x3a>
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	4770      	bx	lr
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	4770      	bx	lr

080008c4 <__aeabi_d2f>:
 80008c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008cc:	bf24      	itt	cs
 80008ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008d6:	d90d      	bls.n	80008f4 <__aeabi_d2f+0x30>
 80008d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008ec:	bf08      	it	eq
 80008ee:	f020 0001 	biceq.w	r0, r0, #1
 80008f2:	4770      	bx	lr
 80008f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008f8:	d121      	bne.n	800093e <__aeabi_d2f+0x7a>
 80008fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008fe:	bfbc      	itt	lt
 8000900:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000904:	4770      	bxlt	lr
 8000906:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800090e:	f1c2 0218 	rsb	r2, r2, #24
 8000912:	f1c2 0c20 	rsb	ip, r2, #32
 8000916:	fa10 f30c 	lsls.w	r3, r0, ip
 800091a:	fa20 f002 	lsr.w	r0, r0, r2
 800091e:	bf18      	it	ne
 8000920:	f040 0001 	orrne.w	r0, r0, #1
 8000924:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000928:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800092c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000930:	ea40 000c 	orr.w	r0, r0, ip
 8000934:	fa23 f302 	lsr.w	r3, r3, r2
 8000938:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800093c:	e7cc      	b.n	80008d8 <__aeabi_d2f+0x14>
 800093e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000942:	d107      	bne.n	8000954 <__aeabi_d2f+0x90>
 8000944:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000948:	bf1e      	ittt	ne
 800094a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800094e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000952:	4770      	bxne	lr
 8000954:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000958:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800095c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <__aeabi_frsub>:
 8000964:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000968:	e002      	b.n	8000970 <__addsf3>
 800096a:	bf00      	nop

0800096c <__aeabi_fsub>:
 800096c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000970 <__addsf3>:
 8000970:	0042      	lsls	r2, r0, #1
 8000972:	bf1f      	itttt	ne
 8000974:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000978:	ea92 0f03 	teqne	r2, r3
 800097c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000980:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000984:	d06a      	beq.n	8000a5c <__addsf3+0xec>
 8000986:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800098a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800098e:	bfc1      	itttt	gt
 8000990:	18d2      	addgt	r2, r2, r3
 8000992:	4041      	eorgt	r1, r0
 8000994:	4048      	eorgt	r0, r1
 8000996:	4041      	eorgt	r1, r0
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	2b19      	cmp	r3, #25
 800099e:	bf88      	it	hi
 80009a0:	4770      	bxhi	lr
 80009a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ae:	bf18      	it	ne
 80009b0:	4240      	negne	r0, r0
 80009b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009be:	bf18      	it	ne
 80009c0:	4249      	negne	r1, r1
 80009c2:	ea92 0f03 	teq	r2, r3
 80009c6:	d03f      	beq.n	8000a48 <__addsf3+0xd8>
 80009c8:	f1a2 0201 	sub.w	r2, r2, #1
 80009cc:	fa41 fc03 	asr.w	ip, r1, r3
 80009d0:	eb10 000c 	adds.w	r0, r0, ip
 80009d4:	f1c3 0320 	rsb	r3, r3, #32
 80009d8:	fa01 f103 	lsl.w	r1, r1, r3
 80009dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009e0:	d502      	bpl.n	80009e8 <__addsf3+0x78>
 80009e2:	4249      	negs	r1, r1
 80009e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009ec:	d313      	bcc.n	8000a16 <__addsf3+0xa6>
 80009ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009f2:	d306      	bcc.n	8000a02 <__addsf3+0x92>
 80009f4:	0840      	lsrs	r0, r0, #1
 80009f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009fa:	f102 0201 	add.w	r2, r2, #1
 80009fe:	2afe      	cmp	r2, #254	; 0xfe
 8000a00:	d251      	bcs.n	8000aa6 <__addsf3+0x136>
 8000a02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a0a:	bf08      	it	eq
 8000a0c:	f020 0001 	biceq.w	r0, r0, #1
 8000a10:	ea40 0003 	orr.w	r0, r0, r3
 8000a14:	4770      	bx	lr
 8000a16:	0049      	lsls	r1, r1, #1
 8000a18:	eb40 0000 	adc.w	r0, r0, r0
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	bf28      	it	cs
 8000a20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a24:	d2ed      	bcs.n	8000a02 <__addsf3+0x92>
 8000a26:	fab0 fc80 	clz	ip, r0
 8000a2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a36:	bfaa      	itet	ge
 8000a38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a3c:	4252      	neglt	r2, r2
 8000a3e:	4318      	orrge	r0, r3
 8000a40:	bfbc      	itt	lt
 8000a42:	40d0      	lsrlt	r0, r2
 8000a44:	4318      	orrlt	r0, r3
 8000a46:	4770      	bx	lr
 8000a48:	f092 0f00 	teq	r2, #0
 8000a4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a50:	bf06      	itte	eq
 8000a52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a56:	3201      	addeq	r2, #1
 8000a58:	3b01      	subne	r3, #1
 8000a5a:	e7b5      	b.n	80009c8 <__addsf3+0x58>
 8000a5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	bf18      	it	ne
 8000a66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6a:	d021      	beq.n	8000ab0 <__addsf3+0x140>
 8000a6c:	ea92 0f03 	teq	r2, r3
 8000a70:	d004      	beq.n	8000a7c <__addsf3+0x10c>
 8000a72:	f092 0f00 	teq	r2, #0
 8000a76:	bf08      	it	eq
 8000a78:	4608      	moveq	r0, r1
 8000a7a:	4770      	bx	lr
 8000a7c:	ea90 0f01 	teq	r0, r1
 8000a80:	bf1c      	itt	ne
 8000a82:	2000      	movne	r0, #0
 8000a84:	4770      	bxne	lr
 8000a86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a8a:	d104      	bne.n	8000a96 <__addsf3+0x126>
 8000a8c:	0040      	lsls	r0, r0, #1
 8000a8e:	bf28      	it	cs
 8000a90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a9a:	bf3c      	itt	cc
 8000a9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bxcc	lr
 8000aa2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	4770      	bx	lr
 8000ab0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ab4:	bf16      	itet	ne
 8000ab6:	4608      	movne	r0, r1
 8000ab8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000abc:	4601      	movne	r1, r0
 8000abe:	0242      	lsls	r2, r0, #9
 8000ac0:	bf06      	itte	eq
 8000ac2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ac6:	ea90 0f01 	teqeq	r0, r1
 8000aca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_ui2f>:
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e004      	b.n	8000ae0 <__aeabi_i2f+0x8>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_i2f>:
 8000ad8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000adc:	bf48      	it	mi
 8000ade:	4240      	negmi	r0, r0
 8000ae0:	ea5f 0c00 	movs.w	ip, r0
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000aec:	4601      	mov	r1, r0
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	e01c      	b.n	8000b2e <__aeabi_l2f+0x2a>

08000af4 <__aeabi_ul2f>:
 8000af4:	ea50 0201 	orrs.w	r2, r0, r1
 8000af8:	bf08      	it	eq
 8000afa:	4770      	bxeq	lr
 8000afc:	f04f 0300 	mov.w	r3, #0
 8000b00:	e00a      	b.n	8000b18 <__aeabi_l2f+0x14>
 8000b02:	bf00      	nop

08000b04 <__aeabi_l2f>:
 8000b04:	ea50 0201 	orrs.w	r2, r0, r1
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__aeabi_l2f+0x14>
 8000b12:	4240      	negs	r0, r0
 8000b14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b18:	ea5f 0c01 	movs.w	ip, r1
 8000b1c:	bf02      	ittt	eq
 8000b1e:	4684      	moveq	ip, r0
 8000b20:	4601      	moveq	r1, r0
 8000b22:	2000      	moveq	r0, #0
 8000b24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b28:	bf08      	it	eq
 8000b2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b32:	fabc f28c 	clz	r2, ip
 8000b36:	3a08      	subs	r2, #8
 8000b38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b3c:	db10      	blt.n	8000b60 <__aeabi_l2f+0x5c>
 8000b3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b42:	4463      	add	r3, ip
 8000b44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b50:	fa20 f202 	lsr.w	r2, r0, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f102 0220 	add.w	r2, r2, #32
 8000b64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b70:	fa21 f202 	lsr.w	r2, r1, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b7e:	4770      	bx	lr

08000b80 <__gesf2>:
 8000b80:	f04f 3cff 	mov.w	ip, #4294967295
 8000b84:	e006      	b.n	8000b94 <__cmpsf2+0x4>
 8000b86:	bf00      	nop

08000b88 <__lesf2>:
 8000b88:	f04f 0c01 	mov.w	ip, #1
 8000b8c:	e002      	b.n	8000b94 <__cmpsf2+0x4>
 8000b8e:	bf00      	nop

08000b90 <__cmpsf2>:
 8000b90:	f04f 0c01 	mov.w	ip, #1
 8000b94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba4:	bf18      	it	ne
 8000ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000baa:	d011      	beq.n	8000bd0 <__cmpsf2+0x40>
 8000bac:	b001      	add	sp, #4
 8000bae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bb2:	bf18      	it	ne
 8000bb4:	ea90 0f01 	teqne	r0, r1
 8000bb8:	bf58      	it	pl
 8000bba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bbe:	bf88      	it	hi
 8000bc0:	17c8      	asrhi	r0, r1, #31
 8000bc2:	bf38      	it	cc
 8000bc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc8:	bf18      	it	ne
 8000bca:	f040 0001 	orrne.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd4:	d102      	bne.n	8000bdc <__cmpsf2+0x4c>
 8000bd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bda:	d105      	bne.n	8000be8 <__cmpsf2+0x58>
 8000bdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000be0:	d1e4      	bne.n	8000bac <__cmpsf2+0x1c>
 8000be2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be6:	d0e1      	beq.n	8000bac <__cmpsf2+0x1c>
 8000be8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_cfrcmple>:
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4661      	mov	r1, ip
 8000bf6:	e7ff      	b.n	8000bf8 <__aeabi_cfcmpeq>

08000bf8 <__aeabi_cfcmpeq>:
 8000bf8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bfa:	f7ff ffc9 	bl	8000b90 <__cmpsf2>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	bf48      	it	mi
 8000c02:	f110 0f00 	cmnmi.w	r0, #0
 8000c06:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c08 <__aeabi_fcmpeq>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff fff4 	bl	8000bf8 <__aeabi_cfcmpeq>
 8000c10:	bf0c      	ite	eq
 8000c12:	2001      	moveq	r0, #1
 8000c14:	2000      	movne	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_fcmplt>:
 8000c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c20:	f7ff ffea 	bl	8000bf8 <__aeabi_cfcmpeq>
 8000c24:	bf34      	ite	cc
 8000c26:	2001      	movcc	r0, #1
 8000c28:	2000      	movcs	r0, #0
 8000c2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2e:	bf00      	nop

08000c30 <__aeabi_fcmple>:
 8000c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c34:	f7ff ffe0 	bl	8000bf8 <__aeabi_cfcmpeq>
 8000c38:	bf94      	ite	ls
 8000c3a:	2001      	movls	r0, #1
 8000c3c:	2000      	movhi	r0, #0
 8000c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c42:	bf00      	nop

08000c44 <__aeabi_fcmpge>:
 8000c44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c48:	f7ff ffd2 	bl	8000bf0 <__aeabi_cfrcmple>
 8000c4c:	bf94      	ite	ls
 8000c4e:	2001      	movls	r0, #1
 8000c50:	2000      	movhi	r0, #0
 8000c52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c56:	bf00      	nop

08000c58 <__aeabi_fcmpgt>:
 8000c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c5c:	f7ff ffc8 	bl	8000bf0 <__aeabi_cfrcmple>
 8000c60:	bf34      	ite	cc
 8000c62:	2001      	movcc	r0, #1
 8000c64:	2000      	movcs	r0, #0
 8000c66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6a:	bf00      	nop

08000c6c <__aeabi_f2iz>:
 8000c6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c74:	d30f      	bcc.n	8000c96 <__aeabi_f2iz+0x2a>
 8000c76:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c7e:	d90d      	bls.n	8000c9c <__aeabi_f2iz+0x30>
 8000c80:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c88:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c90:	bf18      	it	ne
 8000c92:	4240      	negne	r0, r0
 8000c94:	4770      	bx	lr
 8000c96:	f04f 0000 	mov.w	r0, #0
 8000c9a:	4770      	bx	lr
 8000c9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_f2iz+0x3a>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d105      	bne.n	8000cb2 <__aeabi_f2iz+0x46>
 8000ca6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000caa:	bf08      	it	eq
 8000cac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cb0:	4770      	bx	lr
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b0e7      	sub	sp, #412	; 0x19c
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fb01 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f879 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc6:	f000 f987 	bl	8000fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cca:	f000 f967 	bl	8000f9c <MX_DMA_Init>
  MX_TIM3_Init();
 8000cce:	f000 f8b9 	bl	8000e44 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  for(uint8_t i=0; i<200; i++){
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000cd8:	e052      	b.n	8000d80 <main+0xc8>
	  angle = ASR*(float)i;
 8000cda:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fef6 	bl	8000ad0 <__aeabi_ui2f>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd74 	bl	80007d4 <__aeabi_f2d>
 8000cec:	a32a      	add	r3, pc, #168	; (adr r3, 8000d98 <main+0xe0>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	f7ff fa2d 	bl	8000150 <__aeabi_dmul>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f7ff fde1 	bl	80008c4 <__aeabi_d2f>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	  IV[i] = (uint16_t) rint(100 + 99*sinf(angle*(PI/180)));
 8000d08:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8000d0c:	f7ff fd62 	bl	80007d4 <__aeabi_f2d>
 8000d10:	a323      	add	r3, pc, #140	; (adr r3, 8000da0 <main+0xe8>)
 8000d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d16:	f7ff fa1b 	bl	8000150 <__aeabi_dmul>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fdcf 	bl	80008c4 <__aeabi_d2f>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fe31 	bl	8003990 <sinf>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	491d      	ldr	r1, [pc, #116]	; (8000da8 <main+0xf0>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fb36 	bl	80003a4 <__aeabi_fmul>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	491c      	ldr	r1, [pc, #112]	; (8000dac <main+0xf4>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe17 	bl	8000970 <__addsf3>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd45 	bl	80007d4 <__aeabi_f2d>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f002 fd8f 	bl	8003874 <rint>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	f897 4197 	ldrb.w	r4, [r7, #407]	; 0x197
 8000d5e:	4610      	mov	r0, r2
 8000d60:	4619      	mov	r1, r3
 8000d62:	f7ff fd8f 	bl	8000884 <__aeabi_d2uiz>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000d6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000d72:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for(uint8_t i=0; i<200; i++){
 8000d76:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000d80:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000d84:	2bc7      	cmp	r3, #199	; 0xc7
 8000d86:	d9a8      	bls.n	8000cda <main+0x22>
  }

  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)WAV_DATA, 12538);
 8000d88:	f243 03fa 	movw	r3, #12538	; 0x30fa
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <main+0xf8>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <main+0xfc>)
 8000d92:	f001 fc17 	bl	80025c4 <HAL_TIM_PWM_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <main+0xde>
 8000d98:	cccccccd 	.word	0xcccccccd
 8000d9c:	3ffccccc 	.word	0x3ffccccc
 8000da0:	a50de270 	.word	0xa50de270
 8000da4:	3f91df45 	.word	0x3f91df45
 8000da8:	42c60000 	.word	0x42c60000
 8000dac:	42c80000 	.word	0x42c80000
 8000db0:	08004550 	.word	0x08004550
 8000db4:	20000028 	.word	0x20000028

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fd4c 	bl	8003864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dec:	2302      	movs	r3, #2
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000df6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 ff59 	bl	8001cb8 <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e0c:	f000 f930 	bl	8001070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	230f      	movs	r3, #15
 8000e12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e14:	2302      	movs	r3, #2
 8000e16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 f9c6 	bl	80021bc <HAL_RCC_ClockConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e36:	f000 f91b 	bl	8001070 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3740      	adds	r7, #64	; 0x40
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b092      	sub	sp, #72	; 0x48
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e84:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000e86:	4a42      	ldr	r2, [pc, #264]	; (8000f90 <MX_TIM3_Init+0x14c>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8000e8a:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000e8c:	2217      	movs	r2, #23
 8000e8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000e96:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000e98:	22c7      	movs	r2, #199	; 0xc7
 8000e9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eaa:	4838      	ldr	r0, [pc, #224]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000eac:	f001 fae2 	bl	8002474 <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000eb6:	f000 f8db 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ec0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4831      	ldr	r0, [pc, #196]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000ec8:	f001 fee8 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ed2:	f000 f8cd 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ed6:	482d      	ldr	r0, [pc, #180]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000ed8:	f001 fb1b 	bl	8002512 <HAL_TIM_PWM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000ee2:	f000 f8c5 	bl	8001070 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000ef6:	f001 ff98 	bl	8002e2a <HAL_TIM_SlaveConfigSynchro>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000f00:	f000 f8b6 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	481e      	ldr	r0, [pc, #120]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000f14:	f002 fc12 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000f1e:	f000 f8a7 	bl	8001070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f22:	2360      	movs	r3, #96	; 0x60
 8000f24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000f3a:	f001 fded 	bl	8002b18 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000f44:	f000 f894 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_TIM3_Init+0x150>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <MX_TIM3_Init+0x154>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_TIM3_Init+0x150>)
 8000f50:	2210      	movs	r2, #16
 8000f52:	605a      	str	r2, [r3, #4]
  hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_TIM3_Init+0x150>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_TIM3_Init+0x150>)
 8000f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f60:	611a      	str	r2, [r3, #16]
  hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_TIM3_Init+0x150>)
 8000f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f68:	615a      	str	r2, [r3, #20]
  hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_TIM3_Init+0x150>)
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	619a      	str	r2, [r3, #24]
  hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_TIM3_Init+0x150>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim3_ch1_trig);
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_TIM3_Init+0x150>)
 8000f78:	f000 fb14 	bl	80015a4 <HAL_DMA_Init>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM3_Init+0x148>)
 8000f7e:	f000 f907 	bl	8001190 <HAL_TIM_MspPostInit>

}
 8000f82:	bf00      	nop
 8000f84:	3748      	adds	r7, #72	; 0x48
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000028 	.word	0x20000028
 8000f90:	40000400 	.word	0x40000400
 8000f94:	20000070 	.word	0x20000070
 8000f98:	4002006c 	.word	0x4002006c

08000f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_DMA_Init+0x38>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <MX_DMA_Init+0x38>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_DMA_Init+0x38>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2010      	movs	r0, #16
 8000fc0:	f000 fab9 	bl	8001536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f000 fad2 	bl	800156e <HAL_NVIC_EnableIRQ>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_GPIO_Init+0x90>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <MX_GPIO_Init+0x90>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_GPIO_Init+0x90>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_GPIO_Init+0x90>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a17      	ldr	r2, [pc, #92]	; (8001068 <MX_GPIO_Init+0x90>)
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_GPIO_Init+0x90>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0320 	and.w	r3, r3, #32
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_GPIO_Init+0x90>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <MX_GPIO_Init+0x90>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_GPIO_Init+0x90>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <MX_GPIO_Init+0x94>)
 800103c:	f000 fe24 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2302      	movs	r3, #2
 8001050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4619      	mov	r1, r3
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_GPIO_Init+0x94>)
 800105a:	f000 fc91 	bl	8001980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105e:	bf00      	nop
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	40011000 	.word	0x40011000

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_MspInit+0x5c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_MspInit+0x5c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_MspInit+0x5c>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_MspInit+0x5c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_MspInit+0x60>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_MspInit+0x60>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <HAL_TIM_Base_MspInit+0xa0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d141      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_TIM_Base_MspInit+0xa4>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a23      	ldr	r2, [pc, #140]	; (8001184 <HAL_TIM_Base_MspInit+0xa4>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_TIM_Base_MspInit+0xa4>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800110a:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_TIM_Base_MspInit+0xac>)
 800110e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 8001112:	2210      	movs	r2, #16
 8001114:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 8001124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001128:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 800112c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001130:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 8001134:	2220      	movs	r2, #32
 8001136:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800113e:	4812      	ldr	r0, [pc, #72]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 8001140:	f000 fa30 	bl	80015a4 <HAL_DMA_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800114a:	f7ff ff91 	bl	8001070 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_TIM_Base_MspInit+0xa8>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	201d      	movs	r0, #29
 800116c:	f000 f9e3 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001170:	201d      	movs	r0, #29
 8001172:	f000 f9fc 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40000400 	.word	0x40000400
 8001184:	40021000 	.word	0x40021000
 8001188:	20000070 	.word	0x20000070
 800118c:	4002006c 	.word	0x4002006c

08001190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_TIM_MspPostInit+0x58>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d117      	bne.n	80011e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_TIM_MspPostInit+0x5c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_TIM_MspPostInit+0x5c>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_TIM_MspPostInit+0x5c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011c8:	2340      	movs	r3, #64	; 0x40
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_TIM_MspPostInit+0x60>)
 80011dc:	f000 fbd0 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010800 	.word	0x40010800

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f889 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <DMA1_Channel6_IRQHandler+0x10>)
 800124a:	f000 fa65 	bl	8001718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000070 	.word	0x20000070

08001258 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM3_IRQHandler+0x10>)
 800125e:	f001 fb53 	bl	8002908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000028 	.word	0x20000028

0800126c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001278:	f7ff fff8 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800127e:	490c      	ldr	r1, [pc, #48]	; (80012b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001294:	4c09      	ldr	r4, [pc, #36]	; (80012bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a2:	f002 fabb 	bl	800381c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012a6:	f7ff fd07 	bl	8000cb8 <main>
  bx lr
 80012aa:	4770      	bx	lr
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012b4:	0800ab58 	.word	0x0800ab58
  ldr r2, =_sbss
 80012b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012bc:	200000b8 	.word	0x200000b8

080012c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC1_2_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x28>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x28>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f923 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fecc 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40022000 	.word	0x40022000

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f93b 	bl	800158a <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 f903 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	20000008 	.word	0x20000008
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x1c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x20>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a03      	ldr	r2, [pc, #12]	; (8001370 <HAL_IncTick+0x20>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000008 	.word	0x20000008
 8001370:	200000b4 	.word	0x200000b4

08001374 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <HAL_GetTick+0x10>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200000b4 	.word	0x200000b4

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4906      	ldr	r1, [pc, #24]	; (8001420 <__NVIC_EnableIRQ+0x34>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff90 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff2d 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff42 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff35 	bl	80013ec <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e043      	b.n	8001642 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_DMA_Init+0xa8>)
 80015c2:	4413      	add	r3, r2
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <HAL_DMA_Init+0xac>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	009a      	lsls	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_DMA_Init+0xb0>)
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	bffdfff8 	.word	0xbffdfff8
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_DMA_Start_IT+0x20>
 8001674:	2302      	movs	r3, #2
 8001676:	e04b      	b.n	8001710 <HAL_DMA_Start_IT+0xb8>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d13a      	bne.n	8001702 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f937 	bl	8001924 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 020e 	orr.w	r2, r2, #14
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e00f      	b.n	80016f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0204 	bic.w	r2, r2, #4
 80016de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 020a 	orr.w	r2, r2, #10
 80016ee:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e005      	b.n	800170e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800170a:	2302      	movs	r3, #2
 800170c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800170e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	2204      	movs	r2, #4
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d04f      	beq.n	80017e0 <HAL_DMA_IRQHandler+0xc8>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	d04a      	beq.n	80017e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0204 	bic.w	r2, r2, #4
 8001766:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a66      	ldr	r2, [pc, #408]	; (8001908 <HAL_DMA_IRQHandler+0x1f0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d029      	beq.n	80017c6 <HAL_DMA_IRQHandler+0xae>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a65      	ldr	r2, [pc, #404]	; (800190c <HAL_DMA_IRQHandler+0x1f4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d022      	beq.n	80017c2 <HAL_DMA_IRQHandler+0xaa>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_DMA_IRQHandler+0x1f8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d01a      	beq.n	80017bc <HAL_DMA_IRQHandler+0xa4>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a62      	ldr	r2, [pc, #392]	; (8001914 <HAL_DMA_IRQHandler+0x1fc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d012      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x9e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a60      	ldr	r2, [pc, #384]	; (8001918 <HAL_DMA_IRQHandler+0x200>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00a      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x98>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a5f      	ldr	r2, [pc, #380]	; (800191c <HAL_DMA_IRQHandler+0x204>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d102      	bne.n	80017aa <HAL_DMA_IRQHandler+0x92>
 80017a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a8:	e00e      	b.n	80017c8 <HAL_DMA_IRQHandler+0xb0>
 80017aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017ae:	e00b      	b.n	80017c8 <HAL_DMA_IRQHandler+0xb0>
 80017b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017b4:	e008      	b.n	80017c8 <HAL_DMA_IRQHandler+0xb0>
 80017b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ba:	e005      	b.n	80017c8 <HAL_DMA_IRQHandler+0xb0>
 80017bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c0:	e002      	b.n	80017c8 <HAL_DMA_IRQHandler+0xb0>
 80017c2:	2340      	movs	r3, #64	; 0x40
 80017c4:	e000      	b.n	80017c8 <HAL_DMA_IRQHandler+0xb0>
 80017c6:	2304      	movs	r3, #4
 80017c8:	4a55      	ldr	r2, [pc, #340]	; (8001920 <HAL_DMA_IRQHandler+0x208>)
 80017ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8094 	beq.w	80018fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017de:	e08e      	b.n	80018fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	2202      	movs	r2, #2
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d056      	beq.n	800189e <HAL_DMA_IRQHandler+0x186>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d051      	beq.n	800189e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10b      	bne.n	8001820 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 020a 	bic.w	r2, r2, #10
 8001816:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a38      	ldr	r2, [pc, #224]	; (8001908 <HAL_DMA_IRQHandler+0x1f0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d029      	beq.n	800187e <HAL_DMA_IRQHandler+0x166>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a37      	ldr	r2, [pc, #220]	; (800190c <HAL_DMA_IRQHandler+0x1f4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d022      	beq.n	800187a <HAL_DMA_IRQHandler+0x162>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a35      	ldr	r2, [pc, #212]	; (8001910 <HAL_DMA_IRQHandler+0x1f8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01a      	beq.n	8001874 <HAL_DMA_IRQHandler+0x15c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a34      	ldr	r2, [pc, #208]	; (8001914 <HAL_DMA_IRQHandler+0x1fc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d012      	beq.n	800186e <HAL_DMA_IRQHandler+0x156>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a32      	ldr	r2, [pc, #200]	; (8001918 <HAL_DMA_IRQHandler+0x200>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00a      	beq.n	8001868 <HAL_DMA_IRQHandler+0x150>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a31      	ldr	r2, [pc, #196]	; (800191c <HAL_DMA_IRQHandler+0x204>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d102      	bne.n	8001862 <HAL_DMA_IRQHandler+0x14a>
 800185c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001860:	e00e      	b.n	8001880 <HAL_DMA_IRQHandler+0x168>
 8001862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001866:	e00b      	b.n	8001880 <HAL_DMA_IRQHandler+0x168>
 8001868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186c:	e008      	b.n	8001880 <HAL_DMA_IRQHandler+0x168>
 800186e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001872:	e005      	b.n	8001880 <HAL_DMA_IRQHandler+0x168>
 8001874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001878:	e002      	b.n	8001880 <HAL_DMA_IRQHandler+0x168>
 800187a:	2320      	movs	r3, #32
 800187c:	e000      	b.n	8001880 <HAL_DMA_IRQHandler+0x168>
 800187e:	2302      	movs	r3, #2
 8001880:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_DMA_IRQHandler+0x208>)
 8001882:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d034      	beq.n	80018fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800189c:	e02f      	b.n	80018fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2208      	movs	r2, #8
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d028      	beq.n	8001900 <HAL_DMA_IRQHandler+0x1e8>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d023      	beq.n	8001900 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 020e 	bic.w	r2, r2, #14
 80018c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	4798      	blx	r3
    }
  }
  return;
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
}
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40020008 	.word	0x40020008
 800190c:	4002001c 	.word	0x4002001c
 8001910:	40020030 	.word	0x40020030
 8001914:	40020044 	.word	0x40020044
 8001918:	40020058 	.word	0x40020058
 800191c:	4002006c 	.word	0x4002006c
 8001920:	40020000 	.word	0x40020000

08001924 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193a:	2101      	movs	r1, #1
 800193c:	fa01 f202 	lsl.w	r2, r1, r2
 8001940:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b10      	cmp	r3, #16
 8001950:	d108      	bne.n	8001964 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001962:	e007      	b.n	8001974 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	60da      	str	r2, [r3, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e169      	b.n	8001c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001994:	2201      	movs	r2, #1
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8158 	bne.w	8001c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a9a      	ldr	r2, [pc, #616]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019bc:	4a98      	ldr	r2, [pc, #608]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d875      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019c2:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d058      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019c8:	4a96      	ldr	r2, [pc, #600]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d86f      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019ce:	4a96      	ldr	r2, [pc, #600]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d052      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019d4:	4a94      	ldr	r2, [pc, #592]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d869      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019da:	4a94      	ldr	r2, [pc, #592]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04c      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d863      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019e6:	4a92      	ldr	r2, [pc, #584]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d046      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019ec:	4a90      	ldr	r2, [pc, #576]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d85d      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d82a      	bhi.n	8001a4c <HAL_GPIO_Init+0xcc>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d859      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_GPIO_Init+0x80>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a55 	.word	0x08001a55
 8001a08:	08001a67 	.word	0x08001a67
 8001a0c:	08001aa9 	.word	0x08001aa9
 8001a10:	08001aaf 	.word	0x08001aaf
 8001a14:	08001aaf 	.word	0x08001aaf
 8001a18:	08001aaf 	.word	0x08001aaf
 8001a1c:	08001aaf 	.word	0x08001aaf
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	08001aaf 	.word	0x08001aaf
 8001a30:	08001aaf 	.word	0x08001aaf
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001aaf 	.word	0x08001aaf
 8001a3c:	08001aaf 	.word	0x08001aaf
 8001a40:	08001aaf 	.word	0x08001aaf
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	4a79      	ldr	r2, [pc, #484]	; (8001c34 <HAL_GPIO_Init+0x2b4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e02c      	b.n	8001aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e029      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	3304      	adds	r3, #4
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e024      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e01f      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	330c      	adds	r3, #12
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e01a      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a82:	2304      	movs	r3, #4
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e013      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	611a      	str	r2, [r3, #16]
          break;
 8001a9a:	e009      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	615a      	str	r2, [r3, #20]
          break;
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          break;
 8001aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d801      	bhi.n	8001aba <HAL_GPIO_Init+0x13a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_Init+0x13e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_Init+0x14c>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x152>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3b08      	subs	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	210f      	movs	r1, #15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80b1 	beq.w	8001c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b18:	4a48      	ldr	r2, [pc, #288]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1ec>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3f      	ldr	r2, [pc, #252]	; (8001c44 <HAL_GPIO_Init+0x2c4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1e8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	; (8001c48 <HAL_GPIO_Init+0x2c8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1e4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7e:	492f      	ldr	r1, [pc, #188]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	492c      	ldr	r1, [pc, #176]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4928      	ldr	r1, [pc, #160]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	491e      	ldr	r1, [pc, #120]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4918      	ldr	r1, [pc, #96]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4914      	ldr	r1, [pc, #80]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d021      	beq.n	8001c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e021      	b.n	8001c62 <HAL_GPIO_Init+0x2e2>
 8001c1e:	bf00      	nop
 8001c20:	10320000 	.word	0x10320000
 8001c24:	10310000 	.word	0x10310000
 8001c28:	10220000 	.word	0x10220000
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	10120000 	.word	0x10120000
 8001c34:	10110000 	.word	0x10110000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40011400 	.word	0x40011400
 8001c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4909      	ldr	r1, [pc, #36]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f ae8e 	bne.w	8001994 <HAL_GPIO_Init+0x14>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	372c      	adds	r7, #44	; 0x2c
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e272      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8087 	beq.w	8001de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd8:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d00c      	beq.n	8001cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ce4:	4b8f      	ldr	r3, [pc, #572]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d112      	bne.n	8001d16 <HAL_RCC_OscConfig+0x5e>
 8001cf0:	4b8c      	ldr	r3, [pc, #560]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d10b      	bne.n	8001d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	4b89      	ldr	r3, [pc, #548]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d06c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x12c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d168      	bne.n	8001de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e24c      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x76>
 8001d20:	4b80      	ldr	r3, [pc, #512]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a7f      	ldr	r2, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e02e      	b.n	8001d8c <HAL_RCC_OscConfig+0xd4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7a      	ldr	r2, [pc, #488]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b78      	ldr	r3, [pc, #480]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a77      	ldr	r2, [pc, #476]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xd4>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0xbc>
 8001d5a:	4b72      	ldr	r3, [pc, #456]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xd4>
 8001d74:	4b6b      	ldr	r3, [pc, #428]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a6a      	ldr	r2, [pc, #424]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b68      	ldr	r3, [pc, #416]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a67      	ldr	r2, [pc, #412]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff faee 	bl	8001374 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff faea 	bl	8001374 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e200      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xe4>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fada 	bl	8001374 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fad6 	bl	8001374 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1ec      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x10c>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d063      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df2:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dfe:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d11c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x18c>
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x176>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e1c0      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4939      	ldr	r1, [pc, #228]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	e03a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7ff fa8f 	bl	8001374 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fa8b 	bl	8001374 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1a1      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4927      	ldr	r1, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_RCC_OscConfig+0x270>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fa6e 	bl	8001374 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fa6a 	bl	8001374 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e180      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03a      	beq.n	8001f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d019      	beq.n	8001f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fa4e 	bl	8001374 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff fa4a 	bl	8001374 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e160      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f000 fa9c 	bl	8002438 <RCC_Delay>
 8001f00:	e01c      	b.n	8001f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_OscConfig+0x274>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff fa34 	bl	8001374 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0e:	e00f      	b.n	8001f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff fa30 	bl	8001374 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d908      	bls.n	8001f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e146      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	42420000 	.word	0x42420000
 8001f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	4b92      	ldr	r3, [pc, #584]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e9      	bne.n	8001f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80a6 	beq.w	8002096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10d      	bne.n	8001f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a87      	ldr	r2, [pc, #540]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b85      	ldr	r3, [pc, #532]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b82      	ldr	r3, [pc, #520]	; (8002180 <HAL_RCC_OscConfig+0x4c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d118      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f82:	4b7f      	ldr	r3, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x4c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7e      	ldr	r2, [pc, #504]	; (8002180 <HAL_RCC_OscConfig+0x4c8>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f9f1 	bl	8001374 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f96:	f7ff f9ed 	bl	8001374 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b64      	cmp	r3, #100	; 0x64
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e103      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x4c8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x312>
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a6e      	ldr	r2, [pc, #440]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e02d      	b.n	8002026 <HAL_RCC_OscConfig+0x36e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x334>
 8001fd2:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6213      	str	r3, [r2, #32]
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	e01c      	b.n	8002026 <HAL_RCC_OscConfig+0x36e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x356>
 8001ff4:	4b61      	ldr	r3, [pc, #388]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a60      	ldr	r2, [pc, #384]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6213      	str	r3, [r2, #32]
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a5d      	ldr	r2, [pc, #372]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	e00b      	b.n	8002026 <HAL_RCC_OscConfig+0x36e>
 800200e:	4b5b      	ldr	r3, [pc, #364]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	4b58      	ldr	r3, [pc, #352]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d015      	beq.n	800205a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7ff f9a1 	bl	8001374 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff f99d 	bl	8001374 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0b1      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	4b4b      	ldr	r3, [pc, #300]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ee      	beq.n	8002036 <HAL_RCC_OscConfig+0x37e>
 8002058:	e014      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff f98b 	bl	8001374 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff f987 	bl	8001374 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e09b      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	4b40      	ldr	r3, [pc, #256]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208a:	4b3c      	ldr	r3, [pc, #240]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a3b      	ldr	r2, [pc, #236]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8087 	beq.w	80021ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d061      	beq.n	8002170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d146      	bne.n	8002142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_RCC_OscConfig+0x4cc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff f95b 	bl	8001374 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff f957 	bl	8001374 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e06d      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d108      	bne.n	80020fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4921      	ldr	r1, [pc, #132]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a19      	ldr	r1, [r3, #32]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	430b      	orrs	r3, r1
 800210e:	491b      	ldr	r1, [pc, #108]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff f92b 	bl	8001374 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff f927 	bl	8001374 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e03d      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x46a>
 8002140:	e035      	b.n	80021ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_RCC_OscConfig+0x4cc>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff f914 	bl	8001374 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7ff f910 	bl	8001374 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e026      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_OscConfig+0x4c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x498>
 800216e:	e01e      	b.n	80021ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e019      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
 8002184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x500>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	429a      	cmp	r2, r3
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000

080021bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0d0      	b.n	8002372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d0:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d910      	bls.n	8002200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b67      	ldr	r3, [pc, #412]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 0207 	bic.w	r2, r3, #7
 80021e6:	4965      	ldr	r1, [pc, #404]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0b8      	b.n	8002372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002218:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800223a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	494d      	ldr	r1, [pc, #308]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d040      	beq.n	80022dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d115      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e07f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e073      	b.n	8002372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06b      	b.n	8002372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f023 0203 	bic.w	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4936      	ldr	r1, [pc, #216]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ac:	f7ff f862 	bl	8001374 <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f7ff f85e 	bl	8001374 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e053      	b.n	8002372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 020c 	and.w	r2, r3, #12
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	429a      	cmp	r2, r3
 80022da:	d1eb      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d210      	bcs.n	800230c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	4922      	ldr	r1, [pc, #136]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e032      	b.n	8002372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4916      	ldr	r1, [pc, #88]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	490e      	ldr	r1, [pc, #56]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234a:	f000 f821 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800234e:	4602      	mov	r2, r0
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	490a      	ldr	r1, [pc, #40]	; (8002384 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	5ccb      	ldrb	r3, [r1, r3]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1cc>)
 8002364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1d0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe ffc0 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40022000 	.word	0x40022000
 8002380:	40021000 	.word	0x40021000
 8002384:	0800a748 	.word	0x0800a748
 8002388:	20000000 	.word	0x20000000
 800238c:	20000004 	.word	0x20000004

08002390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_GetSysClockFreq+0x36>
 80023be:	e027      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c2:	613b      	str	r3, [r7, #16]
      break;
 80023c4:	e027      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0c9b      	lsrs	r3, r3, #18
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023d0:	5cd3      	ldrb	r3, [r2, r3]
 80023d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_RCC_GetSysClockFreq+0x94>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	0c5b      	lsrs	r3, r3, #17
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <HAL_RCC_GetSysClockFreq+0x98>)
 80023f2:	fb03 f202 	mul.w	r2, r3, r2
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e004      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	613b      	str	r3, [r7, #16]
      break;
 800240e:	e002      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetSysClockFreq+0x98>)
 8002412:	613b      	str	r3, [r7, #16]
      break;
 8002414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002416:	693b      	ldr	r3, [r7, #16]
}
 8002418:	4618      	mov	r0, r3
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	007a1200 	.word	0x007a1200
 800242c:	0800a758 	.word	0x0800a758
 8002430:	0800a768 	.word	0x0800a768
 8002434:	003d0900 	.word	0x003d0900

08002438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <RCC_Delay+0x34>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <RCC_Delay+0x38>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a5b      	lsrs	r3, r3, #9
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002454:	bf00      	nop
  }
  while (Delay --);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	60fa      	str	r2, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f9      	bne.n	8002454 <RCC_Delay+0x1c>
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	20000000 	.word	0x20000000
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e041      	b.n	800250a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fe20 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f000 fe0c 	bl	80030d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e041      	b.n	80025a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f839 	bl	80025b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f000 fdbd 	bl	80030d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e022      	b.n	8002636 <HAL_TIM_PWM_Start_DMA+0x72>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d109      	bne.n	800260a <HAL_TIM_PWM_Start_DMA+0x46>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	e015      	b.n	8002636 <HAL_TIM_PWM_Start_DMA+0x72>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d109      	bne.n	8002624 <HAL_TIM_PWM_Start_DMA+0x60>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e008      	b.n	8002636 <HAL_TIM_PWM_Start_DMA+0x72>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	e153      	b.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_TIM_PWM_Start_DMA+0x94>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	e022      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0xda>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b04      	cmp	r3, #4
 800265c:	d109      	bne.n	8002672 <HAL_TIM_PWM_Start_DMA+0xae>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	e015      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0xda>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d109      	bne.n	800268c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e008      	b.n	800269e <HAL_TIM_PWM_Start_DMA+0xda>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d024      	beq.n	80026ec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_TIM_PWM_Start_DMA+0xea>
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e119      	b.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c0:	e016      	b.n	80026f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d0:	e00e      	b.n	80026f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e0:	e006      	b.n	80026f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026ea:	e001      	b.n	80026f0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0fa      	b.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	f200 80ae 	bhi.w	8002854 <HAL_TIM_PWM_Start_DMA+0x290>
 80026f8:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	08002735 	.word	0x08002735
 8002704:	08002855 	.word	0x08002855
 8002708:	08002855 	.word	0x08002855
 800270c:	08002855 	.word	0x08002855
 8002710:	0800277d 	.word	0x0800277d
 8002714:	08002855 	.word	0x08002855
 8002718:	08002855 	.word	0x08002855
 800271c:	08002855 	.word	0x08002855
 8002720:	080027c5 	.word	0x080027c5
 8002724:	08002855 	.word	0x08002855
 8002728:	08002855 	.word	0x08002855
 800272c:	08002855 	.word	0x08002855
 8002730:	0800280d 	.word	0x0800280d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	4a6d      	ldr	r2, [pc, #436]	; (80028f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	4a6c      	ldr	r2, [pc, #432]	; (80028f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_TIM_PWM_Start_DMA+0x334>)
 800274a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3334      	adds	r3, #52	; 0x34
 8002758:	461a      	mov	r2, r3
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	f7fe ff7c 	bl	8001658 <HAL_DMA_Start_IT>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0bd      	b.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002778:	60da      	str	r2, [r3, #12]
      break;
 800277a:	e06e      	b.n	800285a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	4a5b      	ldr	r2, [pc, #364]	; (80028f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	4a5a      	ldr	r2, [pc, #360]	; (80028f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	4a59      	ldr	r2, [pc, #356]	; (80028f8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002792:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3338      	adds	r3, #56	; 0x38
 80027a0:	461a      	mov	r2, r3
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	f7fe ff58 	bl	8001658 <HAL_DMA_Start_IT>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e099      	b.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c0:	60da      	str	r2, [r3, #12]
      break;
 80027c2:	e04a      	b.n	800285a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	4a49      	ldr	r2, [pc, #292]	; (80028f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	4a47      	ldr	r2, [pc, #284]	; (80028f8 <HAL_TIM_PWM_Start_DMA+0x334>)
 80027da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	333c      	adds	r3, #60	; 0x3c
 80027e8:	461a      	mov	r2, r3
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	f7fe ff34 	bl	8001658 <HAL_DMA_Start_IT>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e075      	b.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002808:	60da      	str	r2, [r3, #12]
      break;
 800280a:	e026      	b.n	800285a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	4a37      	ldr	r2, [pc, #220]	; (80028f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	4a36      	ldr	r2, [pc, #216]	; (80028f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4a35      	ldr	r2, [pc, #212]	; (80028f8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002822:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3340      	adds	r3, #64	; 0x40
 8002830:	461a      	mov	r2, r3
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	f7fe ff10 	bl	8001658 <HAL_DMA_Start_IT>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e051      	b.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002850:	60da      	str	r2, [r3, #12]
      break;
 8002852:	e002      	b.n	800285a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	75fb      	strb	r3, [r7, #23]
      break;
 8002858:	bf00      	nop
  }

  if (status == HAL_OK)
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d141      	bne.n	80028e4 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2201      	movs	r2, #1
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 ff42 	bl	80036f2 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a22      	ldr	r2, [pc, #136]	; (80028fc <HAL_TIM_PWM_Start_DMA+0x338>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d107      	bne.n	8002888 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_TIM_PWM_Start_DMA+0x338>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00e      	beq.n	80028b0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289a:	d009      	beq.n	80028b0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <HAL_TIM_PWM_Start_DMA+0x340>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d010      	beq.n	80028e4 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	e007      	b.n	80028e4 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	08002fbf 	.word	0x08002fbf
 80028f4:	08003067 	.word	0x08003067
 80028f8:	08002f2d 	.word	0x08002f2d
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800

08002908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b02      	cmp	r3, #2
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0202 	mvn.w	r2, #2
 8002934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fac1 	bl	8002ed2 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fab4 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fac3 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b04      	cmp	r3, #4
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0204 	mvn.w	r2, #4
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fa97 	bl	8002ed2 <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa8a 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fa99 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0208 	mvn.w	r2, #8
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2204      	movs	r2, #4
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fa6d 	bl	8002ed2 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fa60 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fa6f 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0210 	mvn.w	r2, #16
 8002a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2208      	movs	r2, #8
 8002a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fa43 	bl	8002ed2 <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fa36 	bl	8002ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fa45 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0201 	mvn.w	r2, #1
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fa11 	bl	8002eae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b80      	cmp	r3, #128	; 0x80
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b80      	cmp	r3, #128	; 0x80
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fea9 	bl	800380a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa12 	bl	8002f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0220 	mvn.w	r2, #32
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fe74 	bl	80037f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0ae      	b.n	8002c94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b0c      	cmp	r3, #12
 8002b42:	f200 809f 	bhi.w	8002c84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b46:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4c:	08002b81 	.word	0x08002b81
 8002b50:	08002c85 	.word	0x08002c85
 8002b54:	08002c85 	.word	0x08002c85
 8002b58:	08002c85 	.word	0x08002c85
 8002b5c:	08002bc1 	.word	0x08002bc1
 8002b60:	08002c85 	.word	0x08002c85
 8002b64:	08002c85 	.word	0x08002c85
 8002b68:	08002c85 	.word	0x08002c85
 8002b6c:	08002c03 	.word	0x08002c03
 8002b70:	08002c85 	.word	0x08002c85
 8002b74:	08002c85 	.word	0x08002c85
 8002b78:	08002c85 	.word	0x08002c85
 8002b7c:	08002c43 	.word	0x08002c43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fb04 	bl	8003194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0208 	orr.w	r2, r2, #8
 8002b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6999      	ldr	r1, [r3, #24]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	619a      	str	r2, [r3, #24]
      break;
 8002bbe:	e064      	b.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fb4a 	bl	8003260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6999      	ldr	r1, [r3, #24]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	021a      	lsls	r2, r3, #8
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	619a      	str	r2, [r3, #24]
      break;
 8002c00:	e043      	b.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fb93 	bl	8003334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0208 	orr.w	r2, r2, #8
 8002c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0204 	bic.w	r2, r2, #4
 8002c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69d9      	ldr	r1, [r3, #28]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	61da      	str	r2, [r3, #28]
      break;
 8002c40:	e023      	b.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fbdd 	bl	8003408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69d9      	ldr	r1, [r3, #28]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	61da      	str	r2, [r3, #28]
      break;
 8002c82:	e002      	b.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	75fb      	strb	r3, [r7, #23]
      break;
 8002c88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0b4      	b.n	8002e22 <HAL_TIM_ConfigClockSource+0x186>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf0:	d03e      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0xd4>
 8002cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf6:	f200 8087 	bhi.w	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfe:	f000 8086 	beq.w	8002e0e <HAL_TIM_ConfigClockSource+0x172>
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	d87f      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b70      	cmp	r3, #112	; 0x70
 8002d0a:	d01a      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0xa6>
 8002d0c:	2b70      	cmp	r3, #112	; 0x70
 8002d0e:	d87b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b60      	cmp	r3, #96	; 0x60
 8002d12:	d050      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d14:	2b60      	cmp	r3, #96	; 0x60
 8002d16:	d877      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d03c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0xfa>
 8002d1c:	2b50      	cmp	r3, #80	; 0x50
 8002d1e:	d873      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d058      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d24:	2b40      	cmp	r3, #64	; 0x40
 8002d26:	d86f      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b30      	cmp	r3, #48	; 0x30
 8002d2a:	d064      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d2c:	2b30      	cmp	r3, #48	; 0x30
 8002d2e:	d86b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d060      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d867      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05c      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d05a      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d40:	e062      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f000 fcaf 	bl	80036b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	609a      	str	r2, [r3, #8]
      break;
 8002d6e:	e04f      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f000 fc98 	bl	80036b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d92:	609a      	str	r2, [r3, #8]
      break;
 8002d94:	e03c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 fc0f 	bl	80035c6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2150      	movs	r1, #80	; 0x50
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fc66 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8002db4:	e02c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f000 fc2d 	bl	8003622 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2160      	movs	r1, #96	; 0x60
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fc56 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e01c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f000 fbef 	bl	80035c6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2140      	movs	r1, #64	; 0x40
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fc46 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8002df4:	e00c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f000 fc3d 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8002e06:	e003      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e000      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e031      	b.n	8002ea6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fb25 	bl	80034a4 <TIM_SlaveTimer_SetConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e018      	b.n	8002ea6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e82:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e92:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d107      	bne.n	8002f54 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f52:	e02a      	b.n	8002faa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d107      	bne.n	8002f6e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2202      	movs	r2, #2
 8002f62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f6c:	e01d      	b.n	8002faa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d107      	bne.n	8002f88 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f86:	e010      	b.n	8002faa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d107      	bne.n	8002fa2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2208      	movs	r2, #8
 8002f96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fa0:	e003      	b.n	8002faa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff ffb5 	bl	8002f1a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	771a      	strb	r2, [r3, #28]
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d10b      	bne.n	8002fee <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d136      	bne.n	8003052 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fec:	e031      	b.n	8003052 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d10b      	bne.n	8003010 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d125      	bne.n	8003052 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300e:	e020      	b.n	8003052 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d10b      	bne.n	8003032 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2204      	movs	r2, #4
 800301e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d114      	bne.n	8003052 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003030:	e00f      	b.n	8003052 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d10a      	bne.n	8003052 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2208      	movs	r2, #8
 8003040:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff ff46 	bl	8002ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	771a      	strb	r2, [r3, #28]
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d103      	bne.n	8003086 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	771a      	strb	r2, [r3, #28]
 8003084:	e019      	b.n	80030ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d103      	bne.n	8003098 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2202      	movs	r2, #2
 8003094:	771a      	strb	r2, [r3, #28]
 8003096:	e010      	b.n	80030ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d103      	bne.n	80030aa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2204      	movs	r2, #4
 80030a6:	771a      	strb	r2, [r3, #28]
 80030a8:	e007      	b.n	80030ba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d102      	bne.n	80030ba <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2208      	movs	r2, #8
 80030b8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7ff ff1b 	bl	8002ef6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	771a      	strb	r2, [r3, #28]
}
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a29      	ldr	r2, [pc, #164]	; (8003188 <TIM_Base_SetConfig+0xb8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00b      	beq.n	8003100 <TIM_Base_SetConfig+0x30>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d007      	beq.n	8003100 <TIM_Base_SetConfig+0x30>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a26      	ldr	r2, [pc, #152]	; (800318c <TIM_Base_SetConfig+0xbc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_Base_SetConfig+0x30>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a25      	ldr	r2, [pc, #148]	; (8003190 <TIM_Base_SetConfig+0xc0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d108      	bne.n	8003112 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <TIM_Base_SetConfig+0xb8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00b      	beq.n	8003132 <TIM_Base_SetConfig+0x62>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d007      	beq.n	8003132 <TIM_Base_SetConfig+0x62>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <TIM_Base_SetConfig+0xbc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d003      	beq.n	8003132 <TIM_Base_SetConfig+0x62>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a18      	ldr	r2, [pc, #96]	; (8003190 <TIM_Base_SetConfig+0xc0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d108      	bne.n	8003144 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a07      	ldr	r2, [pc, #28]	; (8003188 <TIM_Base_SetConfig+0xb8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d103      	bne.n	8003178 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	615a      	str	r2, [r3, #20]
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800

08003194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f023 0201 	bic.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f023 0302 	bic.w	r3, r3, #2
 80031dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <TIM_OC1_SetConfig+0xc8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d10c      	bne.n	800320a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0308 	bic.w	r3, r3, #8
 80031f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a13      	ldr	r2, [pc, #76]	; (800325c <TIM_OC1_SetConfig+0xc8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d111      	bne.n	8003236 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	621a      	str	r2, [r3, #32]
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00

08003260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 0210 	bic.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0320 	bic.w	r3, r3, #32
 80032aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <TIM_OC2_SetConfig+0xd0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10d      	bne.n	80032dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <TIM_OC2_SetConfig+0xd0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d113      	bne.n	800330c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00

08003334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800337c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <TIM_OC3_SetConfig+0xd0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10d      	bne.n	80033ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a14      	ldr	r2, [pc, #80]	; (8003404 <TIM_OC3_SetConfig+0xd0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d113      	bne.n	80033de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	621a      	str	r2, [r3, #32]
}
 80033f8:	bf00      	nop
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00

08003408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	031b      	lsls	r3, r3, #12
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <TIM_OC4_SetConfig+0x98>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d109      	bne.n	800347c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00

080034a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b70      	cmp	r3, #112	; 0x70
 80034ec:	d01a      	beq.n	8003524 <TIM_SlaveTimer_SetConfig+0x80>
 80034ee:	2b70      	cmp	r3, #112	; 0x70
 80034f0:	d860      	bhi.n	80035b4 <TIM_SlaveTimer_SetConfig+0x110>
 80034f2:	2b60      	cmp	r3, #96	; 0x60
 80034f4:	d054      	beq.n	80035a0 <TIM_SlaveTimer_SetConfig+0xfc>
 80034f6:	2b60      	cmp	r3, #96	; 0x60
 80034f8:	d85c      	bhi.n	80035b4 <TIM_SlaveTimer_SetConfig+0x110>
 80034fa:	2b50      	cmp	r3, #80	; 0x50
 80034fc:	d046      	beq.n	800358c <TIM_SlaveTimer_SetConfig+0xe8>
 80034fe:	2b50      	cmp	r3, #80	; 0x50
 8003500:	d858      	bhi.n	80035b4 <TIM_SlaveTimer_SetConfig+0x110>
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d019      	beq.n	800353a <TIM_SlaveTimer_SetConfig+0x96>
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d854      	bhi.n	80035b4 <TIM_SlaveTimer_SetConfig+0x110>
 800350a:	2b30      	cmp	r3, #48	; 0x30
 800350c:	d055      	beq.n	80035ba <TIM_SlaveTimer_SetConfig+0x116>
 800350e:	2b30      	cmp	r3, #48	; 0x30
 8003510:	d850      	bhi.n	80035b4 <TIM_SlaveTimer_SetConfig+0x110>
 8003512:	2b20      	cmp	r3, #32
 8003514:	d051      	beq.n	80035ba <TIM_SlaveTimer_SetConfig+0x116>
 8003516:	2b20      	cmp	r3, #32
 8003518:	d84c      	bhi.n	80035b4 <TIM_SlaveTimer_SetConfig+0x110>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d04d      	beq.n	80035ba <TIM_SlaveTimer_SetConfig+0x116>
 800351e:	2b10      	cmp	r3, #16
 8003520:	d04b      	beq.n	80035ba <TIM_SlaveTimer_SetConfig+0x116>
 8003522:	e047      	b.n	80035b4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68d9      	ldr	r1, [r3, #12]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f000 f8be 	bl	80036b4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003538:	e040      	b.n	80035bc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b05      	cmp	r3, #5
 8003540:	d101      	bne.n	8003546 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e03b      	b.n	80035be <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4313      	orrs	r3, r2
 8003578:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
      break;
 800358a:	e017      	b.n	80035bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	461a      	mov	r2, r3
 800359a:	f000 f814 	bl	80035c6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800359e:	e00d      	b.n	80035bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	461a      	mov	r2, r3
 80035ae:	f000 f838 	bl	8003622 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80035b2:	e003      	b.n	80035bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
      break;
 80035b8:	e000      	b.n	80035bc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80035ba:	bf00      	nop
  }

  return status;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f023 0201 	bic.w	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 030a 	bic.w	r3, r3, #10
 8003602:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003622:	b480      	push	{r7}
 8003624:	b087      	sub	sp, #28
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f023 0210 	bic.w	r2, r3, #16
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800364c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	031b      	lsls	r3, r3, #12
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800365e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	f043 0307 	orr.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	021a      	lsls	r2, r3, #8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b087      	sub	sp, #28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2201      	movs	r2, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	43db      	mvns	r3, r3
 8003714:	401a      	ands	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	431a      	orrs	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	621a      	str	r2, [r3, #32]
}
 8003730:	bf00      	nop
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
	...

0800373c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e046      	b.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a16      	ldr	r2, [pc, #88]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d009      	beq.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a10      	ldr	r2, [pc, #64]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d10c      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800

080037f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <__libc_init_array>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	2600      	movs	r6, #0
 8003820:	4d0c      	ldr	r5, [pc, #48]	; (8003854 <__libc_init_array+0x38>)
 8003822:	4c0d      	ldr	r4, [pc, #52]	; (8003858 <__libc_init_array+0x3c>)
 8003824:	1b64      	subs	r4, r4, r5
 8003826:	10a4      	asrs	r4, r4, #2
 8003828:	42a6      	cmp	r6, r4
 800382a:	d109      	bne.n	8003840 <__libc_init_array+0x24>
 800382c:	f000 fe82 	bl	8004534 <_init>
 8003830:	2600      	movs	r6, #0
 8003832:	4d0a      	ldr	r5, [pc, #40]	; (800385c <__libc_init_array+0x40>)
 8003834:	4c0a      	ldr	r4, [pc, #40]	; (8003860 <__libc_init_array+0x44>)
 8003836:	1b64      	subs	r4, r4, r5
 8003838:	10a4      	asrs	r4, r4, #2
 800383a:	42a6      	cmp	r6, r4
 800383c:	d105      	bne.n	800384a <__libc_init_array+0x2e>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	f855 3b04 	ldr.w	r3, [r5], #4
 8003844:	4798      	blx	r3
 8003846:	3601      	adds	r6, #1
 8003848:	e7ee      	b.n	8003828 <__libc_init_array+0xc>
 800384a:	f855 3b04 	ldr.w	r3, [r5], #4
 800384e:	4798      	blx	r3
 8003850:	3601      	adds	r6, #1
 8003852:	e7f2      	b.n	800383a <__libc_init_array+0x1e>
 8003854:	0800ab50 	.word	0x0800ab50
 8003858:	0800ab50 	.word	0x0800ab50
 800385c:	0800ab50 	.word	0x0800ab50
 8003860:	0800ab54 	.word	0x0800ab54

08003864 <memset>:
 8003864:	4603      	mov	r3, r0
 8003866:	4402      	add	r2, r0
 8003868:	4293      	cmp	r3, r2
 800386a:	d100      	bne.n	800386e <memset+0xa>
 800386c:	4770      	bx	lr
 800386e:	f803 1b01 	strb.w	r1, [r3], #1
 8003872:	e7f9      	b.n	8003868 <memset+0x4>

08003874 <rint>:
 8003874:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8003878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800387a:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 800387e:	2e13      	cmp	r6, #19
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	460c      	mov	r4, r1
 8003886:	4605      	mov	r5, r0
 8003888:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800388c:	dc5a      	bgt.n	8003944 <rint+0xd0>
 800388e:	2e00      	cmp	r6, #0
 8003890:	da2c      	bge.n	80038ec <rint+0x78>
 8003892:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003896:	4301      	orrs	r1, r0
 8003898:	d024      	beq.n	80038e4 <rint+0x70>
 800389a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800389e:	4301      	orrs	r1, r0
 80038a0:	424d      	negs	r5, r1
 80038a2:	430d      	orrs	r5, r1
 80038a4:	0b2d      	lsrs	r5, r5, #12
 80038a6:	0c59      	lsrs	r1, r3, #17
 80038a8:	0449      	lsls	r1, r1, #17
 80038aa:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80038ae:	ea45 0301 	orr.w	r3, r5, r1
 80038b2:	4935      	ldr	r1, [pc, #212]	; (8003988 <rint+0x114>)
 80038b4:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80038b8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80038bc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80038c0:	4639      	mov	r1, r7
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7fc fe28 	bl	8000518 <__adddf3>
 80038c8:	e9cd 0100 	strd	r0, r1, [sp]
 80038cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038d0:	463b      	mov	r3, r7
 80038d2:	4632      	mov	r2, r6
 80038d4:	f7fc fe1e 	bl	8000514 <__aeabi_dsub>
 80038d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80038dc:	ea43 0704 	orr.w	r7, r3, r4
 80038e0:	4602      	mov	r2, r0
 80038e2:	463b      	mov	r3, r7
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	b003      	add	sp, #12
 80038ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ec:	4927      	ldr	r1, [pc, #156]	; (800398c <rint+0x118>)
 80038ee:	4131      	asrs	r1, r6
 80038f0:	ea03 0001 	and.w	r0, r3, r1
 80038f4:	4310      	orrs	r0, r2
 80038f6:	d0f5      	beq.n	80038e4 <rint+0x70>
 80038f8:	084b      	lsrs	r3, r1, #1
 80038fa:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80038fe:	430d      	orrs	r5, r1
 8003900:	d00c      	beq.n	800391c <rint+0xa8>
 8003902:	ea24 0303 	bic.w	r3, r4, r3
 8003906:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800390a:	2e13      	cmp	r6, #19
 800390c:	bf0c      	ite	eq
 800390e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003912:	2500      	movne	r5, #0
 8003914:	fa44 f606 	asr.w	r6, r4, r6
 8003918:	ea43 0406 	orr.w	r4, r3, r6
 800391c:	491a      	ldr	r1, [pc, #104]	; (8003988 <rint+0x114>)
 800391e:	4623      	mov	r3, r4
 8003920:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8003924:	462a      	mov	r2, r5
 8003926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392a:	4620      	mov	r0, r4
 800392c:	4629      	mov	r1, r5
 800392e:	f7fc fdf3 	bl	8000518 <__adddf3>
 8003932:	e9cd 0100 	strd	r0, r1, [sp]
 8003936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	f7fc fde9 	bl	8000514 <__aeabi_dsub>
 8003942:	e006      	b.n	8003952 <rint+0xde>
 8003944:	2e33      	cmp	r6, #51	; 0x33
 8003946:	dd07      	ble.n	8003958 <rint+0xe4>
 8003948:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800394c:	d1ca      	bne.n	80038e4 <rint+0x70>
 800394e:	f7fc fde3 	bl	8000518 <__adddf3>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	e7c5      	b.n	80038e4 <rint+0x70>
 8003958:	f04f 31ff 	mov.w	r1, #4294967295
 800395c:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8003960:	fa21 f10c 	lsr.w	r1, r1, ip
 8003964:	4208      	tst	r0, r1
 8003966:	d0bd      	beq.n	80038e4 <rint+0x70>
 8003968:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800396c:	bf18      	it	ne
 800396e:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8003972:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8003976:	bf1e      	ittt	ne
 8003978:	ea20 0303 	bicne.w	r3, r0, r3
 800397c:	fa45 fc0c 	asrne.w	ip, r5, ip
 8003980:	ea43 050c 	orrne.w	r5, r3, ip
 8003984:	e7ca      	b.n	800391c <rint+0xa8>
 8003986:	bf00      	nop
 8003988:	0800a770 	.word	0x0800a770
 800398c:	000fffff 	.word	0x000fffff

08003990 <sinf>:
 8003990:	b507      	push	{r0, r1, r2, lr}
 8003992:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <sinf+0x70>)
 8003994:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003998:	4293      	cmp	r3, r2
 800399a:	4601      	mov	r1, r0
 800399c:	dc06      	bgt.n	80039ac <sinf+0x1c>
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	b003      	add	sp, #12
 80039a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039a8:	f000 bcbc 	b.w	8004324 <__kernel_sinf>
 80039ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80039b0:	db04      	blt.n	80039bc <sinf+0x2c>
 80039b2:	f7fc ffdb 	bl	800096c <__aeabi_fsub>
 80039b6:	b003      	add	sp, #12
 80039b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80039bc:	4669      	mov	r1, sp
 80039be:	f000 f821 	bl	8003a04 <__ieee754_rem_pio2f>
 80039c2:	f000 0003 	and.w	r0, r0, #3
 80039c6:	2801      	cmp	r0, #1
 80039c8:	d008      	beq.n	80039dc <sinf+0x4c>
 80039ca:	2802      	cmp	r0, #2
 80039cc:	d00b      	beq.n	80039e6 <sinf+0x56>
 80039ce:	b990      	cbnz	r0, 80039f6 <sinf+0x66>
 80039d0:	2201      	movs	r2, #1
 80039d2:	9901      	ldr	r1, [sp, #4]
 80039d4:	9800      	ldr	r0, [sp, #0]
 80039d6:	f000 fca5 	bl	8004324 <__kernel_sinf>
 80039da:	e7ec      	b.n	80039b6 <sinf+0x26>
 80039dc:	9901      	ldr	r1, [sp, #4]
 80039de:	9800      	ldr	r0, [sp, #0]
 80039e0:	f000 f96e 	bl	8003cc0 <__kernel_cosf>
 80039e4:	e7e7      	b.n	80039b6 <sinf+0x26>
 80039e6:	2201      	movs	r2, #1
 80039e8:	9901      	ldr	r1, [sp, #4]
 80039ea:	9800      	ldr	r0, [sp, #0]
 80039ec:	f000 fc9a 	bl	8004324 <__kernel_sinf>
 80039f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80039f4:	e7df      	b.n	80039b6 <sinf+0x26>
 80039f6:	9901      	ldr	r1, [sp, #4]
 80039f8:	9800      	ldr	r0, [sp, #0]
 80039fa:	f000 f961 	bl	8003cc0 <__kernel_cosf>
 80039fe:	e7f7      	b.n	80039f0 <sinf+0x60>
 8003a00:	3f490fd8 	.word	0x3f490fd8

08003a04 <__ieee754_rem_pio2f>:
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a08:	4aa0      	ldr	r2, [pc, #640]	; (8003c8c <__ieee754_rem_pio2f+0x288>)
 8003a0a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003a0e:	4296      	cmp	r6, r2
 8003a10:	460c      	mov	r4, r1
 8003a12:	4682      	mov	sl, r0
 8003a14:	b087      	sub	sp, #28
 8003a16:	dc04      	bgt.n	8003a22 <__ieee754_rem_pio2f+0x1e>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	6008      	str	r0, [r1, #0]
 8003a1c:	604b      	str	r3, [r1, #4]
 8003a1e:	2500      	movs	r5, #0
 8003a20:	e01a      	b.n	8003a58 <__ieee754_rem_pio2f+0x54>
 8003a22:	4a9b      	ldr	r2, [pc, #620]	; (8003c90 <__ieee754_rem_pio2f+0x28c>)
 8003a24:	4296      	cmp	r6, r2
 8003a26:	dc4b      	bgt.n	8003ac0 <__ieee754_rem_pio2f+0xbc>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	499a      	ldr	r1, [pc, #616]	; (8003c94 <__ieee754_rem_pio2f+0x290>)
 8003a2c:	4f9a      	ldr	r7, [pc, #616]	; (8003c98 <__ieee754_rem_pio2f+0x294>)
 8003a2e:	f026 060f 	bic.w	r6, r6, #15
 8003a32:	dd23      	ble.n	8003a7c <__ieee754_rem_pio2f+0x78>
 8003a34:	f7fc ff9a 	bl	800096c <__aeabi_fsub>
 8003a38:	42be      	cmp	r6, r7
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	d010      	beq.n	8003a60 <__ieee754_rem_pio2f+0x5c>
 8003a3e:	4997      	ldr	r1, [pc, #604]	; (8003c9c <__ieee754_rem_pio2f+0x298>)
 8003a40:	f7fc ff94 	bl	800096c <__aeabi_fsub>
 8003a44:	4601      	mov	r1, r0
 8003a46:	6020      	str	r0, [r4, #0]
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f7fc ff8f 	bl	800096c <__aeabi_fsub>
 8003a4e:	4993      	ldr	r1, [pc, #588]	; (8003c9c <__ieee754_rem_pio2f+0x298>)
 8003a50:	f7fc ff8c 	bl	800096c <__aeabi_fsub>
 8003a54:	2501      	movs	r5, #1
 8003a56:	6060      	str	r0, [r4, #4]
 8003a58:	4628      	mov	r0, r5
 8003a5a:	b007      	add	sp, #28
 8003a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a60:	498f      	ldr	r1, [pc, #572]	; (8003ca0 <__ieee754_rem_pio2f+0x29c>)
 8003a62:	f7fc ff83 	bl	800096c <__aeabi_fsub>
 8003a66:	498f      	ldr	r1, [pc, #572]	; (8003ca4 <__ieee754_rem_pio2f+0x2a0>)
 8003a68:	4605      	mov	r5, r0
 8003a6a:	f7fc ff7f 	bl	800096c <__aeabi_fsub>
 8003a6e:	4601      	mov	r1, r0
 8003a70:	6020      	str	r0, [r4, #0]
 8003a72:	4628      	mov	r0, r5
 8003a74:	f7fc ff7a 	bl	800096c <__aeabi_fsub>
 8003a78:	498a      	ldr	r1, [pc, #552]	; (8003ca4 <__ieee754_rem_pio2f+0x2a0>)
 8003a7a:	e7e9      	b.n	8003a50 <__ieee754_rem_pio2f+0x4c>
 8003a7c:	f7fc ff78 	bl	8000970 <__addsf3>
 8003a80:	42be      	cmp	r6, r7
 8003a82:	4605      	mov	r5, r0
 8003a84:	d00e      	beq.n	8003aa4 <__ieee754_rem_pio2f+0xa0>
 8003a86:	4985      	ldr	r1, [pc, #532]	; (8003c9c <__ieee754_rem_pio2f+0x298>)
 8003a88:	f7fc ff72 	bl	8000970 <__addsf3>
 8003a8c:	4601      	mov	r1, r0
 8003a8e:	6020      	str	r0, [r4, #0]
 8003a90:	4628      	mov	r0, r5
 8003a92:	f7fc ff6b 	bl	800096c <__aeabi_fsub>
 8003a96:	4981      	ldr	r1, [pc, #516]	; (8003c9c <__ieee754_rem_pio2f+0x298>)
 8003a98:	f7fc ff6a 	bl	8000970 <__addsf3>
 8003a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8003aa0:	6060      	str	r0, [r4, #4]
 8003aa2:	e7d9      	b.n	8003a58 <__ieee754_rem_pio2f+0x54>
 8003aa4:	497e      	ldr	r1, [pc, #504]	; (8003ca0 <__ieee754_rem_pio2f+0x29c>)
 8003aa6:	f7fc ff63 	bl	8000970 <__addsf3>
 8003aaa:	497e      	ldr	r1, [pc, #504]	; (8003ca4 <__ieee754_rem_pio2f+0x2a0>)
 8003aac:	4605      	mov	r5, r0
 8003aae:	f7fc ff5f 	bl	8000970 <__addsf3>
 8003ab2:	4601      	mov	r1, r0
 8003ab4:	6020      	str	r0, [r4, #0]
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f7fc ff58 	bl	800096c <__aeabi_fsub>
 8003abc:	4979      	ldr	r1, [pc, #484]	; (8003ca4 <__ieee754_rem_pio2f+0x2a0>)
 8003abe:	e7eb      	b.n	8003a98 <__ieee754_rem_pio2f+0x94>
 8003ac0:	4a79      	ldr	r2, [pc, #484]	; (8003ca8 <__ieee754_rem_pio2f+0x2a4>)
 8003ac2:	4296      	cmp	r6, r2
 8003ac4:	f300 8091 	bgt.w	8003bea <__ieee754_rem_pio2f+0x1e6>
 8003ac8:	f000 fca2 	bl	8004410 <fabsf>
 8003acc:	4977      	ldr	r1, [pc, #476]	; (8003cac <__ieee754_rem_pio2f+0x2a8>)
 8003ace:	4607      	mov	r7, r0
 8003ad0:	f7fc fc68 	bl	80003a4 <__aeabi_fmul>
 8003ad4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ad8:	f7fc ff4a 	bl	8000970 <__addsf3>
 8003adc:	f7fd f8c6 	bl	8000c6c <__aeabi_f2iz>
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	f7fc fff9 	bl	8000ad8 <__aeabi_i2f>
 8003ae6:	496b      	ldr	r1, [pc, #428]	; (8003c94 <__ieee754_rem_pio2f+0x290>)
 8003ae8:	4681      	mov	r9, r0
 8003aea:	f7fc fc5b 	bl	80003a4 <__aeabi_fmul>
 8003aee:	4601      	mov	r1, r0
 8003af0:	4638      	mov	r0, r7
 8003af2:	f7fc ff3b 	bl	800096c <__aeabi_fsub>
 8003af6:	4969      	ldr	r1, [pc, #420]	; (8003c9c <__ieee754_rem_pio2f+0x298>)
 8003af8:	4680      	mov	r8, r0
 8003afa:	4648      	mov	r0, r9
 8003afc:	f7fc fc52 	bl	80003a4 <__aeabi_fmul>
 8003b00:	2d1f      	cmp	r5, #31
 8003b02:	4607      	mov	r7, r0
 8003b04:	dc0c      	bgt.n	8003b20 <__ieee754_rem_pio2f+0x11c>
 8003b06:	4a6a      	ldr	r2, [pc, #424]	; (8003cb0 <__ieee754_rem_pio2f+0x2ac>)
 8003b08:	1e69      	subs	r1, r5, #1
 8003b0a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003b0e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <__ieee754_rem_pio2f+0x11c>
 8003b16:	4639      	mov	r1, r7
 8003b18:	4640      	mov	r0, r8
 8003b1a:	f7fc ff27 	bl	800096c <__aeabi_fsub>
 8003b1e:	e00b      	b.n	8003b38 <__ieee754_rem_pio2f+0x134>
 8003b20:	4639      	mov	r1, r7
 8003b22:	4640      	mov	r0, r8
 8003b24:	f7fc ff22 	bl	800096c <__aeabi_fsub>
 8003b28:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003b2c:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8003b30:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8003b34:	2e08      	cmp	r6, #8
 8003b36:	dc01      	bgt.n	8003b3c <__ieee754_rem_pio2f+0x138>
 8003b38:	6020      	str	r0, [r4, #0]
 8003b3a:	e026      	b.n	8003b8a <__ieee754_rem_pio2f+0x186>
 8003b3c:	4958      	ldr	r1, [pc, #352]	; (8003ca0 <__ieee754_rem_pio2f+0x29c>)
 8003b3e:	4648      	mov	r0, r9
 8003b40:	f7fc fc30 	bl	80003a4 <__aeabi_fmul>
 8003b44:	4607      	mov	r7, r0
 8003b46:	4601      	mov	r1, r0
 8003b48:	4640      	mov	r0, r8
 8003b4a:	f7fc ff0f 	bl	800096c <__aeabi_fsub>
 8003b4e:	4601      	mov	r1, r0
 8003b50:	4606      	mov	r6, r0
 8003b52:	4640      	mov	r0, r8
 8003b54:	f7fc ff0a 	bl	800096c <__aeabi_fsub>
 8003b58:	4639      	mov	r1, r7
 8003b5a:	f7fc ff07 	bl	800096c <__aeabi_fsub>
 8003b5e:	4607      	mov	r7, r0
 8003b60:	4950      	ldr	r1, [pc, #320]	; (8003ca4 <__ieee754_rem_pio2f+0x2a0>)
 8003b62:	4648      	mov	r0, r9
 8003b64:	f7fc fc1e 	bl	80003a4 <__aeabi_fmul>
 8003b68:	4639      	mov	r1, r7
 8003b6a:	f7fc feff 	bl	800096c <__aeabi_fsub>
 8003b6e:	4601      	mov	r1, r0
 8003b70:	4607      	mov	r7, r0
 8003b72:	4630      	mov	r0, r6
 8003b74:	f7fc fefa 	bl	800096c <__aeabi_fsub>
 8003b78:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003b7c:	ebab 0b03 	sub.w	fp, fp, r3
 8003b80:	f1bb 0f19 	cmp.w	fp, #25
 8003b84:	dc16      	bgt.n	8003bb4 <__ieee754_rem_pio2f+0x1b0>
 8003b86:	46b0      	mov	r8, r6
 8003b88:	6020      	str	r0, [r4, #0]
 8003b8a:	6826      	ldr	r6, [r4, #0]
 8003b8c:	4640      	mov	r0, r8
 8003b8e:	4631      	mov	r1, r6
 8003b90:	f7fc feec 	bl	800096c <__aeabi_fsub>
 8003b94:	4639      	mov	r1, r7
 8003b96:	f7fc fee9 	bl	800096c <__aeabi_fsub>
 8003b9a:	f1ba 0f00 	cmp.w	sl, #0
 8003b9e:	6060      	str	r0, [r4, #4]
 8003ba0:	f6bf af5a 	bge.w	8003a58 <__ieee754_rem_pio2f+0x54>
 8003ba4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003ba8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003bac:	6026      	str	r6, [r4, #0]
 8003bae:	6060      	str	r0, [r4, #4]
 8003bb0:	426d      	negs	r5, r5
 8003bb2:	e751      	b.n	8003a58 <__ieee754_rem_pio2f+0x54>
 8003bb4:	493f      	ldr	r1, [pc, #252]	; (8003cb4 <__ieee754_rem_pio2f+0x2b0>)
 8003bb6:	4648      	mov	r0, r9
 8003bb8:	f7fc fbf4 	bl	80003a4 <__aeabi_fmul>
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f7fc fed3 	bl	800096c <__aeabi_fsub>
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4680      	mov	r8, r0
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f7fc fece 	bl	800096c <__aeabi_fsub>
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	f7fc fecb 	bl	800096c <__aeabi_fsub>
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	4937      	ldr	r1, [pc, #220]	; (8003cb8 <__ieee754_rem_pio2f+0x2b4>)
 8003bda:	4648      	mov	r0, r9
 8003bdc:	f7fc fbe2 	bl	80003a4 <__aeabi_fmul>
 8003be0:	4631      	mov	r1, r6
 8003be2:	f7fc fec3 	bl	800096c <__aeabi_fsub>
 8003be6:	4607      	mov	r7, r0
 8003be8:	e795      	b.n	8003b16 <__ieee754_rem_pio2f+0x112>
 8003bea:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003bee:	db05      	blt.n	8003bfc <__ieee754_rem_pio2f+0x1f8>
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	f7fc febb 	bl	800096c <__aeabi_fsub>
 8003bf6:	6060      	str	r0, [r4, #4]
 8003bf8:	6020      	str	r0, [r4, #0]
 8003bfa:	e710      	b.n	8003a1e <__ieee754_rem_pio2f+0x1a>
 8003bfc:	15f7      	asrs	r7, r6, #23
 8003bfe:	3f86      	subs	r7, #134	; 0x86
 8003c00:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8003c04:	4630      	mov	r0, r6
 8003c06:	f7fd f831 	bl	8000c6c <__aeabi_f2iz>
 8003c0a:	f7fc ff65 	bl	8000ad8 <__aeabi_i2f>
 8003c0e:	4601      	mov	r1, r0
 8003c10:	9003      	str	r0, [sp, #12]
 8003c12:	4630      	mov	r0, r6
 8003c14:	f7fc feaa 	bl	800096c <__aeabi_fsub>
 8003c18:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003c1c:	f7fc fbc2 	bl	80003a4 <__aeabi_fmul>
 8003c20:	4606      	mov	r6, r0
 8003c22:	f7fd f823 	bl	8000c6c <__aeabi_f2iz>
 8003c26:	f7fc ff57 	bl	8000ad8 <__aeabi_i2f>
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	9004      	str	r0, [sp, #16]
 8003c2e:	4605      	mov	r5, r0
 8003c30:	4630      	mov	r0, r6
 8003c32:	f7fc fe9b 	bl	800096c <__aeabi_fsub>
 8003c36:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003c3a:	f7fc fbb3 	bl	80003a4 <__aeabi_fmul>
 8003c3e:	2100      	movs	r1, #0
 8003c40:	9005      	str	r0, [sp, #20]
 8003c42:	f7fc ffe1 	bl	8000c08 <__aeabi_fcmpeq>
 8003c46:	b1f0      	cbz	r0, 8003c86 <__ieee754_rem_pio2f+0x282>
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f7fc ffdc 	bl	8000c08 <__aeabi_fcmpeq>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2302      	moveq	r3, #2
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <__ieee754_rem_pio2f+0x2b8>)
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	9201      	str	r2, [sp, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	a803      	add	r0, sp, #12
 8003c62:	9200      	str	r2, [sp, #0]
 8003c64:	463a      	mov	r2, r7
 8003c66:	f000 f8ab 	bl	8003dc0 <__kernel_rem_pio2f>
 8003c6a:	f1ba 0f00 	cmp.w	sl, #0
 8003c6e:	4605      	mov	r5, r0
 8003c70:	f6bf aef2 	bge.w	8003a58 <__ieee754_rem_pio2f+0x54>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	6863      	ldr	r3, [r4, #4]
 8003c7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	e794      	b.n	8003bb0 <__ieee754_rem_pio2f+0x1ac>
 8003c86:	2303      	movs	r3, #3
 8003c88:	e7e6      	b.n	8003c58 <__ieee754_rem_pio2f+0x254>
 8003c8a:	bf00      	nop
 8003c8c:	3f490fd8 	.word	0x3f490fd8
 8003c90:	4016cbe3 	.word	0x4016cbe3
 8003c94:	3fc90f80 	.word	0x3fc90f80
 8003c98:	3fc90fd0 	.word	0x3fc90fd0
 8003c9c:	37354443 	.word	0x37354443
 8003ca0:	37354400 	.word	0x37354400
 8003ca4:	2e85a308 	.word	0x2e85a308
 8003ca8:	43490f80 	.word	0x43490f80
 8003cac:	3f22f984 	.word	0x3f22f984
 8003cb0:	0800a780 	.word	0x0800a780
 8003cb4:	2e85a300 	.word	0x2e85a300
 8003cb8:	248d3132 	.word	0x248d3132
 8003cbc:	0800a800 	.word	0x0800a800

08003cc0 <__kernel_cosf>:
 8003cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003cc8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003ccc:	4606      	mov	r6, r0
 8003cce:	4688      	mov	r8, r1
 8003cd0:	da03      	bge.n	8003cda <__kernel_cosf+0x1a>
 8003cd2:	f7fc ffcb 	bl	8000c6c <__aeabi_f2iz>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d05c      	beq.n	8003d94 <__kernel_cosf+0xd4>
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f7fc fb61 	bl	80003a4 <__aeabi_fmul>
 8003ce2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	f7fc fb5c 	bl	80003a4 <__aeabi_fmul>
 8003cec:	492b      	ldr	r1, [pc, #172]	; (8003d9c <__kernel_cosf+0xdc>)
 8003cee:	4607      	mov	r7, r0
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f7fc fb57 	bl	80003a4 <__aeabi_fmul>
 8003cf6:	492a      	ldr	r1, [pc, #168]	; (8003da0 <__kernel_cosf+0xe0>)
 8003cf8:	f7fc fe3a 	bl	8000970 <__addsf3>
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f7fc fb51 	bl	80003a4 <__aeabi_fmul>
 8003d02:	4928      	ldr	r1, [pc, #160]	; (8003da4 <__kernel_cosf+0xe4>)
 8003d04:	f7fc fe32 	bl	800096c <__aeabi_fsub>
 8003d08:	4629      	mov	r1, r5
 8003d0a:	f7fc fb4b 	bl	80003a4 <__aeabi_fmul>
 8003d0e:	4926      	ldr	r1, [pc, #152]	; (8003da8 <__kernel_cosf+0xe8>)
 8003d10:	f7fc fe2e 	bl	8000970 <__addsf3>
 8003d14:	4629      	mov	r1, r5
 8003d16:	f7fc fb45 	bl	80003a4 <__aeabi_fmul>
 8003d1a:	4924      	ldr	r1, [pc, #144]	; (8003dac <__kernel_cosf+0xec>)
 8003d1c:	f7fc fe26 	bl	800096c <__aeabi_fsub>
 8003d20:	4629      	mov	r1, r5
 8003d22:	f7fc fb3f 	bl	80003a4 <__aeabi_fmul>
 8003d26:	4922      	ldr	r1, [pc, #136]	; (8003db0 <__kernel_cosf+0xf0>)
 8003d28:	f7fc fe22 	bl	8000970 <__addsf3>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fb39 	bl	80003a4 <__aeabi_fmul>
 8003d32:	4629      	mov	r1, r5
 8003d34:	f7fc fb36 	bl	80003a4 <__aeabi_fmul>
 8003d38:	4641      	mov	r1, r8
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7fc fb31 	bl	80003a4 <__aeabi_fmul>
 8003d42:	4601      	mov	r1, r0
 8003d44:	4628      	mov	r0, r5
 8003d46:	f7fc fe11 	bl	800096c <__aeabi_fsub>
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <__kernel_cosf+0xf4>)
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	429c      	cmp	r4, r3
 8003d50:	dc0a      	bgt.n	8003d68 <__kernel_cosf+0xa8>
 8003d52:	4601      	mov	r1, r0
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7fc fe09 	bl	800096c <__aeabi_fsub>
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d60:	f7fc fe04 	bl	800096c <__aeabi_fsub>
 8003d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <__kernel_cosf+0xf8>)
 8003d6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	bfcc      	ite	gt
 8003d72:	4c12      	ldrgt	r4, [pc, #72]	; (8003dbc <__kernel_cosf+0xfc>)
 8003d74:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003d78:	4621      	mov	r1, r4
 8003d7a:	f7fc fdf7 	bl	800096c <__aeabi_fsub>
 8003d7e:	4621      	mov	r1, r4
 8003d80:	4606      	mov	r6, r0
 8003d82:	4638      	mov	r0, r7
 8003d84:	f7fc fdf2 	bl	800096c <__aeabi_fsub>
 8003d88:	4629      	mov	r1, r5
 8003d8a:	f7fc fdef 	bl	800096c <__aeabi_fsub>
 8003d8e:	4601      	mov	r1, r0
 8003d90:	4630      	mov	r0, r6
 8003d92:	e7e5      	b.n	8003d60 <__kernel_cosf+0xa0>
 8003d94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d98:	e7e4      	b.n	8003d64 <__kernel_cosf+0xa4>
 8003d9a:	bf00      	nop
 8003d9c:	ad47d74e 	.word	0xad47d74e
 8003da0:	310f74f6 	.word	0x310f74f6
 8003da4:	3493f27c 	.word	0x3493f27c
 8003da8:	37d00d01 	.word	0x37d00d01
 8003dac:	3ab60b61 	.word	0x3ab60b61
 8003db0:	3d2aaaab 	.word	0x3d2aaaab
 8003db4:	3e999999 	.word	0x3e999999
 8003db8:	3f480000 	.word	0x3f480000
 8003dbc:	3e900000 	.word	0x3e900000

08003dc0 <__kernel_rem_pio2f>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	b0db      	sub	sp, #364	; 0x16c
 8003dc6:	9202      	str	r2, [sp, #8]
 8003dc8:	9304      	str	r3, [sp, #16]
 8003dca:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003dcc:	4bb2      	ldr	r3, [pc, #712]	; (8004098 <__kernel_rem_pio2f+0x2d8>)
 8003dce:	9005      	str	r0, [sp, #20]
 8003dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd4:	9100      	str	r1, [sp, #0]
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9b04      	ldr	r3, [sp, #16]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	9303      	str	r3, [sp, #12]
 8003dde:	9b02      	ldr	r3, [sp, #8]
 8003de0:	1d1a      	adds	r2, r3, #4
 8003de2:	f2c0 809b 	blt.w	8003f1c <__kernel_rem_pio2f+0x15c>
 8003de6:	1edc      	subs	r4, r3, #3
 8003de8:	bf48      	it	mi
 8003dea:	1d1c      	addmi	r4, r3, #4
 8003dec:	10e4      	asrs	r4, r4, #3
 8003dee:	2500      	movs	r5, #0
 8003df0:	f04f 0b00 	mov.w	fp, #0
 8003df4:	1c67      	adds	r7, r4, #1
 8003df6:	00fb      	lsls	r3, r7, #3
 8003df8:	9306      	str	r3, [sp, #24]
 8003dfa:	9b02      	ldr	r3, [sp, #8]
 8003dfc:	9a03      	ldr	r2, [sp, #12]
 8003dfe:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8003e02:	9b01      	ldr	r3, [sp, #4]
 8003e04:	eba4 0802 	sub.w	r8, r4, r2
 8003e08:	eb03 0902 	add.w	r9, r3, r2
 8003e0c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003e0e:	ae1e      	add	r6, sp, #120	; 0x78
 8003e10:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8003e14:	454d      	cmp	r5, r9
 8003e16:	f340 8083 	ble.w	8003f20 <__kernel_rem_pio2f+0x160>
 8003e1a:	9a04      	ldr	r2, [sp, #16]
 8003e1c:	ab1e      	add	r3, sp, #120	; 0x78
 8003e1e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8003e22:	f04f 0900 	mov.w	r9, #0
 8003e26:	2300      	movs	r3, #0
 8003e28:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8003e2c:	9a01      	ldr	r2, [sp, #4]
 8003e2e:	4591      	cmp	r9, r2
 8003e30:	f340 809e 	ble.w	8003f70 <__kernel_rem_pio2f+0x1b0>
 8003e34:	4613      	mov	r3, r2
 8003e36:	aa0a      	add	r2, sp, #40	; 0x28
 8003e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e3c:	9308      	str	r3, [sp, #32]
 8003e3e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003e40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003e44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003e48:	9307      	str	r3, [sp, #28]
 8003e4a:	ac0a      	add	r4, sp, #40	; 0x28
 8003e4c:	4626      	mov	r6, r4
 8003e4e:	46c3      	mov	fp, r8
 8003e50:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8003e54:	ab5a      	add	r3, sp, #360	; 0x168
 8003e56:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8003e5a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8003e5e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8003e62:	f1bb 0f00 	cmp.w	fp, #0
 8003e66:	f300 8088 	bgt.w	8003f7a <__kernel_rem_pio2f+0x1ba>
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f000 fb15 	bl	800449c <scalbnf>
 8003e72:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003e76:	4605      	mov	r5, r0
 8003e78:	f7fc fa94 	bl	80003a4 <__aeabi_fmul>
 8003e7c:	f000 facc 	bl	8004418 <floorf>
 8003e80:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003e84:	f7fc fa8e 	bl	80003a4 <__aeabi_fmul>
 8003e88:	4601      	mov	r1, r0
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f7fc fd6e 	bl	800096c <__aeabi_fsub>
 8003e90:	4605      	mov	r5, r0
 8003e92:	f7fc feeb 	bl	8000c6c <__aeabi_f2iz>
 8003e96:	4606      	mov	r6, r0
 8003e98:	f7fc fe1e 	bl	8000ad8 <__aeabi_i2f>
 8003e9c:	4601      	mov	r1, r0
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f7fc fd64 	bl	800096c <__aeabi_fsub>
 8003ea4:	2f00      	cmp	r7, #0
 8003ea6:	4681      	mov	r9, r0
 8003ea8:	f340 8086 	ble.w	8003fb8 <__kernel_rem_pio2f+0x1f8>
 8003eac:	f108 32ff 	add.w	r2, r8, #4294967295
 8003eb0:	ab0a      	add	r3, sp, #40	; 0x28
 8003eb2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8003eb6:	f1c7 0108 	rsb	r1, r7, #8
 8003eba:	fa45 f301 	asr.w	r3, r5, r1
 8003ebe:	441e      	add	r6, r3
 8003ec0:	408b      	lsls	r3, r1
 8003ec2:	1aed      	subs	r5, r5, r3
 8003ec4:	f1c7 0007 	rsb	r0, r7, #7
 8003ec8:	ab0a      	add	r3, sp, #40	; 0x28
 8003eca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003ece:	4105      	asrs	r5, r0
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	dd7f      	ble.n	8003fd4 <__kernel_rem_pio2f+0x214>
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	4692      	mov	sl, r2
 8003ed8:	3601      	adds	r6, #1
 8003eda:	4590      	cmp	r8, r2
 8003edc:	f300 80b0 	bgt.w	8004040 <__kernel_rem_pio2f+0x280>
 8003ee0:	2f00      	cmp	r7, #0
 8003ee2:	dd05      	ble.n	8003ef0 <__kernel_rem_pio2f+0x130>
 8003ee4:	2f01      	cmp	r7, #1
 8003ee6:	f000 80bd 	beq.w	8004064 <__kernel_rem_pio2f+0x2a4>
 8003eea:	2f02      	cmp	r7, #2
 8003eec:	f000 80c5 	beq.w	800407a <__kernel_rem_pio2f+0x2ba>
 8003ef0:	2d02      	cmp	r5, #2
 8003ef2:	d16f      	bne.n	8003fd4 <__kernel_rem_pio2f+0x214>
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003efa:	f7fc fd37 	bl	800096c <__aeabi_fsub>
 8003efe:	4681      	mov	r9, r0
 8003f00:	f1ba 0f00 	cmp.w	sl, #0
 8003f04:	d066      	beq.n	8003fd4 <__kernel_rem_pio2f+0x214>
 8003f06:	4639      	mov	r1, r7
 8003f08:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f0c:	f000 fac6 	bl	800449c <scalbnf>
 8003f10:	4601      	mov	r1, r0
 8003f12:	4648      	mov	r0, r9
 8003f14:	f7fc fd2a 	bl	800096c <__aeabi_fsub>
 8003f18:	4681      	mov	r9, r0
 8003f1a:	e05b      	b.n	8003fd4 <__kernel_rem_pio2f+0x214>
 8003f1c:	2400      	movs	r4, #0
 8003f1e:	e766      	b.n	8003dee <__kernel_rem_pio2f+0x2e>
 8003f20:	eb18 0f05 	cmn.w	r8, r5
 8003f24:	d407      	bmi.n	8003f36 <__kernel_rem_pio2f+0x176>
 8003f26:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8003f2a:	f7fc fdd5 	bl	8000ad8 <__aeabi_i2f>
 8003f2e:	f846 0b04 	str.w	r0, [r6], #4
 8003f32:	3501      	adds	r5, #1
 8003f34:	e76e      	b.n	8003e14 <__kernel_rem_pio2f+0x54>
 8003f36:	4658      	mov	r0, fp
 8003f38:	e7f9      	b.n	8003f2e <__kernel_rem_pio2f+0x16e>
 8003f3a:	9307      	str	r3, [sp, #28]
 8003f3c:	9b05      	ldr	r3, [sp, #20]
 8003f3e:	f8da 1000 	ldr.w	r1, [sl]
 8003f42:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003f46:	f7fc fa2d 	bl	80003a4 <__aeabi_fmul>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7fc fd0f 	bl	8000970 <__addsf3>
 8003f52:	4606      	mov	r6, r0
 8003f54:	9b07      	ldr	r3, [sp, #28]
 8003f56:	f108 0801 	add.w	r8, r8, #1
 8003f5a:	9a03      	ldr	r2, [sp, #12]
 8003f5c:	f1aa 0a04 	sub.w	sl, sl, #4
 8003f60:	4590      	cmp	r8, r2
 8003f62:	ddea      	ble.n	8003f3a <__kernel_rem_pio2f+0x17a>
 8003f64:	f84b 6b04 	str.w	r6, [fp], #4
 8003f68:	f109 0901 	add.w	r9, r9, #1
 8003f6c:	3504      	adds	r5, #4
 8003f6e:	e75d      	b.n	8003e2c <__kernel_rem_pio2f+0x6c>
 8003f70:	46aa      	mov	sl, r5
 8003f72:	461e      	mov	r6, r3
 8003f74:	f04f 0800 	mov.w	r8, #0
 8003f78:	e7ef      	b.n	8003f5a <__kernel_rem_pio2f+0x19a>
 8003f7a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7fc fa10 	bl	80003a4 <__aeabi_fmul>
 8003f84:	f7fc fe72 	bl	8000c6c <__aeabi_f2iz>
 8003f88:	f7fc fda6 	bl	8000ad8 <__aeabi_i2f>
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	9009      	str	r0, [sp, #36]	; 0x24
 8003f90:	f7fc fa08 	bl	80003a4 <__aeabi_fmul>
 8003f94:	4601      	mov	r1, r0
 8003f96:	4628      	mov	r0, r5
 8003f98:	f7fc fce8 	bl	800096c <__aeabi_fsub>
 8003f9c:	f7fc fe66 	bl	8000c6c <__aeabi_f2iz>
 8003fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fa6:	f846 0b04 	str.w	r0, [r6], #4
 8003faa:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fcde 	bl	8000970 <__addsf3>
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	e754      	b.n	8003e62 <__kernel_rem_pio2f+0xa2>
 8003fb8:	d106      	bne.n	8003fc8 <__kernel_rem_pio2f+0x208>
 8003fba:	f108 33ff 	add.w	r3, r8, #4294967295
 8003fbe:	aa0a      	add	r2, sp, #40	; 0x28
 8003fc0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003fc4:	11ed      	asrs	r5, r5, #7
 8003fc6:	e783      	b.n	8003ed0 <__kernel_rem_pio2f+0x110>
 8003fc8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003fcc:	f7fc fe3a 	bl	8000c44 <__aeabi_fcmpge>
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	bb98      	cbnz	r0, 800403c <__kernel_rem_pio2f+0x27c>
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4648      	mov	r0, r9
 8003fd8:	f7fc fe16 	bl	8000c08 <__aeabi_fcmpeq>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	f000 8098 	beq.w	8004112 <__kernel_rem_pio2f+0x352>
 8003fe2:	f108 34ff 	add.w	r4, r8, #4294967295
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	2200      	movs	r2, #0
 8003fea:	9901      	ldr	r1, [sp, #4]
 8003fec:	428b      	cmp	r3, r1
 8003fee:	da4c      	bge.n	800408a <__kernel_rem_pio2f+0x2ca>
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	d07a      	beq.n	80040ea <__kernel_rem_pio2f+0x32a>
 8003ff4:	ab0a      	add	r3, sp, #40	; 0x28
 8003ff6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003ffa:	3f08      	subs	r7, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8086 	beq.w	800410e <__kernel_rem_pio2f+0x34e>
 8004002:	4639      	mov	r1, r7
 8004004:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004008:	f000 fa48 	bl	800449c <scalbnf>
 800400c:	46a2      	mov	sl, r4
 800400e:	4681      	mov	r9, r0
 8004010:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8004014:	af46      	add	r7, sp, #280	; 0x118
 8004016:	f1ba 0f00 	cmp.w	sl, #0
 800401a:	f280 80af 	bge.w	800417c <__kernel_rem_pio2f+0x3bc>
 800401e:	4627      	mov	r7, r4
 8004020:	2200      	movs	r2, #0
 8004022:	2f00      	cmp	r7, #0
 8004024:	f2c0 80d9 	blt.w	80041da <__kernel_rem_pio2f+0x41a>
 8004028:	a946      	add	r1, sp, #280	; 0x118
 800402a:	4690      	mov	r8, r2
 800402c:	f04f 0a00 	mov.w	sl, #0
 8004030:	4b1a      	ldr	r3, [pc, #104]	; (800409c <__kernel_rem_pio2f+0x2dc>)
 8004032:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8004036:	eba4 0907 	sub.w	r9, r4, r7
 800403a:	e0c2      	b.n	80041c2 <__kernel_rem_pio2f+0x402>
 800403c:	2502      	movs	r5, #2
 800403e:	e749      	b.n	8003ed4 <__kernel_rem_pio2f+0x114>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	f1ba 0f00 	cmp.w	sl, #0
 8004046:	d108      	bne.n	800405a <__kernel_rem_pio2f+0x29a>
 8004048:	b11b      	cbz	r3, 8004052 <__kernel_rem_pio2f+0x292>
 800404a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	2301      	movs	r3, #1
 8004052:	469a      	mov	sl, r3
 8004054:	3201      	adds	r2, #1
 8004056:	3404      	adds	r4, #4
 8004058:	e73f      	b.n	8003eda <__kernel_rem_pio2f+0x11a>
 800405a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	4653      	mov	r3, sl
 8004062:	e7f6      	b.n	8004052 <__kernel_rem_pio2f+0x292>
 8004064:	f108 32ff 	add.w	r2, r8, #4294967295
 8004068:	ab0a      	add	r3, sp, #40	; 0x28
 800406a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004072:	a90a      	add	r1, sp, #40	; 0x28
 8004074:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004078:	e73a      	b.n	8003ef0 <__kernel_rem_pio2f+0x130>
 800407a:	f108 32ff 	add.w	r2, r8, #4294967295
 800407e:	ab0a      	add	r3, sp, #40	; 0x28
 8004080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004088:	e7f3      	b.n	8004072 <__kernel_rem_pio2f+0x2b2>
 800408a:	a90a      	add	r1, sp, #40	; 0x28
 800408c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004090:	3b01      	subs	r3, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	e7a9      	b.n	8003fea <__kernel_rem_pio2f+0x22a>
 8004096:	bf00      	nop
 8004098:	0800ab44 	.word	0x0800ab44
 800409c:	0800ab18 	.word	0x0800ab18
 80040a0:	3301      	adds	r3, #1
 80040a2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80040a6:	2900      	cmp	r1, #0
 80040a8:	d0fa      	beq.n	80040a0 <__kernel_rem_pio2f+0x2e0>
 80040aa:	9a04      	ldr	r2, [sp, #16]
 80040ac:	f108 0501 	add.w	r5, r8, #1
 80040b0:	eb08 0402 	add.w	r4, r8, r2
 80040b4:	aa1e      	add	r2, sp, #120	; 0x78
 80040b6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80040ba:	4498      	add	r8, r3
 80040bc:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80040c0:	45a8      	cmp	r8, r5
 80040c2:	f6ff aec2 	blt.w	8003e4a <__kernel_rem_pio2f+0x8a>
 80040c6:	9b07      	ldr	r3, [sp, #28]
 80040c8:	46a3      	mov	fp, r4
 80040ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80040ce:	f7fc fd03 	bl	8000ad8 <__aeabi_i2f>
 80040d2:	f04f 0a00 	mov.w	sl, #0
 80040d6:	2600      	movs	r6, #0
 80040d8:	6020      	str	r0, [r4, #0]
 80040da:	9b03      	ldr	r3, [sp, #12]
 80040dc:	459a      	cmp	sl, r3
 80040de:	dd07      	ble.n	80040f0 <__kernel_rem_pio2f+0x330>
 80040e0:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 80040e4:	3404      	adds	r4, #4
 80040e6:	3501      	adds	r5, #1
 80040e8:	e7ea      	b.n	80040c0 <__kernel_rem_pio2f+0x300>
 80040ea:	2301      	movs	r3, #1
 80040ec:	9a08      	ldr	r2, [sp, #32]
 80040ee:	e7d8      	b.n	80040a2 <__kernel_rem_pio2f+0x2e2>
 80040f0:	9b05      	ldr	r3, [sp, #20]
 80040f2:	f85b 0904 	ldr.w	r0, [fp], #-4
 80040f6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80040fa:	f7fc f953 	bl	80003a4 <__aeabi_fmul>
 80040fe:	4601      	mov	r1, r0
 8004100:	4630      	mov	r0, r6
 8004102:	f7fc fc35 	bl	8000970 <__addsf3>
 8004106:	f10a 0a01 	add.w	sl, sl, #1
 800410a:	4606      	mov	r6, r0
 800410c:	e7e5      	b.n	80040da <__kernel_rem_pio2f+0x31a>
 800410e:	3c01      	subs	r4, #1
 8004110:	e770      	b.n	8003ff4 <__kernel_rem_pio2f+0x234>
 8004112:	9b06      	ldr	r3, [sp, #24]
 8004114:	9a02      	ldr	r2, [sp, #8]
 8004116:	4648      	mov	r0, r9
 8004118:	1a99      	subs	r1, r3, r2
 800411a:	f000 f9bf 	bl	800449c <scalbnf>
 800411e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004122:	4604      	mov	r4, r0
 8004124:	f7fc fd8e 	bl	8000c44 <__aeabi_fcmpge>
 8004128:	b300      	cbz	r0, 800416c <__kernel_rem_pio2f+0x3ac>
 800412a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800412e:	4620      	mov	r0, r4
 8004130:	f7fc f938 	bl	80003a4 <__aeabi_fmul>
 8004134:	f7fc fd9a 	bl	8000c6c <__aeabi_f2iz>
 8004138:	f7fc fcce 	bl	8000ad8 <__aeabi_i2f>
 800413c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004140:	4681      	mov	r9, r0
 8004142:	f7fc f92f 	bl	80003a4 <__aeabi_fmul>
 8004146:	4601      	mov	r1, r0
 8004148:	4620      	mov	r0, r4
 800414a:	f7fc fc0f 	bl	800096c <__aeabi_fsub>
 800414e:	f7fc fd8d 	bl	8000c6c <__aeabi_f2iz>
 8004152:	ab0a      	add	r3, sp, #40	; 0x28
 8004154:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004158:	4648      	mov	r0, r9
 800415a:	f7fc fd87 	bl	8000c6c <__aeabi_f2iz>
 800415e:	f108 0401 	add.w	r4, r8, #1
 8004162:	ab0a      	add	r3, sp, #40	; 0x28
 8004164:	3708      	adds	r7, #8
 8004166:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800416a:	e74a      	b.n	8004002 <__kernel_rem_pio2f+0x242>
 800416c:	4620      	mov	r0, r4
 800416e:	f7fc fd7d 	bl	8000c6c <__aeabi_f2iz>
 8004172:	ab0a      	add	r3, sp, #40	; 0x28
 8004174:	4644      	mov	r4, r8
 8004176:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800417a:	e742      	b.n	8004002 <__kernel_rem_pio2f+0x242>
 800417c:	ab0a      	add	r3, sp, #40	; 0x28
 800417e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004182:	f7fc fca9 	bl	8000ad8 <__aeabi_i2f>
 8004186:	4649      	mov	r1, r9
 8004188:	f7fc f90c 	bl	80003a4 <__aeabi_fmul>
 800418c:	4641      	mov	r1, r8
 800418e:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8004192:	4648      	mov	r0, r9
 8004194:	f7fc f906 	bl	80003a4 <__aeabi_fmul>
 8004198:	f10a 3aff 	add.w	sl, sl, #4294967295
 800419c:	4681      	mov	r9, r0
 800419e:	e73a      	b.n	8004016 <__kernel_rem_pio2f+0x256>
 80041a0:	f853 0b04 	ldr.w	r0, [r3], #4
 80041a4:	f85b 1b04 	ldr.w	r1, [fp], #4
 80041a8:	9203      	str	r2, [sp, #12]
 80041aa:	9302      	str	r3, [sp, #8]
 80041ac:	f7fc f8fa 	bl	80003a4 <__aeabi_fmul>
 80041b0:	4601      	mov	r1, r0
 80041b2:	4640      	mov	r0, r8
 80041b4:	f7fc fbdc 	bl	8000970 <__addsf3>
 80041b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80041bc:	4680      	mov	r8, r0
 80041be:	f10a 0a01 	add.w	sl, sl, #1
 80041c2:	9901      	ldr	r1, [sp, #4]
 80041c4:	458a      	cmp	sl, r1
 80041c6:	dc01      	bgt.n	80041cc <__kernel_rem_pio2f+0x40c>
 80041c8:	45ca      	cmp	sl, r9
 80041ca:	dde9      	ble.n	80041a0 <__kernel_rem_pio2f+0x3e0>
 80041cc:	ab5a      	add	r3, sp, #360	; 0x168
 80041ce:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80041d2:	f849 8ca0 	str.w	r8, [r9, #-160]
 80041d6:	3f01      	subs	r7, #1
 80041d8:	e723      	b.n	8004022 <__kernel_rem_pio2f+0x262>
 80041da:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80041dc:	2b02      	cmp	r3, #2
 80041de:	dc07      	bgt.n	80041f0 <__kernel_rem_pio2f+0x430>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	dc4d      	bgt.n	8004280 <__kernel_rem_pio2f+0x4c0>
 80041e4:	d02e      	beq.n	8004244 <__kernel_rem_pio2f+0x484>
 80041e6:	f006 0007 	and.w	r0, r6, #7
 80041ea:	b05b      	add	sp, #364	; 0x16c
 80041ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d1f7      	bne.n	80041e6 <__kernel_rem_pio2f+0x426>
 80041f6:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 80041fa:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80041fe:	46b8      	mov	r8, r7
 8004200:	46a2      	mov	sl, r4
 8004202:	f1ba 0f00 	cmp.w	sl, #0
 8004206:	dc48      	bgt.n	800429a <__kernel_rem_pio2f+0x4da>
 8004208:	46a1      	mov	r9, r4
 800420a:	f1b9 0f01 	cmp.w	r9, #1
 800420e:	dc5f      	bgt.n	80042d0 <__kernel_rem_pio2f+0x510>
 8004210:	2000      	movs	r0, #0
 8004212:	2c01      	cmp	r4, #1
 8004214:	dc75      	bgt.n	8004302 <__kernel_rem_pio2f+0x542>
 8004216:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8004218:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800421a:	2d00      	cmp	r5, #0
 800421c:	d177      	bne.n	800430e <__kernel_rem_pio2f+0x54e>
 800421e:	9900      	ldr	r1, [sp, #0]
 8004220:	600a      	str	r2, [r1, #0]
 8004222:	460a      	mov	r2, r1
 8004224:	604b      	str	r3, [r1, #4]
 8004226:	6090      	str	r0, [r2, #8]
 8004228:	e7dd      	b.n	80041e6 <__kernel_rem_pio2f+0x426>
 800422a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800422e:	f7fc fb9f 	bl	8000970 <__addsf3>
 8004232:	3c01      	subs	r4, #1
 8004234:	2c00      	cmp	r4, #0
 8004236:	daf8      	bge.n	800422a <__kernel_rem_pio2f+0x46a>
 8004238:	b10d      	cbz	r5, 800423e <__kernel_rem_pio2f+0x47e>
 800423a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800423e:	9b00      	ldr	r3, [sp, #0]
 8004240:	6018      	str	r0, [r3, #0]
 8004242:	e7d0      	b.n	80041e6 <__kernel_rem_pio2f+0x426>
 8004244:	2000      	movs	r0, #0
 8004246:	af32      	add	r7, sp, #200	; 0xc8
 8004248:	e7f4      	b.n	8004234 <__kernel_rem_pio2f+0x474>
 800424a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800424e:	f7fc fb8f 	bl	8000970 <__addsf3>
 8004252:	3f01      	subs	r7, #1
 8004254:	2f00      	cmp	r7, #0
 8004256:	daf8      	bge.n	800424a <__kernel_rem_pio2f+0x48a>
 8004258:	b1bd      	cbz	r5, 800428a <__kernel_rem_pio2f+0x4ca>
 800425a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800425e:	9a00      	ldr	r2, [sp, #0]
 8004260:	4601      	mov	r1, r0
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8004266:	f7fc fb81 	bl	800096c <__aeabi_fsub>
 800426a:	2701      	movs	r7, #1
 800426c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8004270:	42bc      	cmp	r4, r7
 8004272:	da0c      	bge.n	800428e <__kernel_rem_pio2f+0x4ce>
 8004274:	b10d      	cbz	r5, 800427a <__kernel_rem_pio2f+0x4ba>
 8004276:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800427a:	9b00      	ldr	r3, [sp, #0]
 800427c:	6058      	str	r0, [r3, #4]
 800427e:	e7b2      	b.n	80041e6 <__kernel_rem_pio2f+0x426>
 8004280:	4627      	mov	r7, r4
 8004282:	2000      	movs	r0, #0
 8004284:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8004288:	e7e4      	b.n	8004254 <__kernel_rem_pio2f+0x494>
 800428a:	4603      	mov	r3, r0
 800428c:	e7e7      	b.n	800425e <__kernel_rem_pio2f+0x49e>
 800428e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8004292:	f7fc fb6d 	bl	8000970 <__addsf3>
 8004296:	3701      	adds	r7, #1
 8004298:	e7ea      	b.n	8004270 <__kernel_rem_pio2f+0x4b0>
 800429a:	f8d8 3000 	ldr.w	r3, [r8]
 800429e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	9201      	str	r2, [sp, #4]
 80042aa:	f7fc fb61 	bl	8000970 <__addsf3>
 80042ae:	9a01      	ldr	r2, [sp, #4]
 80042b0:	4601      	mov	r1, r0
 80042b2:	4681      	mov	r9, r0
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fc fb59 	bl	800096c <__aeabi_fsub>
 80042ba:	9b02      	ldr	r3, [sp, #8]
 80042bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042c0:	4619      	mov	r1, r3
 80042c2:	f7fc fb55 	bl	8000970 <__addsf3>
 80042c6:	f848 0904 	str.w	r0, [r8], #-4
 80042ca:	f8c8 9000 	str.w	r9, [r8]
 80042ce:	e798      	b.n	8004202 <__kernel_rem_pio2f+0x442>
 80042d0:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80042d4:	f8d7 a000 	ldr.w	sl, [r7]
 80042d8:	4618      	mov	r0, r3
 80042da:	4651      	mov	r1, sl
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	f7fc fb47 	bl	8000970 <__addsf3>
 80042e2:	9b01      	ldr	r3, [sp, #4]
 80042e4:	4601      	mov	r1, r0
 80042e6:	4680      	mov	r8, r0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fc fb3f 	bl	800096c <__aeabi_fsub>
 80042ee:	4651      	mov	r1, sl
 80042f0:	f7fc fb3e 	bl	8000970 <__addsf3>
 80042f4:	f847 0904 	str.w	r0, [r7], #-4
 80042f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80042fc:	f8c7 8000 	str.w	r8, [r7]
 8004300:	e783      	b.n	800420a <__kernel_rem_pio2f+0x44a>
 8004302:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8004306:	f7fc fb33 	bl	8000970 <__addsf3>
 800430a:	3c01      	subs	r4, #1
 800430c:	e781      	b.n	8004212 <__kernel_rem_pio2f+0x452>
 800430e:	9900      	ldr	r1, [sp, #0]
 8004310:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8004314:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004318:	600a      	str	r2, [r1, #0]
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	460a      	mov	r2, r1
 800431e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004322:	e780      	b.n	8004226 <__kernel_rem_pio2f+0x466>

08004324 <__kernel_sinf>:
 8004324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004328:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800432c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004330:	4604      	mov	r4, r0
 8004332:	460f      	mov	r7, r1
 8004334:	4691      	mov	r9, r2
 8004336:	da03      	bge.n	8004340 <__kernel_sinf+0x1c>
 8004338:	f7fc fc98 	bl	8000c6c <__aeabi_f2iz>
 800433c:	2800      	cmp	r0, #0
 800433e:	d035      	beq.n	80043ac <__kernel_sinf+0x88>
 8004340:	4621      	mov	r1, r4
 8004342:	4620      	mov	r0, r4
 8004344:	f7fc f82e 	bl	80003a4 <__aeabi_fmul>
 8004348:	4605      	mov	r5, r0
 800434a:	4601      	mov	r1, r0
 800434c:	4620      	mov	r0, r4
 800434e:	f7fc f829 	bl	80003a4 <__aeabi_fmul>
 8004352:	4929      	ldr	r1, [pc, #164]	; (80043f8 <__kernel_sinf+0xd4>)
 8004354:	4606      	mov	r6, r0
 8004356:	4628      	mov	r0, r5
 8004358:	f7fc f824 	bl	80003a4 <__aeabi_fmul>
 800435c:	4927      	ldr	r1, [pc, #156]	; (80043fc <__kernel_sinf+0xd8>)
 800435e:	f7fc fb05 	bl	800096c <__aeabi_fsub>
 8004362:	4629      	mov	r1, r5
 8004364:	f7fc f81e 	bl	80003a4 <__aeabi_fmul>
 8004368:	4925      	ldr	r1, [pc, #148]	; (8004400 <__kernel_sinf+0xdc>)
 800436a:	f7fc fb01 	bl	8000970 <__addsf3>
 800436e:	4629      	mov	r1, r5
 8004370:	f7fc f818 	bl	80003a4 <__aeabi_fmul>
 8004374:	4923      	ldr	r1, [pc, #140]	; (8004404 <__kernel_sinf+0xe0>)
 8004376:	f7fc faf9 	bl	800096c <__aeabi_fsub>
 800437a:	4629      	mov	r1, r5
 800437c:	f7fc f812 	bl	80003a4 <__aeabi_fmul>
 8004380:	4921      	ldr	r1, [pc, #132]	; (8004408 <__kernel_sinf+0xe4>)
 8004382:	f7fc faf5 	bl	8000970 <__addsf3>
 8004386:	4680      	mov	r8, r0
 8004388:	f1b9 0f00 	cmp.w	r9, #0
 800438c:	d111      	bne.n	80043b2 <__kernel_sinf+0x8e>
 800438e:	4601      	mov	r1, r0
 8004390:	4628      	mov	r0, r5
 8004392:	f7fc f807 	bl	80003a4 <__aeabi_fmul>
 8004396:	491d      	ldr	r1, [pc, #116]	; (800440c <__kernel_sinf+0xe8>)
 8004398:	f7fc fae8 	bl	800096c <__aeabi_fsub>
 800439c:	4631      	mov	r1, r6
 800439e:	f7fc f801 	bl	80003a4 <__aeabi_fmul>
 80043a2:	4601      	mov	r1, r0
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7fc fae3 	bl	8000970 <__addsf3>
 80043aa:	4604      	mov	r4, r0
 80043ac:	4620      	mov	r0, r4
 80043ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80043b6:	4638      	mov	r0, r7
 80043b8:	f7fb fff4 	bl	80003a4 <__aeabi_fmul>
 80043bc:	4641      	mov	r1, r8
 80043be:	4681      	mov	r9, r0
 80043c0:	4630      	mov	r0, r6
 80043c2:	f7fb ffef 	bl	80003a4 <__aeabi_fmul>
 80043c6:	4601      	mov	r1, r0
 80043c8:	4648      	mov	r0, r9
 80043ca:	f7fc facf 	bl	800096c <__aeabi_fsub>
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fb ffe8 	bl	80003a4 <__aeabi_fmul>
 80043d4:	4639      	mov	r1, r7
 80043d6:	f7fc fac9 	bl	800096c <__aeabi_fsub>
 80043da:	490c      	ldr	r1, [pc, #48]	; (800440c <__kernel_sinf+0xe8>)
 80043dc:	4605      	mov	r5, r0
 80043de:	4630      	mov	r0, r6
 80043e0:	f7fb ffe0 	bl	80003a4 <__aeabi_fmul>
 80043e4:	4601      	mov	r1, r0
 80043e6:	4628      	mov	r0, r5
 80043e8:	f7fc fac2 	bl	8000970 <__addsf3>
 80043ec:	4601      	mov	r1, r0
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7fc fabc 	bl	800096c <__aeabi_fsub>
 80043f4:	e7d9      	b.n	80043aa <__kernel_sinf+0x86>
 80043f6:	bf00      	nop
 80043f8:	2f2ec9d3 	.word	0x2f2ec9d3
 80043fc:	32d72f34 	.word	0x32d72f34
 8004400:	3638ef1b 	.word	0x3638ef1b
 8004404:	39500d01 	.word	0x39500d01
 8004408:	3c088889 	.word	0x3c088889
 800440c:	3e2aaaab 	.word	0x3e2aaaab

08004410 <fabsf>:
 8004410:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004414:	4770      	bx	lr
	...

08004418 <floorf>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800441e:	3d7f      	subs	r5, #127	; 0x7f
 8004420:	2d16      	cmp	r5, #22
 8004422:	4601      	mov	r1, r0
 8004424:	4604      	mov	r4, r0
 8004426:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800442a:	dc26      	bgt.n	800447a <floorf+0x62>
 800442c:	2d00      	cmp	r5, #0
 800442e:	da0e      	bge.n	800444e <floorf+0x36>
 8004430:	4917      	ldr	r1, [pc, #92]	; (8004490 <floorf+0x78>)
 8004432:	f7fc fa9d 	bl	8000970 <__addsf3>
 8004436:	2100      	movs	r1, #0
 8004438:	f7fc fc0e 	bl	8000c58 <__aeabi_fcmpgt>
 800443c:	b128      	cbz	r0, 800444a <floorf+0x32>
 800443e:	2c00      	cmp	r4, #0
 8004440:	da23      	bge.n	800448a <floorf+0x72>
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <floorf+0x7c>)
 8004444:	2e00      	cmp	r6, #0
 8004446:	bf18      	it	ne
 8004448:	461c      	movne	r4, r3
 800444a:	4621      	mov	r1, r4
 800444c:	e01b      	b.n	8004486 <floorf+0x6e>
 800444e:	4e12      	ldr	r6, [pc, #72]	; (8004498 <floorf+0x80>)
 8004450:	412e      	asrs	r6, r5
 8004452:	4230      	tst	r0, r6
 8004454:	d017      	beq.n	8004486 <floorf+0x6e>
 8004456:	490e      	ldr	r1, [pc, #56]	; (8004490 <floorf+0x78>)
 8004458:	f7fc fa8a 	bl	8000970 <__addsf3>
 800445c:	2100      	movs	r1, #0
 800445e:	f7fc fbfb 	bl	8000c58 <__aeabi_fcmpgt>
 8004462:	2800      	cmp	r0, #0
 8004464:	d0f1      	beq.n	800444a <floorf+0x32>
 8004466:	2c00      	cmp	r4, #0
 8004468:	bfbe      	ittt	lt
 800446a:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800446e:	fa43 f505 	asrlt.w	r5, r3, r5
 8004472:	1964      	addlt	r4, r4, r5
 8004474:	ea24 0406 	bic.w	r4, r4, r6
 8004478:	e7e7      	b.n	800444a <floorf+0x32>
 800447a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800447e:	d302      	bcc.n	8004486 <floorf+0x6e>
 8004480:	f7fc fa76 	bl	8000970 <__addsf3>
 8004484:	4601      	mov	r1, r0
 8004486:	4608      	mov	r0, r1
 8004488:	bd70      	pop	{r4, r5, r6, pc}
 800448a:	2400      	movs	r4, #0
 800448c:	e7dd      	b.n	800444a <floorf+0x32>
 800448e:	bf00      	nop
 8004490:	7149f2ca 	.word	0x7149f2ca
 8004494:	bf800000 	.word	0xbf800000
 8004498:	007fffff 	.word	0x007fffff

0800449c <scalbnf>:
 800449c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4603      	mov	r3, r0
 80044a4:	460d      	mov	r5, r1
 80044a6:	4604      	mov	r4, r0
 80044a8:	d02a      	beq.n	8004500 <scalbnf+0x64>
 80044aa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80044ae:	d304      	bcc.n	80044ba <scalbnf+0x1e>
 80044b0:	4601      	mov	r1, r0
 80044b2:	f7fc fa5d 	bl	8000970 <__addsf3>
 80044b6:	4603      	mov	r3, r0
 80044b8:	e022      	b.n	8004500 <scalbnf+0x64>
 80044ba:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80044be:	d117      	bne.n	80044f0 <scalbnf+0x54>
 80044c0:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80044c4:	f7fb ff6e 	bl	80003a4 <__aeabi_fmul>
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <scalbnf+0x8c>)
 80044ca:	4603      	mov	r3, r0
 80044cc:	4295      	cmp	r5, r2
 80044ce:	db0b      	blt.n	80044e8 <scalbnf+0x4c>
 80044d0:	4604      	mov	r4, r0
 80044d2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80044d6:	3a19      	subs	r2, #25
 80044d8:	442a      	add	r2, r5
 80044da:	2afe      	cmp	r2, #254	; 0xfe
 80044dc:	dd0a      	ble.n	80044f4 <scalbnf+0x58>
 80044de:	4913      	ldr	r1, [pc, #76]	; (800452c <scalbnf+0x90>)
 80044e0:	4618      	mov	r0, r3
 80044e2:	f361 001e 	bfi	r0, r1, #0, #31
 80044e6:	e000      	b.n	80044ea <scalbnf+0x4e>
 80044e8:	4911      	ldr	r1, [pc, #68]	; (8004530 <scalbnf+0x94>)
 80044ea:	f7fb ff5b 	bl	80003a4 <__aeabi_fmul>
 80044ee:	e7e2      	b.n	80044b6 <scalbnf+0x1a>
 80044f0:	0dd2      	lsrs	r2, r2, #23
 80044f2:	e7f1      	b.n	80044d8 <scalbnf+0x3c>
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	dd05      	ble.n	8004504 <scalbnf+0x68>
 80044f8:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80044fc:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8004500:	4618      	mov	r0, r3
 8004502:	bd38      	pop	{r3, r4, r5, pc}
 8004504:	f112 0f16 	cmn.w	r2, #22
 8004508:	da05      	bge.n	8004516 <scalbnf+0x7a>
 800450a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800450e:	4295      	cmp	r5, r2
 8004510:	dce5      	bgt.n	80044de <scalbnf+0x42>
 8004512:	4907      	ldr	r1, [pc, #28]	; (8004530 <scalbnf+0x94>)
 8004514:	e7e4      	b.n	80044e0 <scalbnf+0x44>
 8004516:	3219      	adds	r2, #25
 8004518:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800451c:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8004520:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8004524:	e7e1      	b.n	80044ea <scalbnf+0x4e>
 8004526:	bf00      	nop
 8004528:	ffff3cb0 	.word	0xffff3cb0
 800452c:	7149f2ca 	.word	0x7149f2ca
 8004530:	0da24260 	.word	0x0da24260

08004534 <_init>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr

08004540 <_fini>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr
